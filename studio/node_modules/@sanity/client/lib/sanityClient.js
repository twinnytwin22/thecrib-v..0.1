"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _patch = _interopRequireDefault(require("./data/patch"));
var _transaction = _interopRequireDefault(require("./data/transaction"));
var _dataMethods = _interopRequireDefault(require("./data/dataMethods"));
var _datasetsClient = _interopRequireDefault(require("./datasets/datasetsClient"));
var _projectsClient = _interopRequireDefault(require("./projects/projectsClient"));
var _assetsClient = _interopRequireDefault(require("./assets/assetsClient"));
var _usersClient = _interopRequireDefault(require("./users/usersClient"));
var _authClient = _interopRequireDefault(require("./auth/authClient"));
var _request = _interopRequireDefault(require("./http/request"));
var _requestOptions = _interopRequireDefault(require("./http/requestOptions"));
var _config = require("./config");
var validate = _interopRequireWildcard(require("./validators"));
var _rxjs = require("rxjs");
var _operators = require("rxjs/operators");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function SanityClient() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _config.defaultConfig;
  if (!(this instanceof SanityClient)) {
    return new SanityClient(config);
  }
  this.config(config);
  this.assets = new _assetsClient.default(this);
  this.datasets = new _datasetsClient.default(this);
  this.projects = new _projectsClient.default(this);
  this.users = new _usersClient.default(this);
  this.auth = new _authClient.default(this);
  if (this.clientConfig.isPromiseAPI) {
    var observableConfig = _extends({}, this.clientConfig, {
      isPromiseAPI: false
    });
    this.observable = new SanityClient(observableConfig);
  }
}
_extends(SanityClient.prototype, _dataMethods.default);
_extends(SanityClient.prototype, {
  clone: function clone() {
    return new SanityClient(this.config());
  },
  config: function config(newConfig) {
    if (typeof newConfig === 'undefined') {
      return _extends({}, this.clientConfig);
    }
    if (this.clientConfig && this.clientConfig.allowReconfigure === false) {
      throw new Error('Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client');
    }
    if (this.observable) {
      var observableConfig = _extends({}, newConfig, {
        isPromiseAPI: false
      });
      this.observable.config(observableConfig);
    }
    this.clientConfig = (0, _config.initConfig)(newConfig, this.clientConfig || {});
    return this;
  },
  withConfig: function withConfig(newConfig) {
    return new SanityClient(_objectSpread(_objectSpread({}, this.config()), newConfig));
  },
  getUrl: function getUrl(uri) {
    var useCdn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var base = useCdn ? this.clientConfig.cdnUrl : this.clientConfig.url;
    return "".concat(base, "/").concat(uri.replace(/^\//, ''));
  },
  isPromiseAPI: function isPromiseAPI() {
    return this.clientConfig.isPromiseAPI;
  },
  _requestObservable: function _requestObservable(options) {
    var _this = this;
    var uri = options.url || options.uri;

    // If the `canUseCdn`-option is not set we detect it automatically based on the method + URL.
    // Only the /data endpoint is currently available through API-CDN.
    var canUseCdn = typeof options.canUseCdn === 'undefined' ? ['GET', 'HEAD'].indexOf(options.method || 'GET') >= 0 && uri.indexOf('/data/') === 0 : options.canUseCdn;
    var useCdn = this.clientConfig.useCdn && canUseCdn;
    var tag = options.tag && this.clientConfig.requestTagPrefix ? [this.clientConfig.requestTagPrefix, options.tag].join('.') : options.tag || this.clientConfig.requestTagPrefix;
    if (tag) {
      options.query = _objectSpread({
        tag: validate.requestTag(tag)
      }, options.query);
    }
    var reqOptions = (0, _requestOptions.default)(this.clientConfig, _extends({}, options, {
      url: this.getUrl(uri, useCdn)
    }));
    return new _rxjs.Observable(function (subscriber) {
      return (0, _request.default)(reqOptions, _this.clientConfig.requester).subscribe(subscriber);
    });
  },
  request: function request(options) {
    var observable = this._requestObservable(options).pipe((0, _operators.filter)(function (event) {
      return event.type === 'response';
    }), (0, _operators.map)(function (event) {
      return event.body;
    }));
    return this.isPromiseAPI() ? (0, _rxjs.lastValueFrom)(observable) : observable;
  }
});
SanityClient.Patch = _patch.default;
SanityClient.Transaction = _transaction.default;
SanityClient.ClientError = _request.default.ClientError;
SanityClient.ServerError = _request.default.ServerError;
SanityClient.requester = _request.default.defaultRequester;
var _default = SanityClient;
exports.default = _default;
module.exports = exports.default;