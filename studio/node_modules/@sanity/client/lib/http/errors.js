"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClientError = ClientError;
exports.ServerError = ServerError;
var _makeError = _interopRequireDefault(require("make-error"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ClientError(res) {
  var props = extractErrorProps(res);
  ClientError.super.call(this, props.message);
  _extends(this, props);
}
function ServerError(res) {
  var props = extractErrorProps(res);
  ServerError.super.call(this, props.message);
  _extends(this, props);
}
function extractErrorProps(res) {
  var body = res.body;
  var props = {
    response: res,
    statusCode: res.statusCode,
    responseBody: stringifyBody(body, res)
  };

  // API/Boom style errors ({statusCode, error, message})
  if (body.error && body.message) {
    props.message = "".concat(body.error, " - ").concat(body.message);
    return props;
  }

  // Query/database errors ({error: {description, other, arb, props}})
  if (body.error && body.error.description) {
    props.message = body.error.description;
    props.details = body.error;
    return props;
  }

  // Other, more arbitrary errors
  props.message = body.error || body.message || httpErrorMessage(res);
  return props;
}
function httpErrorMessage(res) {
  var statusMessage = res.statusMessage ? " ".concat(res.statusMessage) : '';
  return "".concat(res.method, "-request to ").concat(res.url, " resulted in HTTP ").concat(res.statusCode).concat(statusMessage);
}
function stringifyBody(body, res) {
  var contentType = (res.headers['content-type'] || '').toLowerCase();
  var isJson = contentType.indexOf('application/json') !== -1;
  return isJson ? JSON.stringify(body, null, 2) : body;
}
(0, _makeError.default)(ClientError);
(0, _makeError.default)(ServerError);