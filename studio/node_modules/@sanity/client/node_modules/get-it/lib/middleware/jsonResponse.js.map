{"version":3,"file":"jsonResponse.js","names":["opts","onResponse","response","contentType","headers","shouldDecode","force","indexOf","body","tryParse","processOptions","options","Accept","JSON","parse","err","message"],"sources":["../../src/middleware/jsonResponse.js"],"sourcesContent":["export default opts => ({\n  onResponse: response => {\n    const contentType = response.headers['content-type'] || ''\n    const shouldDecode = (opts && opts.force) || contentType.indexOf('application/json') !== -1\n    if (!response.body || !contentType || !shouldDecode) {\n      return response\n    }\n\n    return Object.assign({}, response, {body: tryParse(response.body)})\n  },\n\n  processOptions: options =>\n    Object.assign({}, options, {\n      headers: Object.assign({Accept: 'application/json'}, options.headers)\n    })\n})\n\nfunction tryParse(body) {\n  try {\n    return JSON.parse(body)\n  } catch (err) {\n    err.message = `Failed to parsed response body as JSON: ${err.message}`\n    throw err\n  }\n}\n"],"mappings":";;;;;;;;;eAAe,kBAAAA,IAAI;EAAA,OAAK;IACtBC,UAAU,EAAE,oBAAAC,QAAQ,EAAI;MACtB,IAAMC,WAAW,GAAGD,QAAQ,CAACE,OAAT,CAAiB,cAAjB,KAAoC,EAAxD;MACA,IAAMC,YAAY,GAAIL,IAAI,IAAIA,IAAI,CAACM,KAAd,IAAwBH,WAAW,CAACI,OAAZ,CAAoB,kBAApB,MAA4C,CAAC,CAA1F;;MACA,IAAI,CAACL,QAAQ,CAACM,IAAV,IAAkB,CAACL,WAAnB,IAAkC,CAACE,YAAvC,EAAqD;QACnD,OAAOH,QAAP;MACD;;MAED,OAAO,SAAc,EAAd,EAAkBA,QAAlB,EAA4B;QAACM,IAAI,EAAEC,QAAQ,CAACP,QAAQ,CAACM,IAAV;MAAf,CAA5B,CAAP;IACD,CATqB;IAWtBE,cAAc,EAAE,wBAAAC,OAAO;MAAA,OACrB,SAAc,EAAd,EAAkBA,OAAlB,EAA2B;QACzBP,OAAO,EAAE,SAAc;UAACQ,MAAM,EAAE;QAAT,CAAd,EAA4CD,OAAO,CAACP,OAApD;MADgB,CAA3B,CADqB;IAAA;EAXD,CAAL;AAAA,C;;;;AAiBnB,SAASK,QAAT,CAAkBD,IAAlB,EAAwB;EACtB,IAAI;IACF,OAAOK,IAAI,CAACC,KAAL,CAAWN,IAAX,CAAP;EACD,CAFD,CAEE,OAAOO,GAAP,EAAY;IACZA,GAAG,CAACC,OAAJ,qDAAyDD,GAAG,CAACC,OAA7D;IACA,MAAMD,GAAN;EACD;AACF"}