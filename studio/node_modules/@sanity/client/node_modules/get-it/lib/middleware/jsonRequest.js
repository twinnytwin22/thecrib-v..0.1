"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isPlainObject = require("is-plain-object");

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var serializeTypes = ['boolean', 'string', 'number'];

var isBuffer = function isBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
};

var _default = function _default() {
  return {
    processOptions: function processOptions(options) {
      var body = options.body;

      if (!body) {
        return options;
      }

      var isStream = typeof body.pipe === 'function';
      var shouldSerialize = !isStream && !isBuffer(body) && (serializeTypes.indexOf(_typeof(body)) !== -1 || Array.isArray(body) || (0, _isPlainObject.isPlainObject)(body));

      if (!shouldSerialize) {
        return options;
      }

      return _extends({}, options, {
        body: JSON.stringify(options.body),
        headers: _extends({}, options.headers, {
          'Content-Type': 'application/json'
        })
      });
    }
  };
};

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=jsonRequest.js.map