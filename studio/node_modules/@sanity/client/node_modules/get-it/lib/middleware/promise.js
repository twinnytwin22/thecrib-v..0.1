"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Cancel = _interopRequireDefault(require("./cancel/Cancel"));

var _CancelToken = _interopRequireDefault(require("./cancel/CancelToken"));

var _isCancel = _interopRequireDefault(require("./cancel/isCancel"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var globalPromise = typeof Promise === 'function' && Promise;

var promise = function promise() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var Promise = options.implementation || globalPromise;

  if (!Promise) {
    throw new Error('`Promise` is not available in global scope, and no implementation was passed');
  }

  return {
    onReturn: function onReturn(channels, context) {
      return new Promise(function (resolve, reject) {
        var cancel = context.options.cancelToken;

        if (cancel) {
          cancel.promise.then(function (reason) {
            channels.abort.publish(reason);
            reject(reason);
          });
        }

        channels.error.subscribe(reject);
        channels.response.subscribe(function (response) {
          resolve(options.onlyBody ? response.body : response);
        }); // Wait until next tick in case cancel has been performed

        setTimeout(function () {
          try {
            channels.request.publish(context);
          } catch (err) {
            reject(err);
          }
        }, 0);
      });
    }
  };
};

promise.Cancel = _Cancel.default;
promise.CancelToken = _CancelToken.default;
promise.isCancel = _isCancel.default;
var _default = promise;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=promise.js.map