{"version":3,"file":"injectResponse.js","names":["opts","inject","Error","prevValue","event","response","options","context","body","url","method","headers","statusCode","statusMessage","interceptRequest"],"sources":["../../src/middleware/injectResponse.js"],"sourcesContent":["export default (opts = {}) => {\n  if (typeof opts.inject !== 'function') {\n    throw new Error('`injectResponse` middleware requires a `inject` function')\n  }\n\n  function inject(prevValue, event) {\n    const response = opts.inject(event, prevValue)\n    if (!response) {\n      return prevValue\n    }\n\n    // Merge defaults so we don't have to provide the most basic of details unless we want to\n    const options = event.context.options\n    return Object.assign(\n      {},\n      {\n        body: '',\n        url: options.url,\n        method: options.method,\n        headers: {},\n        statusCode: 200,\n        statusMessage: 'OK'\n      },\n      response\n    )\n  }\n\n  return {interceptRequest: inject}\n}\n"],"mappings":";;;;;;;;;eAAe,oBAAe;EAAA,IAAdA,IAAc,uEAAP,EAAO;;EAC5B,IAAI,OAAOA,IAAI,CAACC,MAAZ,KAAuB,UAA3B,EAAuC;IACrC,MAAM,IAAIC,KAAJ,CAAU,0DAAV,CAAN;EACD;;EAED,SAASD,MAAT,CAAgBE,SAAhB,EAA2BC,KAA3B,EAAkC;IAChC,IAAMC,QAAQ,GAAGL,IAAI,CAACC,MAAL,CAAYG,KAAZ,EAAmBD,SAAnB,CAAjB;;IACA,IAAI,CAACE,QAAL,EAAe;MACb,OAAOF,SAAP;IACD,CAJ+B,CAMhC;;;IACA,IAAMG,OAAO,GAAGF,KAAK,CAACG,OAAN,CAAcD,OAA9B;IACA,OAAO,SACL,EADK,EAEL;MACEE,IAAI,EAAE,EADR;MAEEC,GAAG,EAAEH,OAAO,CAACG,GAFf;MAGEC,MAAM,EAAEJ,OAAO,CAACI,MAHlB;MAIEC,OAAO,EAAE,EAJX;MAKEC,UAAU,EAAE,GALd;MAMEC,aAAa,EAAE;IANjB,CAFK,EAULR,QAVK,CAAP;EAYD;;EAED,OAAO;IAACS,gBAAgB,EAAEb;EAAnB,CAAP;AACD,C"}