{"version":3,"file":"jsonResponse.js","names":["opts","onResponse","response","contentType","headers","shouldDecode","force","indexOf","body","Object","assign","tryParse","processOptions","options","Accept","JSON","parse","err","message"],"sources":["../../src/middleware/jsonResponse.js"],"sourcesContent":["export default opts => ({\n  onResponse: response => {\n    const contentType = response.headers['content-type'] || ''\n    const shouldDecode = (opts && opts.force) || contentType.indexOf('application/json') !== -1\n    if (!response.body || !contentType || !shouldDecode) {\n      return response\n    }\n\n    return Object.assign({}, response, {body: tryParse(response.body)})\n  },\n\n  processOptions: options =>\n    Object.assign({}, options, {\n      headers: Object.assign({Accept: 'application/json'}, options.headers)\n    })\n})\n\nfunction tryParse(body) {\n  try {\n    return JSON.parse(body)\n  } catch (err) {\n    err.message = `Failed to parsed response body as JSON: ${err.message}`\n    throw err\n  }\n}\n"],"mappings":";;;;;;;eAAeA,IAAI,KAAK;EACtBC,UAAU,EAAEC,QAAQ,IAAI;IACtB,MAAMC,WAAW,GAAGD,QAAQ,CAACE,OAAT,CAAiB,cAAjB,KAAoC,EAAxD;IACA,MAAMC,YAAY,GAAIL,IAAI,IAAIA,IAAI,CAACM,KAAd,IAAwBH,WAAW,CAACI,OAAZ,CAAoB,kBAApB,MAA4C,CAAC,CAA1F;;IACA,IAAI,CAACL,QAAQ,CAACM,IAAV,IAAkB,CAACL,WAAnB,IAAkC,CAACE,YAAvC,EAAqD;MACnD,OAAOH,QAAP;IACD;;IAED,OAAOO,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,QAAlB,EAA4B;MAACM,IAAI,EAAEG,QAAQ,CAACT,QAAQ,CAACM,IAAV;IAAf,CAA5B,CAAP;EACD,CATqB;EAWtBI,cAAc,EAAEC,OAAO,IACrBJ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBG,OAAlB,EAA2B;IACzBT,OAAO,EAAEK,MAAM,CAACC,MAAP,CAAc;MAACI,MAAM,EAAE;IAAT,CAAd,EAA4CD,OAAO,CAACT,OAApD;EADgB,CAA3B;AAZoB,CAAL,C;;;;AAiBnB,SAASO,QAAT,CAAkBH,IAAlB,EAAwB;EACtB,IAAI;IACF,OAAOO,IAAI,CAACC,KAAL,CAAWR,IAAX,CAAP;EACD,CAFD,CAEE,OAAOS,GAAP,EAAY;IACZA,GAAG,CAACC,OAAJ,GAAe,2CAA0CD,GAAG,CAACC,OAAQ,EAArE;IACA,MAAMD,GAAN;EACD;AACF"}