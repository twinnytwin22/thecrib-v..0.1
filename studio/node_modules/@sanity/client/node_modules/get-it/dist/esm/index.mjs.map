{
  "version": 3,
  "sources": ["../../node_modules/same-origin/url-parser.js", "../../node_modules/same-origin/index.js", "../../node_modules/parse-headers/parse-headers.js", "../../node_modules/nano-pubsub/dist/esm/index.js", "../../src/util/middlewareReducer.js", "../../src/request/browser-request.js", "../../src/request/browser/fetchXhr.js", "../../src/request/index.js", "../../src/index.js"],
  "sourcesContent": ["/**\n * This file is only used for the browser version of `same-origin`.\n * Used to bring down the size of the browser bundle.\n */\n'use strict';\n\nvar regex = /^(?:(?:(?:([^:\\/#\\?]+:)?(?:(?:\\/\\/)((?:((?:[^:@\\/#\\?]+)(?:\\:(?:[^:@\\/#\\?]+))?)@)?(([^:\\/#\\?\\]\\[]+|\\[[^\\/\\]@#?]+\\])(?:\\:([0-9]+))?))?)?)?((?:\\/?(?:[^\\/\\?#]+\\/+)*)(?:[^\\?#]*)))?(\\?[^#]+)?)(#.*)?/;\n\nmodule.exports = {\n    regex: regex,\n    parse: function(url) {\n        var match = regex.exec(url);\n        if (!match) {\n            return {};\n        }\n\n        return {\n            protocol: (match[1] || '').toLowerCase() || undefined,\n            hostname: (match[5] || '').toLowerCase() || undefined,\n            port: match[6] || undefined\n        };\n    }\n};", "'use strict';\n\nvar url = require('url');\n\nmodule.exports = function(uri1, uri2, ieMode) {\n    if (uri1 === uri2) {\n        return true;\n    }\n\n    var url1 = url.parse(uri1, false, true);\n    var url2 = url.parse(uri2, false, true);\n\n    var url1Port = url1.port|0 || (url1.protocol === 'https' ? 443 : 80);\n    var url2Port = url2.port|0 || (url2.protocol === 'https' ? 443 : 80);\n\n    var match = {\n        proto: url1.protocol === url2.protocol,\n        hostname: url1.hostname === url2.hostname,\n        port: url1Port === url2Port\n    };\n\n    return ((match.proto && match.hostname) && (match.port || ieMode));\n};", "var trim = function(string) {\n  return string.replace(/^\\s+|\\s+$/g, '');\n}\n  , isArray = function(arg) {\n      return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n\nmodule.exports = function (headers) {\n  if (!headers)\n    return {}\n\n  var result = {}\n\n  var headersArr = trim(headers).split('\\n')\n\n  for (var i = 0; i < headersArr.length; i++) {\n    var row = headersArr[i]\n    var index = row.indexOf(':')\n    , key = trim(row.slice(0, index)).toLowerCase()\n    , value = trim(row.slice(index + 1))\n\n    if (typeof(result[key]) === 'undefined') {\n      result[key] = value\n    } else if (isArray(result[key])) {\n      result[key].push(value)\n    } else {\n      result[key] = [ result[key], value ]\n    }\n  }\n\n  return result\n}\n", "export default function createPubSub() {\n    var subscribers = Object.create(null);\n    var nextId = 0;\n    function subscribe(subscriber) {\n        var id = nextId++;\n        subscribers[id] = subscriber;\n        return function unsubscribe() {\n            delete subscribers[id];\n        };\n    }\n    function publish(event) {\n        for (var id in subscribers) {\n            subscribers[id](event);\n        }\n    }\n    return {\n        publish: publish,\n        subscribe: subscribe,\n    };\n}\n", "export default middleware => {\n  const applyMiddleware = (hook, defaultValue, ...args) => {\n    const bailEarly = hook === 'onError'\n\n    let value = defaultValue\n    for (let i = 0; i < middleware[hook].length; i++) {\n      const handler = middleware[hook][i]\n      value = handler(value, ...args)\n\n      if (bailEarly && !value) {\n        break\n      }\n    }\n\n    return value\n  }\n\n  return applyMiddleware\n}\n", "/* eslint max-depth: [\"error\", 4] */\nimport sameOrigin from 'same-origin'\nimport parseHeaders from 'parse-headers'\nimport FetchXhr from './browser/fetchXhr'\n\nconst noop = function() {\n  /* intentional noop */\n}\n\nconst win = typeof document === 'undefined' || typeof window === 'undefined' ? undefined : window\nconst adapter = win ? 'xhr' : 'fetch'\n\nlet XmlHttpRequest = typeof XMLHttpRequest === 'function' ? XMLHttpRequest : noop\nconst hasXhr2 = 'withCredentials' in new XmlHttpRequest()\n// eslint-disable-next-line no-undef\nconst XDR = typeof XDomainRequest === 'undefined' ? undefined : XDomainRequest\nlet CrossDomainRequest = hasXhr2 ? XmlHttpRequest : XDR\n\n// Fallback to fetch-based XHR polyfill for non-browser environments like Workers\nif (!win) {\n  XmlHttpRequest = FetchXhr\n  CrossDomainRequest = FetchXhr\n}\n\nexport default (context, callback) => {\n  const opts = context.options\n  const options = context.applyMiddleware('finalizeOptions', opts)\n  const timers = {}\n\n  // Deep-checking window.location because of react native, where `location` doesn't exist\n  const cors = win && win.location && !sameOrigin(win.location.href, options.url)\n\n  // Allow middleware to inject a response, for instance in the case of caching or mocking\n  const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n    adapter,\n    context\n  })\n\n  // If middleware injected a response, treat it as we normally would and return it\n  // Do note that the injected response has to be reduced to a cross-environment friendly response\n  if (injectedResponse) {\n    const cbTimer = setTimeout(callback, 0, null, injectedResponse)\n    const cancel = () => clearTimeout(cbTimer)\n    return {abort: cancel}\n  }\n\n  // We'll want to null out the request on success/failure\n  let xhr = cors ? new CrossDomainRequest() : new XmlHttpRequest()\n\n  const isXdr = win && win.XDomainRequest && xhr instanceof win.XDomainRequest\n  const headers = options.headers\n  const delays = options.timeout\n\n  // Request state\n  let aborted = false\n  let loaded = false\n  let timedOut = false\n\n  // Apply event handlers\n  xhr.onerror = onError\n  xhr.ontimeout = onError\n  xhr.onabort = () => {\n    stopTimers(true)\n    aborted = true\n  }\n\n  // IE9 must have onprogress be set to a unique function\n  xhr.onprogress = () => {\n    /* intentional noop */\n  }\n\n  const loadEvent = isXdr ? 'onload' : 'onreadystatechange'\n  xhr[loadEvent] = () => {\n    // Prevent request from timing out\n    resetTimers()\n\n    if (aborted || (xhr.readyState !== 4 && !isXdr)) {\n      return\n    }\n\n    // Will be handled by onError\n    if (xhr.status === 0) {\n      return\n    }\n\n    onLoad()\n  }\n\n  // @todo two last options to open() is username/password\n  xhr.open(\n    options.method,\n    options.url,\n    true // Always async\n  )\n\n  // Some options need to be applied after open\n  xhr.withCredentials = !!options.withCredentials\n\n  // Set headers\n  if (headers && xhr.setRequestHeader) {\n    for (const key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key])\n      }\n    }\n  } else if (headers && isXdr) {\n    throw new Error('Headers cannot be set on an XDomainRequest object')\n  }\n\n  if (options.rawBody) {\n    xhr.responseType = 'arraybuffer'\n  }\n\n  // Let middleware know we're about to do a request\n  context.applyMiddleware('onRequest', {options, adapter, request: xhr, context})\n\n  xhr.send(options.body || null)\n\n  // Figure out which timeouts to use (if any)\n  if (delays) {\n    timers.connect = setTimeout(() => timeoutRequest('ETIMEDOUT'), delays.connect)\n  }\n\n  return {abort}\n\n  function abort() {\n    aborted = true\n\n    if (xhr) {\n      xhr.abort()\n    }\n  }\n\n  function timeoutRequest(code) {\n    timedOut = true\n    xhr.abort()\n    const error = new Error(\n      code === 'ESOCKETTIMEDOUT'\n        ? `Socket timed out on request to ${options.url}`\n        : `Connection timed out on request to ${options.url}`\n    )\n    error.code = code\n    context.channels.error.publish(error)\n  }\n\n  function resetTimers() {\n    if (!delays) {\n      return\n    }\n\n    stopTimers()\n    timers.socket = setTimeout(() => timeoutRequest('ESOCKETTIMEDOUT'), delays.socket)\n  }\n\n  function stopTimers(force) {\n    // Only clear the connect timeout if we've got a connection\n    if (force || aborted || (xhr.readyState >= 2 && timers.connect)) {\n      clearTimeout(timers.connect)\n    }\n\n    if (timers.socket) {\n      clearTimeout(timers.socket)\n    }\n  }\n\n  function onError(error) {\n    if (loaded) {\n      return\n    }\n\n    // Clean up\n    stopTimers(true)\n    loaded = true\n    xhr = null\n\n    // Annoyingly, details are extremely scarce and hidden from us.\n    // We only really know that it is a network error\n    const err = error || new Error(`Network error while attempting to reach ${options.url}`)\n    err.isNetworkError = true\n    err.request = options\n    callback(err)\n  }\n\n  function reduceResponse() {\n    let statusCode = xhr.status\n    let statusMessage = xhr.statusText\n\n    if (isXdr && statusCode === undefined) {\n      // IE8 CORS GET successful response doesn't have a status field, but body is fine\n      statusCode = 200\n    } else if (statusCode > 12000 && statusCode < 12156) {\n      // Yet another IE quirk where it emits weird status codes on network errors\n      // https://support.microsoft.com/en-us/kb/193625\n      return onError()\n    } else {\n      // Another IE bug where HTTP 204 somehow ends up as 1223\n      statusCode = xhr.status === 1223 ? 204 : xhr.status\n      statusMessage = xhr.status === 1223 ? 'No Content' : statusMessage\n    }\n\n    return {\n      body: xhr.response || xhr.responseText,\n      url: options.url,\n      method: options.method,\n      headers: isXdr ? {} : parseHeaders(xhr.getAllResponseHeaders()),\n      statusCode: statusCode,\n      statusMessage: statusMessage\n    }\n  }\n\n  function onLoad() {\n    if (aborted || loaded || timedOut) {\n      return\n    }\n\n    if (xhr.status === 0) {\n      onError(new Error('Unknown XHR error'))\n      return\n    }\n\n    // Prevent being called twice\n    stopTimers()\n    loaded = true\n    callback(null, reduceResponse())\n  }\n}\n", "/**\n * Mimicks the XMLHttpRequest API with only the parts needed for get-it's XHR adapter\n */\nfunction FetchXhr() {\n  this.readyState = 0 // Unsent\n}\nFetchXhr.prototype.open = function(method, url) {\n  this._method = method\n  this._url = url\n  this._resHeaders = ''\n  this.readyState = 1 // Open\n  this.onreadystatechange()\n}\nFetchXhr.prototype.abort = function() {\n  if (this._controller) {\n    this._controller.abort()\n  }\n}\nFetchXhr.prototype.getAllResponseHeaders = function() {\n  return this._resHeaders\n}\nFetchXhr.prototype.setRequestHeader = function(key, value) {\n  this._headers = this._headers || {}\n  this._headers[key] = value\n}\nFetchXhr.prototype.send = function(body) {\n  // eslint-disable-next-line no-multi-assign\n  const ctrl = (this._controller = typeof AbortController === 'function' && new AbortController())\n  const textBody = this.responseType !== 'arraybuffer'\n  const options = {\n    method: this._method,\n    headers: this._headers,\n    signal: (ctrl && ctrl.signal) || undefined,\n    body\n  }\n\n  // Some environments (like CloudFlare workers) don't support credentials in\n  // RequestInitDict, and there doesn't seem to be any easy way to check for it,\n  // so for now let's just make do with a window check :/\n  if (typeof document !== 'undefined') {\n    options.credentials = this.withCredentials ? 'include' : 'omit'\n  }\n\n  fetch(this._url, options)\n    .then(res => {\n      res.headers.forEach((value, key) => {\n        this._resHeaders += `${key}: ${value}\\r\\n`\n      })\n      this.status = res.status\n      this.statusText = res.statusText\n      this.readyState = 3 // Loading\n      return textBody ? res.text() : res.arrayBuffer()\n    })\n    .then(resBody => {\n      if (textBody) {\n        this.responseText = resBody\n      } else {\n        this.response = resBody\n      }\n      this.readyState = 4 // Done\n      this.onreadystatechange()\n    })\n    .catch(err => {\n      if (err.name === 'AbortError') {\n        this.onabort()\n        return\n      }\n\n      this.onerror(err)\n    })\n}\n\nexport default FetchXhr\n", "import request from './node-request'\n\nexport default request\n", "import _pubsub from 'nano-pubsub'\nimport middlewareReducer from './util/middlewareReducer'\nimport processOptions from './middleware/defaultOptionsProcessor'\nimport validateOptions from './middleware/defaultOptionsValidator'\nimport httpRequester from './request' // node-request in node, browser-request in browsers\n\n// Workaround default export weirdness\nconst pubsub = 'default' in _pubsub ? _pubsub.default : _pubsub\n\nconst channelNames = ['request', 'response', 'progress', 'error', 'abort']\nconst middlehooks = [\n  'processOptions',\n  'validateOptions',\n  'interceptRequest',\n  'finalizeOptions',\n  'onRequest',\n  'onResponse',\n  'onError',\n  'onReturn',\n  'onHeaders'\n]\n\nexport default function createRequester(initMiddleware = [], httpRequest = httpRequester) {\n  const loadedMiddleware = []\n  const middleware = middlehooks.reduce(\n    (ware, name) => {\n      ware[name] = ware[name] || []\n      return ware\n    },\n    {\n      processOptions: [processOptions],\n      validateOptions: [validateOptions]\n    }\n  )\n\n  function request(opts) {\n    const channels = channelNames.reduce((target, name) => {\n      target[name] = pubsub()\n      return target\n    }, {})\n\n    // Prepare a middleware reducer that can be reused throughout the lifecycle\n    const applyMiddleware = middlewareReducer(middleware)\n\n    // Parse the passed options\n    const options = applyMiddleware('processOptions', opts)\n\n    // Validate the options\n    applyMiddleware('validateOptions', options)\n\n    // Build a context object we can pass to child handlers\n    const context = {options, channels, applyMiddleware}\n\n    // We need to hold a reference to the current, ongoing request,\n    // in order to allow cancellation. In the case of the retry middleware,\n    // a new request might be triggered\n    let ongoingRequest = null\n    const unsubscribe = channels.request.subscribe(ctx => {\n      // Let request adapters (node/browser) perform the actual request\n      ongoingRequest = httpRequest(ctx, (err, res) => onResponse(err, res, ctx))\n    })\n\n    // If we abort the request, prevent further requests from happening,\n    // and be sure to cancel any ongoing request (obviously)\n    channels.abort.subscribe(() => {\n      unsubscribe()\n      if (ongoingRequest) {\n        ongoingRequest.abort()\n      }\n    })\n\n    // See if any middleware wants to modify the return value - for instance\n    // the promise or observable middlewares\n    const returnValue = applyMiddleware('onReturn', channels, context)\n\n    // If return value has been modified by a middleware, we expect the middleware\n    // to publish on the 'request' channel. If it hasn't been modified, we want to\n    // trigger it right away\n    if (returnValue === channels) {\n      channels.request.publish(context)\n    }\n\n    return returnValue\n\n    function onResponse(reqErr, res, ctx) {\n      let error = reqErr\n      let response = res\n\n      // We're processing non-errors first, in case a middleware converts the\n      // response into an error (for instance, status >= 400 == HttpError)\n      if (!error) {\n        try {\n          response = applyMiddleware('onResponse', res, ctx)\n        } catch (err) {\n          response = null\n          error = err\n        }\n      }\n\n      // Apply error middleware - if middleware return the same (or a different) error,\n      // publish as an error event. If we *don't* return an error, assume it has been handled\n      error = error && applyMiddleware('onError', error, ctx)\n\n      // Figure out if we should publish on error/response channels\n      if (error) {\n        channels.error.publish(error)\n      } else if (response) {\n        channels.response.publish(response)\n      }\n    }\n  }\n\n  request.use = function use(newMiddleware) {\n    if (!newMiddleware) {\n      throw new Error('Tried to add middleware that resolved to falsey value')\n    }\n\n    if (typeof newMiddleware === 'function') {\n      throw new Error(\n        'Tried to add middleware that was a function. It probably expects you to pass options to it.'\n      )\n    }\n\n    if (newMiddleware.onReturn && middleware.onReturn.length > 0) {\n      throw new Error(\n        'Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event'\n      )\n    }\n\n    middlehooks.forEach(key => {\n      if (newMiddleware[key]) {\n        middleware[key].push(newMiddleware[key])\n      }\n    })\n\n    loadedMiddleware.push(newMiddleware)\n    return request\n  }\n\n  request.clone = function clone() {\n    return createRequester(loadedMiddleware)\n  }\n\n  initMiddleware.forEach(request.use)\n\n  return request\n}\n"],
  "mappings": "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",
  "names": ["sameOrigin", "parseHeaders"]
}
