import {
  __commonJS,
  __toESM
} from "./chunk-U7HSCTZN.mjs";

// node_modules/capture-stack-trace/index.js
var require_capture_stack_trace = __commonJS({
  "node_modules/capture-stack-trace/index.js"(exports, module) {
    "use strict";
    module.exports = Error.captureStackTrace || function(error) {
      var container = new Error();
      Object.defineProperty(error, "stack", {
        configurable: true,
        get: function getStack() {
          var stack = container.stack;
          Object.defineProperty(this, "stack", {
            value: stack
          });
          return stack;
        }
      });
    };
  }
});

// node_modules/create-error-class/index.js
var require_create_error_class = __commonJS({
  "node_modules/create-error-class/index.js"(exports, module) {
    "use strict";
    var captureStackTrace = require_capture_stack_trace();
    function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    }
    module.exports = function createErrorClass2(className, setup) {
      if (typeof className !== "string") {
        throw new TypeError("Expected className to be a string");
      }
      if (/[^0-9a-zA-Z_$]/.test(className)) {
        throw new Error("className contains invalid characters");
      }
      setup = setup || function(message) {
        this.message = message;
      };
      var ErrorClass = function() {
        Object.defineProperty(this, "name", {
          configurable: true,
          value: className,
          writable: true
        });
        captureStackTrace(this, this.constructor);
        setup.apply(this, arguments);
      };
      inherits(ErrorClass, Error);
      return ErrorClass;
    };
  }
});

// src/middleware/httpErrors.js
var import_create_error_class = __toESM(require_create_error_class());
var HttpError = (0, import_create_error_class.default)("HttpError", function(res, ctx) {
  const truncatedUrl = res.url.length > 400 ? `${res.url.slice(0, 399)}\u2026` : res.url;
  let msg = `${res.method}-request to ${truncatedUrl} resulted in `;
  msg += `HTTP ${res.statusCode} ${res.statusMessage}`;
  this.message = msg.trim();
  this.response = res;
  this.request = ctx.options;
});
var httpErrors_default = () => ({
  onResponse: (res, ctx) => {
    const isHttpError = res.statusCode >= 400;
    if (!isHttpError) {
      return res;
    }
    throw new HttpError(res, ctx);
  }
});

export {
  httpErrors_default
};
//# sourceMappingURL=chunk-J32M4HX3.mjs.map
