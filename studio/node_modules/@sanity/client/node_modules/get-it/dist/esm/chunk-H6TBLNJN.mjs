// src/util/browser-shouldRetry.js
var browser_shouldRetry_default = (err, attempt, options) => {
  if (options.method !== "GET" && options.method !== "HEAD") {
    return false;
  }
  return err.isNetworkError || false;
};

// src/middleware/retry.js
var isStream = (stream) => stream !== null && typeof stream === "object" && typeof stream.pipe === "function";
var retry = (opts = {}) => {
  const maxRetries = opts.maxRetries || 5;
  const retryDelay = opts.retryDelay || getRetryDelay;
  const allowRetry = opts.shouldRetry || browser_shouldRetry_default;
  return {
    onError: (err, context) => {
      const options = context.options;
      const max = options.maxRetries || maxRetries;
      const shouldRetry = options.shouldRetry || allowRetry;
      const attemptNumber = options.attemptNumber || 0;
      if (isStream(options.body)) {
        return err;
      }
      if (!shouldRetry(err, attemptNumber, options) || attemptNumber >= max) {
        return err;
      }
      const newContext = Object.assign({}, context, {
        options: Object.assign({}, options, { attemptNumber: attemptNumber + 1 })
      });
      setTimeout(() => context.channels.request.publish(newContext), retryDelay(attemptNumber));
      return null;
    }
  };
};
retry.shouldRetry = browser_shouldRetry_default;
var retry_default = retry;
function getRetryDelay(attemptNum) {
  return 100 * Math.pow(2, attemptNum) + Math.random() * 100;
}

export {
  retry_default
};
//# sourceMappingURL=chunk-H6TBLNJN.mjs.map
