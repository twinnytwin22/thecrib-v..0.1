// src/util/global.js
var actualGlobal;
if (typeof globalThis !== "undefined") {
  actualGlobal = globalThis;
} else if (typeof window !== "undefined") {
  actualGlobal = window;
} else if (typeof global !== "undefined") {
  actualGlobal = global;
} else if (typeof self !== "undefined") {
  actualGlobal = self;
} else {
  actualGlobal = {};
}
var global_default = actualGlobal;

// src/middleware/observable.js
var observable_default = (opts = {}) => {
  const Observable = opts.implementation || global_default.Observable;
  if (!Observable) {
    throw new Error(
      "`Observable` is not available in global scope, and no implementation was passed"
    );
  }
  return {
    onReturn: (channels, context) => new Observable((observer) => {
      channels.error.subscribe((err) => observer.error(err));
      channels.progress.subscribe(
        (event) => observer.next(Object.assign({ type: "progress" }, event))
      );
      channels.response.subscribe((response) => {
        observer.next(Object.assign({ type: "response" }, response));
        observer.complete();
      });
      channels.request.publish(context);
      return () => channels.abort.publish();
    })
  };
};

export {
  observable_default
};
//# sourceMappingURL=chunk-PSB45ADE.mjs.map
