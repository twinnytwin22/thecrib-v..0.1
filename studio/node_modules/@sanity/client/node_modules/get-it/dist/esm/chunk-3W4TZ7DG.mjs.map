{
  "version": 3,
  "sources": ["../../src/middleware/jsonResponse.js"],
  "sourcesContent": ["export default opts => ({\n  onResponse: response => {\n    const contentType = response.headers['content-type'] || ''\n    const shouldDecode = (opts && opts.force) || contentType.indexOf('application/json') !== -1\n    if (!response.body || !contentType || !shouldDecode) {\n      return response\n    }\n\n    return Object.assign({}, response, {body: tryParse(response.body)})\n  },\n\n  processOptions: options =>\n    Object.assign({}, options, {\n      headers: Object.assign({Accept: 'application/json'}, options.headers)\n    })\n})\n\nfunction tryParse(body) {\n  try {\n    return JSON.parse(body)\n  } catch (err) {\n    err.message = `Failed to parsed response body as JSON: ${err.message}`\n    throw err\n  }\n}\n"],
  "mappings": ";AAAA,IAAO,uBAAQ,WAAS;AAAA,EACtB,YAAY,cAAY;AACtB,UAAM,cAAc,SAAS,QAAQ,mBAAmB;AACxD,UAAM,eAAgB,QAAQ,KAAK,SAAU,YAAY,QAAQ,kBAAkB,MAAM;AACzF,QAAI,CAAC,SAAS,QAAQ,CAAC,eAAe,CAAC,cAAc;AACnD,aAAO;AAAA,IACT;AAEA,WAAO,OAAO,OAAO,CAAC,GAAG,UAAU,EAAC,MAAM,SAAS,SAAS,IAAI,EAAC,CAAC;AAAA,EACpE;AAAA,EAEA,gBAAgB,aACd,OAAO,OAAO,CAAC,GAAG,SAAS;AAAA,IACzB,SAAS,OAAO,OAAO,EAAC,QAAQ,mBAAkB,GAAG,QAAQ,OAAO;AAAA,EACtE,CAAC;AACL;AAEA,SAAS,SAAS,MAAM;AACtB,MAAI;AACF,WAAO,KAAK,MAAM,IAAI;AAAA,EACxB,SAAS,KAAP;AACA,QAAI,UAAU,2CAA2C,IAAI;AAC7D,UAAM;AAAA,EACR;AACF;",
  "names": []
}
