{
  "version": 3,
  "sources": ["../../node_modules/capture-stack-trace/index.js", "../../node_modules/create-error-class/index.js", "../../src/middleware/httpErrors.js"],
  "sourcesContent": ["'use strict';\n\nmodule.exports = Error.captureStackTrace || function (error) {\n\tvar container = new Error();\n\n\tObject.defineProperty(error, 'stack', {\n\t\tconfigurable: true,\n\t\tget: function getStack() {\n\t\t\tvar stack = container.stack;\n\n\t\t\tObject.defineProperty(this, 'stack', {\n\t\t\t\tvalue: stack\n\t\t\t});\n\n\t\t\treturn stack;\n\t\t}\n\t});\n};\n", "'use strict';\nvar captureStackTrace = require('capture-stack-trace');\n\nfunction inherits(ctor, superCtor) {\n\tctor.super_ = superCtor;\n\tctor.prototype = Object.create(superCtor.prototype, {\n\t\tconstructor: {\n\t\t\tvalue: ctor,\n\t\t\tenumerable: false,\n\t\t\twritable: true,\n\t\t\tconfigurable: true\n\t\t}\n\t});\n}\n\nmodule.exports = function createErrorClass(className, setup) {\n\tif (typeof className !== 'string') {\n\t\tthrow new TypeError('Expected className to be a string');\n\t}\n\n\tif (/[^0-9a-zA-Z_$]/.test(className)) {\n\t\tthrow new Error('className contains invalid characters');\n\t}\n\n\tsetup = setup || function (message) {\n\t\tthis.message = message;\n\t};\n\n\tvar ErrorClass = function () {\n\t\tObject.defineProperty(this, 'name', {\n\t\t\tconfigurable: true,\n\t\t\tvalue: className,\n\t\t\twritable: true\n\t\t});\n\n\t\tcaptureStackTrace(this, this.constructor);\n\n\t\tsetup.apply(this, arguments);\n\t};\n\n\tinherits(ErrorClass, Error);\n\n\treturn ErrorClass;\n};\n", "import createErrorClass from 'create-error-class'\n\nconst HttpError = createErrorClass('HttpError', function(res, ctx) {\n  const truncatedUrl = res.url.length > 400 ? `${res.url.slice(0, 399)}\u2026` : res.url\n  let msg = `${res.method}-request to ${truncatedUrl} resulted in `\n  msg += `HTTP ${res.statusCode} ${res.statusMessage}`\n\n  this.message = msg.trim()\n  this.response = res\n  this.request = ctx.options\n})\n\nexport default () => ({\n  onResponse: (res, ctx) => {\n    const isHttpError = res.statusCode >= 400\n    if (!isHttpError) {\n      return res\n    }\n\n    throw new HttpError(res, ctx)\n  }\n})\n"],
  "mappings": ";;;;;;AAAA;AAAA;AAAA;AAEA,WAAO,UAAU,MAAM,qBAAqB,SAAU,OAAO;AAC5D,UAAI,YAAY,IAAI,MAAM;AAE1B,aAAO,eAAe,OAAO,SAAS;AAAA,QACrC,cAAc;AAAA,QACd,KAAK,SAAS,WAAW;AACxB,cAAI,QAAQ,UAAU;AAEtB,iBAAO,eAAe,MAAM,SAAS;AAAA,YACpC,OAAO;AAAA,UACR,CAAC;AAED,iBAAO;AAAA,QACR;AAAA,MACD,CAAC;AAAA,IACF;AAAA;AAAA;;;ACjBA;AAAA;AAAA;AACA,QAAI,oBAAoB;AAExB,aAAS,SAAS,MAAM,WAAW;AAClC,WAAK,SAAS;AACd,WAAK,YAAY,OAAO,OAAO,UAAU,WAAW;AAAA,QACnD,aAAa;AAAA,UACZ,OAAO;AAAA,UACP,YAAY;AAAA,UACZ,UAAU;AAAA,UACV,cAAc;AAAA,QACf;AAAA,MACD,CAAC;AAAA,IACF;AAEA,WAAO,UAAU,SAASA,kBAAiB,WAAW,OAAO;AAC5D,UAAI,OAAO,cAAc,UAAU;AAClC,cAAM,IAAI,UAAU,mCAAmC;AAAA,MACxD;AAEA,UAAI,iBAAiB,KAAK,SAAS,GAAG;AACrC,cAAM,IAAI,MAAM,uCAAuC;AAAA,MACxD;AAEA,cAAQ,SAAS,SAAU,SAAS;AACnC,aAAK,UAAU;AAAA,MAChB;AAEA,UAAI,aAAa,WAAY;AAC5B,eAAO,eAAe,MAAM,QAAQ;AAAA,UACnC,cAAc;AAAA,UACd,OAAO;AAAA,UACP,UAAU;AAAA,QACX,CAAC;AAED,0BAAkB,MAAM,KAAK,WAAW;AAExC,cAAM,MAAM,MAAM,SAAS;AAAA,MAC5B;AAEA,eAAS,YAAY,KAAK;AAE1B,aAAO;AAAA,IACR;AAAA;AAAA;;;AC3CA,gCAA6B;AAE7B,IAAM,gBAAY,0BAAAC,SAAiB,aAAa,SAAS,KAAK,KAAK;AACjE,QAAM,eAAe,IAAI,IAAI,SAAS,MAAM,GAAG,IAAI,IAAI,MAAM,GAAG,GAAG,YAAO,IAAI;AAC9E,MAAI,MAAM,GAAG,IAAI,qBAAqB;AACtC,SAAO,QAAQ,IAAI,cAAc,IAAI;AAErC,OAAK,UAAU,IAAI,KAAK;AACxB,OAAK,WAAW;AAChB,OAAK,UAAU,IAAI;AACrB,CAAC;AAED,IAAO,qBAAQ,OAAO;AAAA,EACpB,YAAY,CAAC,KAAK,QAAQ;AACxB,UAAM,cAAc,IAAI,cAAc;AACtC,QAAI,CAAC,aAAa;AAChB,aAAO;AAAA,IACT;AAEA,UAAM,IAAI,UAAU,KAAK,GAAG;AAAA,EAC9B;AACF;",
  "names": ["createErrorClass", "createErrorClass"]
}
