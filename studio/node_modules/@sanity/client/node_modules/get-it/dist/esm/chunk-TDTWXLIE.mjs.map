{
  "version": 3,
  "sources": ["../../src/middleware/injectResponse.js"],
  "sourcesContent": ["export default (opts = {}) => {\n  if (typeof opts.inject !== 'function') {\n    throw new Error('`injectResponse` middleware requires a `inject` function')\n  }\n\n  function inject(prevValue, event) {\n    const response = opts.inject(event, prevValue)\n    if (!response) {\n      return prevValue\n    }\n\n    // Merge defaults so we don't have to provide the most basic of details unless we want to\n    const options = event.context.options\n    return Object.assign(\n      {},\n      {\n        body: '',\n        url: options.url,\n        method: options.method,\n        headers: {},\n        statusCode: 200,\n        statusMessage: 'OK'\n      },\n      response\n    )\n  }\n\n  return {interceptRequest: inject}\n}\n"],
  "mappings": ";AAAA,IAAO,yBAAQ,CAAC,OAAO,CAAC,MAAM;AAC5B,MAAI,OAAO,KAAK,WAAW,YAAY;AACrC,UAAM,IAAI,MAAM,0DAA0D;AAAA,EAC5E;AAEA,WAAS,OAAO,WAAW,OAAO;AAChC,UAAM,WAAW,KAAK,OAAO,OAAO,SAAS;AAC7C,QAAI,CAAC,UAAU;AACb,aAAO;AAAA,IACT;AAGA,UAAM,UAAU,MAAM,QAAQ;AAC9B,WAAO,OAAO;AAAA,MACZ,CAAC;AAAA,MACD;AAAA,QACE,MAAM;AAAA,QACN,KAAK,QAAQ;AAAA,QACb,QAAQ,QAAQ;AAAA,QAChB,SAAS,CAAC;AAAA,QACV,YAAY;AAAA,QACZ,eAAe;AAAA,MACjB;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAEA,SAAO,EAAC,kBAAkB,OAAM;AAClC;",
  "names": []
}
