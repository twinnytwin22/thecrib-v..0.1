import {
  isPlainObject
} from "./chunk-P7IHHPD7.mjs";
import {
  __commonJS,
  __toESM
} from "./chunk-U7HSCTZN.mjs";

// node_modules/form-urlencoded/dist/form-urlencoded.js
var require_form_urlencoded = __commonJS({
  "node_modules/form-urlencoded/dist/form-urlencoded.js"(exports, module) {
    "use strict";
    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
      return typeof obj;
    } : function(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    module.exports = function(data) {
      var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var sorted = Boolean(opts.sorted), skipIndex = Boolean(opts.skipIndex), ignorenull = Boolean(opts.ignorenull), encode2 = function encode3(value) {
        return String(value).replace(/(?:[\0-\x1F"-&\+-\}\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g, encodeURIComponent).replace(/ /g, "+").replace(/[!'()~\*]/g, function(ch) {
          return "%" + ch.charCodeAt().toString(16).slice(-2).toUpperCase();
        });
      }, keys = function keys2(obj) {
        var keyarr = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Object.keys(obj);
        return sorted ? keyarr.sort() : keyarr;
      }, filterjoin = function filterjoin2(arr) {
        return arr.filter(function(e) {
          return e;
        }).join("&");
      }, objnest = function objnest2(name, obj) {
        return filterjoin(keys(obj).map(function(key) {
          return nest(name + "[" + key + "]", obj[key]);
        }));
      }, arrnest = function arrnest2(name, arr) {
        return arr.length ? filterjoin(arr.map(function(elem, index) {
          return skipIndex ? nest(name + "[]", elem) : nest(name + "[" + index + "]", elem);
        })) : encode2(name + "[]");
      }, nest = function nest2(name, value) {
        var type = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : typeof value === "undefined" ? "undefined" : _typeof(value);
        var f = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
        if (value === f)
          f = ignorenull ? f : encode2(name) + "=" + f;
        else if (/string|number|boolean/.test(type))
          f = encode2(name) + "=" + encode2(value);
        else if (Array.isArray(value))
          f = arrnest(name, value);
        else if (type === "object")
          f = objnest(name, value);
        return f;
      };
      return data && filterjoin(keys(data).map(function(key) {
        return nest(key, data[key]);
      }));
    };
  }
});

// src/middleware/urlEncoded.js
var import_form_urlencoded = __toESM(require_form_urlencoded());
var encode = import_form_urlencoded.default.default || import_form_urlencoded.default;
var isBuffer = (obj) => !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
var urlEncoded_default = () => ({
  processOptions: (options) => {
    const body = options.body;
    if (!body) {
      return options;
    }
    const isStream = typeof body.pipe === "function";
    const shouldSerialize = !isStream && !isBuffer(body) && isPlainObject(body);
    if (!shouldSerialize) {
      return options;
    }
    return Object.assign({}, options, {
      body: encode(options.body),
      headers: Object.assign({}, options.headers, {
        "Content-Type": "application/x-www-form-urlencoded"
      })
    });
  }
});

export {
  urlEncoded_default
};
//# sourceMappingURL=chunk-RPFTF6P3.mjs.map
