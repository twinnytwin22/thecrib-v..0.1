{"version":3,"file":"index.js","sources":["../../types/lib/index.esm.js","../src/util/findBlockType.ts","../src/util/blockContentTypeFeatures.ts","../src/util/resolveJsType.ts","../src/util/randomKey.ts","../src/constants.ts","../src/HtmlDeserializer/preprocessors/xpathResult.ts","../src/HtmlDeserializer/preprocessors/html.ts","../src/HtmlDeserializer/preprocessors/word.ts","../src/HtmlDeserializer/preprocessors/gdocs.ts","../src/HtmlDeserializer/preprocessors/index.ts","../src/HtmlDeserializer/helpers.ts","../src/HtmlDeserializer/rules/html.ts","../src/HtmlDeserializer/rules/gdocs.ts","../src/HtmlDeserializer/rules/word.ts","../src/HtmlDeserializer/rules/index.ts","../src/HtmlDeserializer/index.ts","../src/util/normalizeBlock.ts","../src/index.ts"],"sourcesContent":["function isObject(obj) {\n  return typeof obj === \"object\" && obj !== null && !Array.isArray(obj);\n}\nfunction isReference(reference) {\n  return isObject(reference) && typeof reference._ref === \"string\";\n}\nfunction isImage(value) {\n  return isObject(value) && isReference(value.asset) && value.asset._ref.startsWith(\"image-\");\n}\nfunction isCrossDatasetReference(reference) {\n  return isObject(reference) && typeof reference._ref === \"string\" && typeof reference._dataset === \"string\" && typeof reference._projectId === \"string\";\n}\nfunction isSanityDocument(document) {\n  return isObject(document) && typeof document._id === \"string\" && typeof document._type === \"string\";\n}\nfunction isTypedObject(obj) {\n  return isObject(obj) && typeof obj._type === \"string\";\n}\nfunction isKeyedObject(obj) {\n  return isObject(obj) && typeof obj._key === \"string\";\n}\nfunction isValidationErrorMarker(marker) {\n  return marker.level === \"error\";\n}\nfunction isValidationWarningMarker(marker) {\n  return marker.level === \"warning\";\n}\nfunction isValidationInfoMarker(marker) {\n  return marker.level === \"info\";\n}\nfunction isCreateMutation(mutation) {\n  return \"create\" in mutation;\n}\nfunction isCreateIfNotExistsMutation(mutation) {\n  return \"createIfNotExists\" in mutation;\n}\nfunction isCreateOrReplaceMutation(mutation) {\n  return \"createOrReplace\" in mutation;\n}\nfunction isDeleteMutation(mutation) {\n  return \"delete\" in mutation;\n}\nfunction isPatchMutation(mutation) {\n  return \"patch\" in mutation;\n}\nconst reKeySegment = /_key\\s*==\\s*['\"](.*)['\"]/;\nconst reIndexTuple = /^\\d*:\\d*$/;\nfunction isIndexSegment(segment) {\n  return typeof segment === \"number\" || typeof segment === \"string\" && /^\\[\\d+\\]$/.test(segment);\n}\nfunction isKeySegment(segment) {\n  if (typeof segment === \"string\") {\n    return reKeySegment.test(segment.trim());\n  }\n  return typeof segment === \"object\" && \"_key\" in segment;\n}\nfunction isIndexTuple(segment) {\n  if (typeof segment === \"string\" && reIndexTuple.test(segment)) {\n    return true;\n  }\n  if (!Array.isArray(segment) || segment.length !== 2) {\n    return false;\n  }\n  const [from, to] = segment;\n  return (typeof from === \"number\" || from === \"\") && (typeof to === \"number\" || to === \"\");\n}\nfunction isRecord$1(value) {\n  return !!value && (typeof value == \"object\" || typeof value == \"function\");\n}\nfunction isPortableTextTextBlock(value) {\n  return isRecord$1(value) && typeof value._type === \"string\" &&\n  // block types can be named, so expect anything here.\n  Array.isArray(value.children) && value.children.every(child => isRecord$1(child)) && (\"markDefs\" in value ? Array.isArray(value.markDefs) && value.markDefs.every(def => isRecord$1(def)) : false) && (\"style\" in value ? typeof value.style === \"string\" : true);\n}\nfunction isPortableTextSpan(value) {\n  return isRecord$1(value) && value._type === \"span\" && typeof value.text === \"string\" && (\"marks\" in value ? Array.isArray(value.marks) && value.marks.every(mark => typeof mark === \"string\") : true);\n}\nfunction isPortableTextListBlock(value) {\n  return isPortableTextTextBlock(value) && \"listItem\" in value && typeof value.listItem === \"string\" && \"level\" in value && Number.isInteger(value.level);\n}\nfunction isRecord(value) {\n  return !!value && (typeof value == \"object\" || typeof value == \"function\");\n}\nfunction isDocumentSchemaType(type) {\n  if (!isObjectSchemaType(type)) {\n    return false;\n  }\n  let current = type;\n  while (current) {\n    if (current.name === \"document\") {\n      return true;\n    }\n    current = current.type;\n  }\n  return false;\n}\nfunction isObjectSchemaType(type) {\n  if (!isRecord(type)) return false;\n  return type.jsonType === \"object\";\n}\nfunction isArraySchemaType(type) {\n  if (!isRecord(type)) return false;\n  return type.jsonType === \"array\";\n}\nfunction isArrayOfBlocksSchemaType(type) {\n  return isArraySchemaType(type) && type.of.some(memberType => isBlockSchemaType(memberType));\n}\nfunction isArrayOfObjectsSchemaType(type) {\n  return isArraySchemaType(type) && type.of.every(memberType => isObjectSchemaType(memberType));\n}\nfunction isArrayOfPrimitivesSchemaType(type) {\n  return isArraySchemaType(type) && type.of.every(memberType => isPrimitiveSchemaType(memberType));\n}\nfunction isBooleanSchemaType(type) {\n  if (!isRecord(type)) return false;\n  return type.jsonType === \"boolean\";\n}\nfunction isStringSchemaType(type) {\n  if (!isRecord(type)) return false;\n  return type.jsonType === \"string\";\n}\nfunction isNumberSchemaType(type) {\n  if (!isRecord(type)) return false;\n  return type.jsonType === \"number\";\n}\nfunction isPrimitiveSchemaType(type) {\n  return isBooleanSchemaType(type) || isStringSchemaType(type) || isNumberSchemaType(type);\n}\nfunction isReferenceSchemaType(type) {\n  return isRecord(type) && (type.name === \"reference\" || isReferenceSchemaType(type.type));\n}\nfunction isCrossDatasetReferenceSchemaType(type) {\n  return isRecord(type) && (type.name === \"crossDatasetReference\" || isCrossDatasetReferenceSchemaType(type.type));\n}\nfunction isTitledListValue(item) {\n  return typeof item === \"object\" && item !== null && \"title\" in item && \"value\" in item;\n}\nfunction isSpanSchemaType(type) {\n  if (!isRecord(type)) return false;\n  return Array.isArray(type.annotations) && Array.isArray(type.decorators);\n}\nfunction isBlockSchemaType(type) {\n  if (!isRecord(type)) return false;\n  if (!Array.isArray(type.fields)) return false;\n  const [maybeSpanChildren, maybeStyle, maybeList] = type.fields;\n  return isBlockChildrenObjectField(maybeSpanChildren) && isBlockStyleObjectField(maybeStyle) && isBlockListObjectField(maybeList);\n}\nfunction isBlockStyleObjectField(field) {\n  if (!isRecord(field)) return false;\n  if (field.name !== \"style\") return false;\n  return isRecord(field.type) && field.type.jsonType === \"string\";\n}\nfunction isBlockListObjectField(field) {\n  if (!isRecord(field)) return false;\n  if (field.name !== \"list\") return false;\n  return isRecord(field.type) && field.type.jsonType === \"string\";\n}\nfunction isBlockChildrenObjectField(field) {\n  if (!isRecord(field)) return false;\n  if (field.name !== \"children\") return false;\n  if (!isArraySchemaType(field.type)) return false;\n  return field.type.of.some(isSpanSchemaType);\n}\nfunction defineType(schemaDefinition, defineOptions) {\n  return schemaDefinition;\n}\nfunction defineField(schemaField, defineOptions) {\n  return schemaField;\n}\nfunction defineArrayMember(arrayOfSchema, defineOptions) {\n  return arrayOfSchema;\n}\nfunction typed(input) {\n  return input;\n}\nfunction isCreateSquashedMutation(mutation) {\n  return \"createSquashed\" in mutation;\n}\nfunction isValidationError(node) {\n  return node.level === \"error\";\n}\nfunction isValidationWarning(node) {\n  return node.level === \"warning\";\n}\nfunction isValidationInfo(node) {\n  return node.level === \"info\";\n}\nexport { defineArrayMember, defineField, defineType, isArrayOfBlocksSchemaType, isArrayOfObjectsSchemaType, isArrayOfPrimitivesSchemaType, isArraySchemaType, isBlockChildrenObjectField, isBlockListObjectField, isBlockSchemaType, isBlockStyleObjectField, isBooleanSchemaType, isCreateIfNotExistsMutation, isCreateMutation, isCreateOrReplaceMutation, isCreateSquashedMutation, isCrossDatasetReference, isCrossDatasetReferenceSchemaType, isDeleteMutation, isDocumentSchemaType, isImage, isIndexSegment, isIndexTuple, isKeySegment, isKeyedObject, isNumberSchemaType, isObjectSchemaType, isPatchMutation, isPortableTextListBlock, isPortableTextSpan, isPortableTextTextBlock, isPrimitiveSchemaType, isReference, isReferenceSchemaType, isSanityDocument, isSpanSchemaType, isStringSchemaType, isTitledListValue, isTypedObject, isValidationError, isValidationErrorMarker, isValidationInfo, isValidationInfoMarker, isValidationWarning, isValidationWarningMarker, typed };\n//# sourceMappingURL=index.esm.js.map\n","import type {BlockSchemaType, SchemaType} from '@sanity/types'\n\nexport function findBlockType(type: SchemaType): type is BlockSchemaType {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return true\n  }\n\n  return false\n}\n","import {\n  ArraySchemaType,\n  BlockSchemaType,\n  EnumListProps,\n  isBlockChildrenObjectField,\n  isBlockListObjectField,\n  isBlockSchemaType,\n  isBlockStyleObjectField,\n  isObjectSchemaType,\n  isTitledListValue,\n  ObjectSchemaType,\n  SpanSchemaType,\n  TitledListValue,\n} from '@sanity/types'\nimport {BlockContentFeatures, ResolvedAnnotationType} from '../types'\nimport {findBlockType} from './findBlockType'\n\n// Helper method for describing a blockContentType's feature set\nexport default function blockContentFeatures(\n  blockContentType: ArraySchemaType\n): BlockContentFeatures {\n  if (!blockContentType) {\n    throw new Error(\"Parameter 'blockContentType' required\")\n  }\n\n  const blockType = blockContentType.of.find(findBlockType)\n  if (!isBlockSchemaType(blockType)) {\n    throw new Error(\"'block' type is not defined in this schema (required).\")\n  }\n\n  const ofType = blockType.fields.find(isBlockChildrenObjectField)?.type?.of\n  if (!ofType) {\n    throw new Error('No `of` declaration found for blocks `children` field')\n  }\n\n  const spanType = ofType.find((member): member is SpanSchemaType => member.name === 'span')\n  if (!spanType) {\n    throw new Error('No `span` type found in `block` schema type `children` definition')\n  }\n\n  const inlineObjectTypes = ofType.filter(\n    (inlineType): inlineType is ObjectSchemaType =>\n      inlineType.name !== 'span' && isObjectSchemaType(inlineType)\n  )\n\n  const blockObjectTypes = blockContentType.of.filter(\n    (memberType): memberType is ObjectSchemaType =>\n      memberType.name !== blockType.name && isObjectSchemaType(memberType)\n  )\n\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    annotations: resolveEnabledAnnotationTypes(spanType),\n    lists: resolveEnabledListItems(blockType),\n    types: {\n      block: blockContentType,\n      span: spanType,\n      inlineObjects: inlineObjectTypes,\n      blockObjects: blockObjectTypes,\n    },\n  }\n}\n\nfunction resolveEnabledStyles(blockType: BlockSchemaType): TitledListValue<string>[] {\n  const styleField = blockType.fields.find(isBlockStyleObjectField)\n  if (!styleField) {\n    throw new Error(\"A field with name 'style' is not defined in the block type (required).\")\n  }\n\n  const textStyles = getTitledListValuesFromEnumListOptions(styleField.type.options)\n  if (textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\"\n    )\n  }\n\n  return textStyles\n}\n\nfunction resolveEnabledAnnotationTypes(spanType: SpanSchemaType): ResolvedAnnotationType[] {\n  return spanType.annotations.map((annotation) => ({\n    title: annotation.title,\n    type: annotation,\n    value: annotation.name,\n    icon: annotation.icon,\n  }))\n}\n\nfunction resolveEnabledDecorators(spanType: SpanSchemaType): TitledListValue<string>[] {\n  return spanType.decorators\n}\n\nfunction resolveEnabledListItems(blockType: BlockSchemaType): TitledListValue<string>[] {\n  const listField = blockType.fields.find(isBlockListObjectField)\n  if (!listField) {\n    throw new Error(\"A field with name 'list' is not defined in the block type (required).\")\n  }\n\n  const listItems = getTitledListValuesFromEnumListOptions(listField.type.options)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n\n  return listItems\n}\n\nfunction getTitledListValuesFromEnumListOptions(\n  options: EnumListProps<string> | undefined\n): TitledListValue<string>[] {\n  const list = options ? options.list : undefined\n  if (!Array.isArray(list)) {\n    return []\n  }\n\n  return list.map((item) => (isTitledListValue(item) ? item : {title: item, value: item}))\n}\n","const toString = Object.prototype.toString\n\n// Copied from https://github.com/ForbesLindesay/type-of\n// but inlined to have fine grained control\nexport function resolveJsType(val: unknown) {\n  switch (toString.call(val)) {\n    case '[object Function]':\n      return 'function'\n    case '[object Date]':\n      return 'date'\n    case '[object RegExp]':\n      return 'regexp'\n    case '[object Arguments]':\n      return 'arguments'\n    case '[object Array]':\n      return 'array'\n    case '[object String]':\n      return 'string'\n    default:\n  }\n\n  if (val === null) {\n    return 'null'\n  }\n\n  if (val === undefined) {\n    return 'undefined'\n  }\n\n  if (\n    val &&\n    typeof val === 'object' &&\n    'nodeType' in val &&\n    (val as {nodeType: unknown}).nodeType === 1\n  ) {\n    return 'element'\n  }\n\n  if (val === Object(val)) {\n    return 'object'\n  }\n\n  return typeof val\n}\n","import getRandomValues from 'get-random-values-esm'\n\n// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length)\n  getRandomValues(rnds8)\n  return rnds8\n}\n\nconst byteToHex: string[] = []\nfor (let i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substring(1)\n}\n\n/**\n * Generate a random key of the given length\n *\n * @param length - Length of string to generate\n * @returns A string of the given length\n * @public\n */\nexport function randomKey(length: number): string {\n  return whatwgRNG(length)\n    .reduce((str, n) => str + byteToHex[n], '')\n    .slice(0, length)\n}\n","import {uniq} from 'lodash'\n\nexport interface PartialBlock {\n  _type: string\n  markDefs: string[]\n  style: string\n  level?: number\n  listItem?: string\n}\n\nexport const BLOCK_DEFAULT_STYLE = 'normal'\n\nexport const DEFAULT_BLOCK: PartialBlock = Object.freeze({\n  _type: 'block',\n  markDefs: [],\n  style: BLOCK_DEFAULT_STYLE,\n})\n\nexport const DEFAULT_SPAN = Object.freeze({\n  _type: 'span',\n  marks: [] as string[],\n})\n\nexport const HTML_BLOCK_TAGS = {\n  p: DEFAULT_BLOCK,\n  blockquote: {...DEFAULT_BLOCK, style: 'blockquote'} as PartialBlock,\n}\n\nexport const HTML_SPAN_TAGS = {\n  span: {object: 'text'},\n}\n\nexport const HTML_LIST_CONTAINER_TAGS: Record<string, {object: null} | undefined> = {\n  ol: {object: null},\n  ul: {object: null},\n}\n\nexport const HTML_HEADER_TAGS: Record<string, PartialBlock | undefined> = {\n  h1: {...DEFAULT_BLOCK, style: 'h1'},\n  h2: {...DEFAULT_BLOCK, style: 'h2'},\n  h3: {...DEFAULT_BLOCK, style: 'h3'},\n  h4: {...DEFAULT_BLOCK, style: 'h4'},\n  h5: {...DEFAULT_BLOCK, style: 'h5'},\n  h6: {...DEFAULT_BLOCK, style: 'h6'},\n}\n\nexport const HTML_MISC_TAGS = {\n  br: {...DEFAULT_BLOCK, style: BLOCK_DEFAULT_STYLE} as PartialBlock,\n}\n\nexport const HTML_DECORATOR_TAGS: Record<string, string | undefined> = {\n  b: 'strong',\n  strong: 'strong',\n\n  i: 'em',\n  em: 'em',\n\n  u: 'underline',\n  s: 'strike-through',\n  strike: 'strike-through',\n  del: 'strike-through',\n\n  code: 'code',\n}\n\nexport const HTML_LIST_ITEM_TAGS: Record<string, PartialBlock | undefined> = {\n  li: {\n    ...DEFAULT_BLOCK,\n    style: BLOCK_DEFAULT_STYLE,\n    level: 1,\n    listItem: 'bullet',\n  },\n}\n\nexport const ELEMENT_MAP = {\n  ...HTML_BLOCK_TAGS,\n  ...HTML_SPAN_TAGS,\n  ...HTML_LIST_CONTAINER_TAGS,\n  ...HTML_LIST_ITEM_TAGS,\n  ...HTML_HEADER_TAGS,\n  ...HTML_MISC_TAGS,\n}\n\nexport const DEFAULT_SUPPORTED_STYLES = uniq(\n  Object.values(ELEMENT_MAP)\n    .filter((tag): tag is PartialBlock => 'style' in tag)\n    .map((tag) => tag.style)\n)\n\nexport const DEFAULT_SUPPORTED_DECORATORS = uniq(Object.values(HTML_DECORATOR_TAGS))\n\nexport const DEFAULT_SUPPORTED_ANNOTATIONS = ['link']\n","// We need this here if run server side\nexport const _XPathResult = {\n  ANY_TYPE: 0,\n  NUMBER_TYPE: 1,\n  STRING_TYPE: 2,\n  BOOLEAN_TYPE: 3,\n  UNORDERED_NODE_ITERATOR_TYPE: 4,\n  ORDERED_NODE_ITERATOR_TYPE: 5,\n  UNORDERED_NODE_SNAPSHOT_TYPE: 6,\n  ORDERED_NODE_SNAPSHOT_TYPE: 7,\n  ANY_UNORDERED_NODE_TYPE: 8,\n  FIRST_ORDERED_NODE_TYPE: 9,\n}\n","import {_XPathResult} from './xpathResult'\n\n// Remove this cruft from the document\nconst unwantedWordDocumentPaths = [\n  '/html/text()',\n  '/html/head/text()',\n  '/html/body/text()',\n  '/html/body/ul/text()',\n  '/html/body/ol/text()',\n  '//comment()',\n  '//style',\n  '//xml',\n  '//script',\n  '//meta',\n  '//link',\n]\n\nexport default (html: string, doc: Document): Document => {\n  // Make sure text directly on the body is wrapped in spans.\n  // This mimics what the browser does before putting html on the clipboard,\n  // when used in a script context with JSDOM\n  const bodyTextNodes = doc.evaluate(\n    '/html/body/text()',\n    doc,\n    null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  )\n\n  for (let i = bodyTextNodes.snapshotLength - 1; i >= 0; i--) {\n    const node = bodyTextNodes.snapshotItem(i) as HTMLElement\n    const text = node.textContent || ''\n    if (text.replace(/[^\\S\\n]+$/g, '')) {\n      const newNode = doc.createElement('span')\n      newNode.appendChild(doc.createTextNode(text))\n      node.parentNode?.replaceChild(newNode, node)\n    } else {\n      node.parentNode?.removeChild(node)\n    }\n  }\n\n  const unwantedNodes = doc.evaluate(\n    unwantedWordDocumentPaths.join('|'),\n    doc,\n    null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  )\n  for (let i = unwantedNodes.snapshotLength - 1; i >= 0; i--) {\n    const unwanted = unwantedNodes.snapshotItem(i)\n    if (!unwanted) {\n      continue\n    }\n    unwanted.parentNode?.removeChild(unwanted)\n  }\n  return doc\n}\n","import {_XPathResult} from './xpathResult'\n\nconst WORD_HTML_REGEX = /(class=\"?Mso|style=(?:\"|')[^\"]*?\\bmso-|w:WordDocument|<o:\\w+>|<\\/font>)/\n\n// xPaths for elements that will be removed from the document\nconst unwantedPaths = [\n  '//o:p',\n  \"//span[@style='mso-list:Ignore']\",\n  \"//span[@style='mso-list: Ignore']\",\n]\n\n// xPaths for elements that needs to be remapped into other tags\nconst mappedPaths = [\n  \"//p[@class='MsoTocHeading']\",\n  \"//p[@class='MsoTitle']\",\n  \"//p[@class='MsoToaHeading']\",\n  \"//p[@class='MsoSubtitle']\",\n  \"//span[@class='MsoSubtleEmphasis']\",\n  \"//span[@class='MsoIntenseEmphasis']\",\n]\n\n// Which HTML element(s) to map the elements matching mappedPaths into\nconst elementMap: Record<string, string[] | undefined> = {\n  MsoTocHeading: ['h3'],\n  MsoTitle: ['h1'],\n  MsoToaHeading: ['h2'],\n  MsoSubtitle: ['h5'],\n  MsoSubtleEmphasis: ['span', 'em'],\n  MsoIntenseEmphasis: ['span', 'em', 'strong'],\n  // Remove cruft\n}\n\nfunction isWordHtml(html: string) {\n  return WORD_HTML_REGEX.test(html)\n}\n\nexport default (html: string, doc: Document): Document => {\n  if (!isWordHtml(html)) {\n    return doc\n  }\n\n  const unwantedNodes = doc.evaluate(\n    unwantedPaths.join('|'),\n    doc,\n    (prefix) => {\n      if (prefix === 'o') {\n        return 'urn:schemas-microsoft-com:office:office'\n      }\n      return null\n    },\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  )\n\n  for (let i = unwantedNodes.snapshotLength - 1; i >= 0; i--) {\n    const unwanted = unwantedNodes.snapshotItem(i)\n    if (unwanted?.parentNode) {\n      unwanted.parentNode.removeChild(unwanted)\n    }\n  }\n\n  // Transform mapped elements into what they should be mapped to\n  const mappedElements = doc.evaluate(\n    mappedPaths.join('|'),\n    doc,\n    null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  )\n  for (let i = mappedElements.snapshotLength - 1; i >= 0; i--) {\n    const mappedElm = mappedElements.snapshotItem(i) as HTMLElement\n    const tags = elementMap[mappedElm.className]\n    const text = new Text(mappedElm.textContent || '')\n    if (!tags) {\n      continue\n    }\n\n    const parentElement = document.createElement(tags[0])\n    let parent = parentElement\n    let child = parentElement\n    tags.slice(1).forEach((tag) => {\n      child = document.createElement(tag)\n      parent.appendChild(child)\n      parent = child\n    })\n    child.appendChild(text)\n    mappedElm?.parentNode?.replaceChild(parentElement, mappedElm)\n  }\n\n  return doc\n}\n","import {_XPathResult} from './xpathResult'\n\nfunction isGoogleDocsDocument(el: Element) {\n  if (el.nodeType !== 1) {\n    return false\n  }\n  const id = el.getAttribute('id')\n  return id && id.match(/^docs-internal-guid-/) && el.tagName === 'B'\n}\n\nexport default (html: string, doc: Document): Document => {\n  if (doc.body.firstElementChild && isGoogleDocsDocument(doc.body.firstElementChild)) {\n    // Tag every child with attribute 'is-google-docs' so that the GDocs rule-set can\n    // work exclusivly on these children\n    const childNodes = doc.evaluate(\n      '//*',\n      doc,\n      null,\n      _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n      null\n    )\n    for (let i = childNodes.snapshotLength - 1; i >= 0; i--) {\n      const elm = childNodes.snapshotItem(i) as HTMLElement\n      elm?.setAttribute('data-is-google-docs', 'true')\n    }\n    // Remove that 'b' which Google Docs wraps the HTML content in\n    doc.body.firstElementChild.replaceWith(...Array.from(doc.body.firstElementChild.childNodes))\n    return doc\n  }\n  return doc\n}\n","import preprocessHTML from './html'\nimport preprocessWord from './word'\nimport preprocessGDocs from './gdocs'\n\nexport default [preprocessWord, preprocessGDocs, preprocessHTML]\n","import {ArraySchemaType, PortableTextTextBlock, isPortableTextTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {DEFAULT_BLOCK} from '../constants'\nimport {resolveJsType} from '../util/resolveJsType'\nimport type {\n  BlockEnabledFeatures,\n  HtmlParser,\n  MinimalBlock,\n  MinimalSpan,\n  PlaceholderAnnotation,\n  PlaceholderDecorator,\n  TypedObject,\n} from '../types'\nimport blockContentTypeFeatures from '../util/blockContentTypeFeatures'\nimport preprocessors from './preprocessors'\n\n/**\n * A utility function to create the options needed for the various rule sets,\n * based on the structure of the blockContentType\n *\n * @param blockContentType - Schema type for array containing _at least_ a block child type\n * @returns\n */\nexport function createRuleOptions(blockContentType: ArraySchemaType): BlockEnabledFeatures {\n  const features = blockContentTypeFeatures(blockContentType)\n  const enabledBlockStyles = features.styles.map((item) => item.value || item.title)\n  const enabledSpanDecorators = features.decorators.map((item) => item.value || item.title)\n  const enabledBlockAnnotations = features.annotations.map((item) => item.value || item.title || '')\n  return {\n    enabledBlockStyles,\n    enabledSpanDecorators,\n    enabledBlockAnnotations,\n  }\n}\n\n/**\n * Utility function that always return a lowerCase version of the element.tagName\n *\n * @param el - Element to get tag name for\n * @returns Lowercase tagName for that element, or undefined if not an element\n */\nexport function tagName(el: HTMLElement | Node | null): string | undefined {\n  if (el && 'tagName' in el) {\n    return el.tagName.toLowerCase()\n  }\n\n  return undefined\n}\n\n// TODO: make this plugin-style\nexport function preprocess(html: string, parseHtml: HtmlParser): Document {\n  const compactHtml = html\n    .trim() // Trim whitespace\n    .replace(/\\s\\s+/g, ' ') // Remove multiple whitespace\n    .replace(/[\\r\\n]/g, ' ') // Remove newlines / carriage returns\n  const doc = parseHtml(compactHtml)\n  preprocessors.forEach((processor) => {\n    processor(html, doc)\n  })\n  return doc\n}\n\n/**\n * A default `parseHtml` function that returns the html using `DOMParser`.\n *\n * @returns HTML Parser based on `DOMParser`\n */\nexport function defaultParseHtml(): HtmlParser {\n  if (resolveJsType(DOMParser) === 'undefined') {\n    throw new Error(\n      'The native `DOMParser` global which the `Html` deserializer uses by ' +\n        'default is not present in this environment. ' +\n        'You must supply the `options.parseHtml` function instead.'\n    )\n  }\n  return (html) => {\n    return new DOMParser().parseFromString(html, 'text/html')\n  }\n}\n\nexport function flattenNestedBlocks(blocks: TypedObject[]): TypedObject[] {\n  let depth = 0\n  const flattened: TypedObject[] = []\n  const traverse = (nodes: TypedObject[]) => {\n    const toRemove: TypedObject[] = []\n    nodes.forEach((node) => {\n      if (depth === 0) {\n        flattened.push(node)\n      }\n      if (isPortableTextTextBlock(node)) {\n        if (depth > 0) {\n          toRemove.push(node)\n          flattened.push(node)\n        }\n        depth++\n        traverse(node.children)\n      }\n      if (node._type === '__block') {\n        toRemove.push(node)\n        flattened.push((node as any).block)\n      }\n    })\n    toRemove.forEach((node) => {\n      nodes.splice(nodes.indexOf(node), 1)\n    })\n    depth--\n  }\n  traverse(blocks)\n  return flattened\n}\n\nfunction nextSpan(block: PortableTextTextBlock, index: number) {\n  const next = block.children[index + 1]\n  return next && next._type === 'span' ? next : null\n}\n\nfunction prevSpan(block: PortableTextTextBlock, index: number) {\n  const prev = block.children[index - 1]\n  return prev && prev._type === 'span' ? prev : null\n}\n\nfunction isWhiteSpaceChar(text: string) {\n  return ['\\xa0', ' '].includes(text)\n}\n\n/**\n * NOTE: _mutates_ passed blocks!\n *\n * @param blocks - Array of blocks to trim whitespace for\n * @returns\n */\nexport function trimWhitespace(blocks: TypedObject[]): TypedObject[] {\n  blocks.forEach((block) => {\n    if (!isPortableTextTextBlock(block)) {\n      return\n    }\n\n    // eslint-disable-next-line complexity\n    block.children.forEach((child, index) => {\n      if (!isMinimalSpan(child)) {\n        return\n      }\n      const nextChild = nextSpan(block, index)\n      const prevChild = prevSpan(block, index)\n      if (index === 0) {\n        child.text = child.text.replace(/^[^\\S\\n]+/g, '')\n      }\n      if (index === block.children.length - 1) {\n        child.text = child.text.replace(/[^\\S\\n]+$/g, '')\n      }\n      if (\n        /\\s/.test(child.text.substring(child.text.length - 1)) &&\n        nextChild &&\n        isMinimalSpan(nextChild) &&\n        /\\s/.test(nextChild.text.substring(0, 1))\n      ) {\n        child.text = child.text.replace(/[^\\S\\n]+$/g, '')\n      }\n      if (\n        /\\s/.test(child.text.substring(0, 1)) &&\n        prevChild &&\n        isMinimalSpan(prevChild) &&\n        /\\s/.test(prevChild.text.substring(prevChild.text.length - 1))\n      ) {\n        child.text = child.text.replace(/^[^\\S\\n]+/g, '')\n      }\n      if (!child.text) {\n        block.children.splice(index, 1)\n      }\n      if (prevChild && isEqual(prevChild.marks, child.marks) && isWhiteSpaceChar(child.text)) {\n        prevChild.text += ' '\n        block.children.splice(index, 1)\n      } else if (\n        nextChild &&\n        isEqual(nextChild.marks, child.marks) &&\n        isWhiteSpaceChar(child.text)\n      ) {\n        nextChild.text = ` ${nextChild.text}`\n        block.children.splice(index, 1)\n      }\n    })\n  })\n\n  return blocks\n}\n\nexport function ensureRootIsBlocks(blocks: TypedObject[]): TypedObject[] {\n  return blocks.reduce((memo, node, i, original) => {\n    if (node._type === 'block') {\n      memo.push(node)\n      return memo\n    }\n\n    if (node._type === '__block') {\n      memo.push((node as any).block)\n      return memo\n    }\n\n    const lastBlock = memo[memo.length - 1]\n    if (\n      i > 0 &&\n      !isPortableTextTextBlock(original[i - 1]) &&\n      isPortableTextTextBlock<TypedObject>(lastBlock)\n    ) {\n      lastBlock.children.push(node)\n      return memo\n    }\n\n    const block = {\n      ...DEFAULT_BLOCK,\n      children: [node],\n    }\n\n    memo.push(block)\n    return memo\n  }, [] as TypedObject[])\n}\n\nexport function isNodeList(node: unknown): node is NodeList {\n  return Object.prototype.toString.call(node) == '[object NodeList]'\n}\n\nexport function isMinimalSpan(node: TypedObject): node is MinimalSpan {\n  return node._type === 'span'\n}\n\nexport function isMinimalBlock(node: TypedObject): node is MinimalBlock {\n  return node._type === 'block'\n}\n\nexport function isPlaceholderDecorator(node: TypedObject): node is PlaceholderDecorator {\n  return node._type === '__decorator'\n}\n\nexport function isPlaceholderAnnotation(node: TypedObject): node is PlaceholderAnnotation {\n  return node._type === '__annotation'\n}\n\nexport function isElement(node: Node): node is Element {\n  return node.nodeType === 1\n}\n","import type {ArraySchemaType} from '@sanity/types'\nimport {randomKey} from '../../util/randomKey'\nimport {isElement, tagName} from '../helpers'\nimport {\n  DEFAULT_BLOCK,\n  DEFAULT_SPAN,\n  HTML_BLOCK_TAGS,\n  HTML_HEADER_TAGS,\n  HTML_SPAN_TAGS,\n  HTML_LIST_CONTAINER_TAGS,\n  HTML_LIST_ITEM_TAGS,\n  HTML_DECORATOR_TAGS,\n  PartialBlock,\n} from '../../constants'\nimport {BlockEnabledFeatures, DeserializerRule} from '../../types'\n\nexport function resolveListItem(listNodeTagName: string): string {\n  let listStyle\n  switch (listNodeTagName) {\n    case 'ul':\n      listStyle = 'bullet'\n      break\n    case 'ol':\n      listStyle = 'number'\n      break\n    default:\n      listStyle = 'bullet'\n  }\n  return listStyle\n}\n\nexport default function createHTMLRules(\n  blockContentType: ArraySchemaType,\n  options: BlockEnabledFeatures\n): DeserializerRule[] {\n  return [\n    // Text nodes\n    {\n      deserialize(el) {\n        const isValidWhiteSpace =\n          el.nodeType === 3 &&\n          (el.textContent || '').replace(/[\\r\\n]/g, ' ').replace(/\\s\\s+/g, ' ') === ' ' &&\n          el.nextSibling &&\n          el.nextSibling.nodeType !== 3 &&\n          el.previousSibling &&\n          el.previousSibling.nodeType !== 3\n        const isValidText =\n          (isValidWhiteSpace || el.textContent !== ' ') && tagName(el.parentNode) !== 'body'\n        if (el.nodeName === '#text' && isValidText) {\n          return {\n            ...DEFAULT_SPAN,\n            marks: [],\n            text: (el.textContent || '').replace(/\\s\\s+/g, ' '),\n          }\n        }\n        return undefined\n      },\n    }, // Blockquote element\n    {\n      deserialize(el, next) {\n        if (tagName(el) !== 'blockquote') {\n          return undefined\n        }\n        const blocks: Record<string, PartialBlock | undefined> = {\n          ...HTML_BLOCK_TAGS,\n          ...HTML_HEADER_TAGS,\n        }\n        delete blocks.blockquote\n\n        const children: HTMLElement[] = []\n        el.childNodes.forEach((node, index) => {\n          if (\n            node.nodeType === 1 &&\n            Object.keys(blocks).includes((node as Element).localName.toLowerCase())\n          ) {\n            if (!el.ownerDocument) {\n              return\n            }\n\n            const span = el.ownerDocument.createElement('span')\n            span.appendChild(el.ownerDocument.createTextNode('\\r'))\n            node.childNodes.forEach((cn) => {\n              span.appendChild(cn.cloneNode(true))\n            })\n            if (index !== el.childNodes.length) {\n              span.appendChild(el.ownerDocument.createTextNode('\\r'))\n            }\n            children.push(span)\n          } else {\n            children.push(node as HTMLElement)\n          }\n        })\n\n        return {\n          _type: 'block',\n          style: 'blockquote',\n          markDefs: [],\n          children: next(children),\n        }\n      },\n    }, // Block elements\n    {\n      deserialize(el, next) {\n        const blocks: Record<string, PartialBlock | undefined> = {\n          ...HTML_BLOCK_TAGS,\n          ...HTML_HEADER_TAGS,\n        }\n        const tag = tagName(el)\n        let block = tag ? blocks[tag] : undefined\n        if (!block) {\n          return undefined\n        }\n        // Don't add blocks into list items\n        if (el.parentNode && tagName(el.parentNode) === 'li') {\n          return next(el.childNodes)\n        }\n        // If style is not supported, return a defaultBlockType\n        if (!options.enabledBlockStyles.includes(block.style)) {\n          block = DEFAULT_BLOCK\n        }\n        return {\n          ...block,\n          children: next(el.childNodes),\n        }\n      },\n    }, // Ignore span tags\n    {\n      deserialize(el, next) {\n        const tag = tagName(el)\n        if (!tag || !(tag in HTML_SPAN_TAGS)) {\n          return undefined\n        }\n        return next(el.childNodes)\n      },\n    }, // Ignore div tags\n    {\n      deserialize(el, next) {\n        const div = tagName(el) === 'div'\n        if (!div) {\n          return undefined\n        }\n        return next(el.childNodes)\n      },\n    }, // Ignore list containers\n    {\n      deserialize(el, next) {\n        const tag = tagName(el)\n        if (!tag || !(tag in HTML_LIST_CONTAINER_TAGS)) {\n          return undefined\n        }\n        return next(el.childNodes)\n      },\n    }, // Deal with br's\n    {\n      deserialize(el) {\n        if (tagName(el) === 'br') {\n          return {\n            ...DEFAULT_SPAN,\n            text: '\\n',\n          }\n        }\n        return undefined\n      },\n    }, // Deal with list items\n    {\n      deserialize(el, next) {\n        const tag = tagName(el)\n        const listItem = tag ? HTML_LIST_ITEM_TAGS[tag] : undefined\n        const parentTag = tagName(el.parentNode) || ''\n        if (!listItem || !el.parentNode || !HTML_LIST_CONTAINER_TAGS[parentTag]) {\n          return undefined\n        }\n\n        listItem.listItem = resolveListItem(parentTag)\n        return {\n          ...listItem,\n          children: next(el.childNodes),\n        }\n      },\n    }, // Deal with decorators\n    {\n      deserialize(el, next) {\n        const decorator = HTML_DECORATOR_TAGS[tagName(el) || '']\n        if (!decorator || !options.enabledSpanDecorators.includes(decorator)) {\n          return undefined\n        }\n        return {\n          _type: '__decorator',\n          name: decorator,\n          children: next(el.childNodes),\n        }\n      },\n    }, // Special case for hyperlinks, add annotation (if allowed by schema),\n    // If not supported just write out the link text and href in plain text.\n    {\n      deserialize(el, next) {\n        if (tagName(el) != 'a') {\n          return undefined\n        }\n        const linkEnabled = options.enabledBlockAnnotations.includes('link')\n        const href = isElement(el) && el.getAttribute('href')\n        if (!href) {\n          return next(el.childNodes)\n        }\n        let markDef\n        if (linkEnabled) {\n          markDef = {\n            _key: randomKey(12),\n            _type: 'link',\n            href: href,\n          }\n          return {\n            _type: '__annotation',\n            markDef: markDef,\n            children: next(el.childNodes),\n          }\n        }\n        return el.appendChild(el.ownerDocument.createTextNode(` (${href})`)) && next(el.childNodes)\n      },\n    },\n  ]\n}\n","import type {ArraySchemaType} from '@sanity/types'\nimport type {BlockEnabledFeatures, DeserializerRule} from '../../types'\nimport {\n  BLOCK_DEFAULT_STYLE,\n  DEFAULT_BLOCK,\n  DEFAULT_SPAN,\n  HTML_BLOCK_TAGS,\n  HTML_HEADER_TAGS,\n  HTML_LIST_CONTAINER_TAGS,\n} from '../../constants'\nimport {isElement, tagName} from '../helpers'\n\nconst LIST_CONTAINER_TAGS = Object.keys(HTML_LIST_CONTAINER_TAGS)\n\n// font-style:italic seems like the most important rule for italic / emphasis in their html\nfunction isEmphasis(el: Node): boolean {\n  const style = isElement(el) && el.getAttribute('style')\n  return /font-style:italic/.test(style || '')\n}\n\n// font-weight:700 seems like the most important rule for bold in their html\nfunction isStrong(el: Node): boolean {\n  const style = isElement(el) && el.getAttribute('style')\n  return /font-weight:700/.test(style || '')\n}\n\n// Check for attribute given by the gdocs preprocessor\nfunction isGoogleDocs(el: Node): boolean {\n  return isElement(el) && Boolean(el.getAttribute('data-is-google-docs'))\n}\n\nfunction getListItemStyle(el: Node): 'bullet' | 'number' | undefined {\n  const parentTag = tagName(el.parentNode)\n  if (parentTag && !LIST_CONTAINER_TAGS.includes(parentTag)) {\n    return undefined\n  }\n  return tagName(el.parentNode) === 'ul' ? 'bullet' : 'number'\n}\n\nfunction getListItemLevel(el: Node): number {\n  let level = 0\n  if (tagName(el) === 'li') {\n    let parentNode = el.parentNode\n    while (parentNode) {\n      const parentTag = tagName(parentNode)\n      if (parentTag && LIST_CONTAINER_TAGS.includes(parentTag)) {\n        level++\n      }\n      parentNode = parentNode.parentNode\n    }\n  } else {\n    level = 1\n  }\n  return level\n}\n\nconst blocks: Record<string, {style: string} | undefined> = {\n  ...HTML_BLOCK_TAGS,\n  ...HTML_HEADER_TAGS,\n}\n\nfunction getBlockStyle(el: Node, enabledBlockStyles: string[]): string {\n  const childTag = tagName(el.firstChild)\n  const block = childTag && blocks[childTag]\n  if (!block) {\n    return BLOCK_DEFAULT_STYLE\n  }\n  if (!enabledBlockStyles.includes(block.style)) {\n    return BLOCK_DEFAULT_STYLE\n  }\n  return block.style\n}\n\nexport default function createGDocsRules(\n  _blockContentType: ArraySchemaType,\n  options: BlockEnabledFeatures\n): DeserializerRule[] {\n  return [\n    {\n      deserialize(el) {\n        if (isElement(el) && tagName(el) === 'span' && isGoogleDocs(el)) {\n          const span = {\n            ...DEFAULT_SPAN,\n            marks: [] as string[],\n            text: (el as HTMLElement).innerText,\n          }\n          if (isStrong(el)) {\n            span.marks.push('strong')\n          }\n          if (isEmphasis(el)) {\n            span.marks.push('em')\n          }\n          return span\n        }\n        return undefined\n      },\n    },\n    {\n      deserialize(el, next) {\n        if (tagName(el) === 'li' && isGoogleDocs(el)) {\n          return {\n            ...DEFAULT_BLOCK,\n            listItem: getListItemStyle(el),\n            level: getListItemLevel(el),\n            style: getBlockStyle(el, options.enabledBlockStyles),\n            children: next(el.firstChild?.childNodes || []),\n          }\n        }\n        return undefined\n      },\n    },\n  ]\n}\n","import type {DeserializerRule} from '../../types'\nimport {DEFAULT_BLOCK, BLOCK_DEFAULT_STYLE} from '../../constants'\nimport {isElement, tagName} from '../helpers'\n\nfunction getListItemStyle(el: Node): string | undefined {\n  const style = isElement(el) && el.getAttribute('style')\n  if (!style) {\n    return undefined\n  }\n\n  if (!style.match(/lfo\\d+/)) {\n    return undefined\n  }\n\n  return style.match('lfo1') ? 'bullet' : 'number'\n}\n\nfunction getListItemLevel(el: Node): number | undefined {\n  const style = isElement(el) && el.getAttribute('style')\n  if (!style) {\n    return undefined\n  }\n\n  const levelMatch = style.match(/level\\d+/)\n  if (!levelMatch) {\n    return undefined\n  }\n\n  const [level] = levelMatch[0].match(/\\d/) || []\n  const levelNum = level ? parseInt(level, 10) : 1\n  return levelNum || 1\n}\n\nfunction isWordListElement(el: Node): boolean {\n  return isElement(el) && el.className\n    ? el.className === 'MsoListParagraphCxSpFirst' ||\n        el.className === 'MsoListParagraphCxSpMiddle' ||\n        el.className === 'MsoListParagraphCxSpLast'\n    : false\n}\n\nexport default function createWordRules(): DeserializerRule[] {\n  return [\n    {\n      deserialize(el, next) {\n        if (tagName(el) === 'p' && isWordListElement(el)) {\n          return {\n            ...DEFAULT_BLOCK,\n            listItem: getListItemStyle(el),\n            level: getListItemLevel(el),\n            style: BLOCK_DEFAULT_STYLE,\n            children: next(el.childNodes),\n          }\n        }\n        return undefined\n      },\n    },\n  ]\n}\n","import type {ArraySchemaType} from '@sanity/types'\nimport type {BlockEnabledFeatures, DeserializerRule} from '../../types'\nimport createHTMLRules from './html'\nimport createGDocsRules from './gdocs'\nimport createWordRules from './word'\n\nexport function createRules(\n  blockContentType: ArraySchemaType,\n  options: BlockEnabledFeatures\n): DeserializerRule[] {\n  return [\n    ...createWordRules(),\n    ...createGDocsRules(blockContentType, options),\n    ...createHTMLRules(blockContentType, options),\n  ]\n}\n","import type {\n  ArraySchemaType,\n  PortableTextBlock,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten} from 'lodash'\nimport {findBlockType} from '../util/findBlockType'\nimport {resolveJsType} from '../util/resolveJsType'\nimport type {\n  ArbitraryTypedObject,\n  DeserializerRule,\n  HtmlDeserializerOptions,\n  PlaceholderAnnotation,\n  PlaceholderDecorator,\n  TypedObject,\n} from '../types'\nimport {createRules} from './rules'\nimport {\n  createRuleOptions,\n  defaultParseHtml,\n  ensureRootIsBlocks,\n  flattenNestedBlocks,\n  trimWhitespace,\n  preprocess,\n  tagName,\n  isNodeList,\n  isMinimalSpan,\n  isPlaceholderDecorator,\n  isPlaceholderAnnotation,\n  isMinimalBlock,\n} from './helpers'\n\n/**\n * HTML Deserializer\n *\n */\nexport default class HtmlDeserializer {\n  blockContentType: ArraySchemaType\n  rules: DeserializerRule[]\n  parseHtml: (html: string) => HTMLElement\n  _markDefs: PortableTextObject[] = []\n\n  /**\n   * Create a new serializer respecting a Sanity block content type's schema\n   *\n   * @param blockContentType - Schema type for array containing _at least_ a block child type\n   * @param options - Options for the deserialization process\n   */\n  constructor(blockContentType: ArraySchemaType, options: HtmlDeserializerOptions = {}) {\n    const {rules = []} = options\n    if (!blockContentType) {\n      throw new Error(\"Parameter 'blockContentType' is required\")\n    }\n    const standardRules = createRules(blockContentType, createRuleOptions(blockContentType))\n    this.rules = [...rules, ...standardRules]\n    const parseHtml = options.parseHtml || defaultParseHtml()\n    this.blockContentType = blockContentType\n    this.parseHtml = (html) => {\n      const doc = preprocess(html, parseHtml)\n      return doc.body\n    }\n  }\n\n  /**\n   * Deserialize HTML.\n   *\n   * @param html - The HTML to deserialize, as a string\n   * @returns Array of blocks - either portable text blocks or other allowed blocks\n   */\n  deserialize = (html: string): TypedObject[] => {\n    this._markDefs = []\n    const {parseHtml} = this\n    const fragment = parseHtml(html)\n    const children = Array.from(fragment.childNodes) as HTMLElement[]\n    // Ensure that there are no blocks within blocks, and trim whitespace\n    const blocks = trimWhitespace(\n      flattenNestedBlocks(ensureRootIsBlocks(this.deserializeElements(children)))\n    )\n\n    if (this._markDefs.length > 0) {\n      blocks\n        .filter((block): block is PortableTextTextBlock => block._type === 'block')\n        .forEach((block) => {\n          block.markDefs = block.markDefs || []\n          block.markDefs = block.markDefs.concat(\n            this._markDefs.filter((def) => {\n              return flatten(block.children.map((child) => child.marks || [])).includes(def._key)\n            })\n          )\n        })\n    }\n\n    // Set back the potentially hoisted block type\n    const type = this.blockContentType.of.find(findBlockType)\n    if (!type) {\n      return blocks\n    }\n\n    return blocks.map((block) => {\n      if (block._type === 'block') {\n        block._type = type.name\n      }\n      return block\n    })\n  }\n\n  /**\n   * Deserialize an array of DOM elements.\n   *\n   * @param elements - Array of DOM elements to deserialize\n   * @returns\n   */\n  deserializeElements = (elements: Node[] = []): TypedObject[] => {\n    let nodes: TypedObject[] = []\n    elements.forEach((element) => {\n      nodes = nodes.concat(this.deserializeElement(element))\n    })\n    return nodes\n  }\n\n  /**\n   * Deserialize a DOM element\n   *\n   * @param element - Deserialize a DOM element\n   * @returns\n   */\n  deserializeElement = (element: Node): TypedObject | TypedObject[] => {\n    const next = (elements: Node | Node[] | NodeList): TypedObject | TypedObject[] | undefined => {\n      if (isNodeList(elements)) {\n        return this.deserializeElements(Array.from(elements))\n      }\n\n      if (Array.isArray(elements)) {\n        return this.deserializeElements(elements)\n      }\n\n      if (!elements) {\n        return undefined\n      }\n\n      return this.deserializeElement(elements)\n    }\n\n    const block = (props: ArbitraryTypedObject) => {\n      return {\n        _type: '__block',\n        block: props,\n      }\n    }\n\n    let node\n    for (let i = 0; i < this.rules.length; i++) {\n      const rule = this.rules[i]\n      if (!rule.deserialize) {\n        continue\n      }\n\n      const ret = rule.deserialize(element, next, block)\n      const type = resolveJsType(ret)\n\n      if (type !== 'array' && type !== 'object' && type !== 'null' && type !== 'undefined') {\n        throw new Error(`A rule returned an invalid deserialized representation: \"${node}\".`)\n      }\n\n      if (ret === undefined) {\n        continue\n      } else if (ret === null) {\n        throw new Error('Deserializer rule returned `null`')\n      } else if (Array.isArray(ret)) {\n        node = ret\n      } else if (isPlaceholderDecorator(ret)) {\n        node = this.deserializeDecorator(ret)\n      } else if (isPlaceholderAnnotation(ret)) {\n        node = this.deserializeAnnotation(ret)\n      } else {\n        node = ret\n      }\n\n      // Set list level on list item\n      if (ret && !Array.isArray(ret) && isMinimalBlock(ret) && 'listItem' in ret) {\n        let parent = element.parentNode?.parentNode\n        while (parent && tagName(parent) === 'li') {\n          parent = parent.parentNode?.parentNode\n          ret.level = ret.level ? ret.level + 1 : 1\n        }\n      }\n\n      // Set newlines on spans orginating from a block element within a blockquote\n      if (ret && !Array.isArray(ret) && isMinimalBlock(ret) && ret.style === 'blockquote') {\n        ret.children.forEach((child, index) => {\n          if (isMinimalSpan(child) && child.text === '\\r') {\n            child.text = '\\n\\n'\n            if (index === 0 || index === ret.children.length - 1) {\n              ret.children.splice(index, 1)\n            }\n          }\n        })\n      }\n      break\n    }\n\n    return node || next(element.childNodes) || []\n  }\n\n  /**\n   * Deserialize a `__decorator` type\n   * (an internal made up type to process decorators exclusively)\n   *\n   * @param decorator -\n   * @returns array of ...\n   */\n  deserializeDecorator = (decorator: PlaceholderDecorator): TypedObject[] => {\n    const {name} = decorator\n    const applyDecorator = (node: TypedObject) => {\n      if (isPlaceholderDecorator(node)) {\n        return this.deserializeDecorator(node)\n      } else if (isMinimalSpan(node)) {\n        node.marks = node.marks || []\n        if (node.text.trim()) {\n          // Only apply marks if this is an actual text\n          node.marks.unshift(name)\n        }\n      } else if ('children' in node && Array.isArray((node as PortableTextBlock).children)) {\n        const block = node as any\n        block.children = block.children.map(applyDecorator)\n      }\n      return node\n    }\n    return decorator.children.reduce((children, node) => {\n      const ret = applyDecorator(node)\n      if (Array.isArray(ret)) {\n        return children.concat(ret)\n      }\n      children.push(ret)\n      return children\n    }, [] as TypedObject[])\n  }\n\n  /**\n   * Deserialize a `__annotation` object.\n   * (an internal made up type to process annotations exclusively)\n   *\n   * @param annotation -\n   * @returns Array of...\n   */\n  deserializeAnnotation = (annotation: PlaceholderAnnotation): TypedObject[] => {\n    const {markDef} = annotation\n    this._markDefs.push(markDef)\n    const applyAnnotation = (node: TypedObject) => {\n      if (isPlaceholderAnnotation(node)) {\n        return this.deserializeAnnotation(node)\n      } else if (isMinimalSpan(node)) {\n        node.marks = node.marks || []\n        if (node.text.trim()) {\n          // Only apply marks if this is an actual text\n          node.marks.unshift(markDef._key)\n        }\n      } else if ('children' in node && Array.isArray((node as PortableTextBlock).children)) {\n        const block = node as any\n        block.children = block.children.map(applyAnnotation)\n      }\n      return node\n    }\n    return annotation.children.reduce((children, node) => {\n      const ret = applyAnnotation(node)\n      if (Array.isArray(ret)) {\n        return children.concat(ret)\n      }\n      children.push(ret)\n      return children\n    }, [] as TypedObject[])\n  }\n}\n","import {PortableTextTextBlock, PortableTextSpan, isPortableTextSpan} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {TypedObject} from '../types'\nimport {randomKey} from './randomKey'\n\n/**\n * Block normalization options\n *\n * @public\n */\nexport interface BlockNormalizationOptions {\n  /**\n   * Decorator names that are allowed within portable text blocks, eg `em`, `strong`\n   */\n  allowedDecorators?: string[]\n\n  /**\n   * Name of the portable text block type, if not `block`\n   */\n  blockTypeName?: string\n}\n\n/**\n * Normalizes a block by ensuring it has a `_key` property. If the block is a\n * portable text block, additional normalization is applied:\n *\n * - Ensures it has `children` and `markDefs` properties\n * - Ensures it has at least one child (adds an empty span if empty)\n * - Joins sibling spans that has the same marks\n * - Removes decorators that are not allowed according to the schema\n * - Removes marks that have no annotation definition\n *\n * @param node - The block to normalize\n * @param options - Options for normalization process. See {@link BlockNormalizationOptions}\n * @returns Normalized block\n * @public\n */\nexport function normalizeBlock(\n  node: TypedObject,\n  options: BlockNormalizationOptions = {}\n): Omit<TypedObject | PortableTextTextBlock<TypedObject | PortableTextSpan>, '_key'> & {\n  _key: string\n} {\n  if (node._type !== (options.blockTypeName || 'block')) {\n    return '_key' in node ? (node as TypedObject & {_key: string}) : {...node, _key: randomKey(12)}\n  }\n\n  const block: Omit<PortableTextTextBlock<TypedObject | PortableTextSpan>, 'style'> = {\n    _key: randomKey(12),\n    children: [],\n    markDefs: [],\n    ...node,\n  }\n\n  const lastChild = block.children[block.children.length - 1]\n  if (!lastChild) {\n    // A block must at least have an empty span type child\n    block.children = [\n      {\n        _type: 'span',\n        _key: `${block._key}${0}`,\n        text: '',\n        marks: [],\n      },\n    ]\n    return block\n  }\n\n  const usedMarkDefs: string[] = []\n  const allowedDecorators =\n    options.allowedDecorators && Array.isArray(options.allowedDecorators)\n      ? options.allowedDecorators\n      : false\n\n  block.children = block.children\n    .reduce((acc, child) => {\n      const previousChild = acc[acc.length - 1]\n      if (\n        previousChild &&\n        isPortableTextSpan(child) &&\n        isPortableTextSpan(previousChild) &&\n        isEqual(previousChild.marks, child.marks)\n      ) {\n        if (lastChild && lastChild === child && child.text === '' && block.children.length > 1) {\n          return acc\n        }\n\n        previousChild.text += child.text\n        return acc\n      }\n      acc.push(child)\n      return acc\n    }, [] as (TypedObject | PortableTextSpan)[])\n    .map((child, index) => {\n      if (!child) {\n        throw new Error('missing child')\n      }\n\n      child._key = `${block._key}${index}`\n      if (isPortableTextSpan(child)) {\n        if (!child.marks) {\n          child.marks = []\n        } else if (allowedDecorators) {\n          child.marks = child.marks.filter((mark) => {\n            const isAllowed = allowedDecorators.includes(mark)\n            const isUsed = block.markDefs?.some((def) => def._key === mark)\n            return isAllowed || isUsed\n          })\n        }\n\n        usedMarkDefs.push(...child.marks)\n      }\n\n      return child\n    })\n\n  // Remove leftover (unused) markDefs\n  block.markDefs = (block.markDefs || []).filter((markDef) => usedMarkDefs.includes(markDef._key))\n  return block\n}\n","import type {ArraySchemaType, PortableTextTextBlock} from '@sanity/types'\nimport blockContentTypeFeatures from './util/blockContentTypeFeatures'\nimport HtmlDeserializer from './HtmlDeserializer'\nimport {normalizeBlock} from './util/normalizeBlock'\nimport {BlockContentFeatures, HtmlDeserializerOptions, TypedObject} from './types'\n\n/**\n * Convert HTML to blocks respecting the block content type's schema\n *\n * @param html - The HTML to convert to blocks\n * @param blockContentType - A compiled version of the schema type for the block content\n * @param options - Options for deserializing HTML to blocks\n * @returns Array of blocks\n * @public\n */\nexport function htmlToBlocks(\n  html: string,\n  blockContentType: ArraySchemaType,\n  options: HtmlDeserializerOptions = {}\n): (TypedObject | PortableTextTextBlock)[] {\n  const deserializer = new HtmlDeserializer(blockContentType, options)\n  return deserializer.deserialize(html).map((block) => normalizeBlock(block))\n}\n\n/**\n * Normalize and extract features of an schema type containing a block type\n *\n * @param blockContentType - Schema type for the block type\n * @returns Returns the featureset of a compiled block content type.\n * @public\n */\nexport function getBlockContentFeatures(blockContentType: ArraySchemaType): BlockContentFeatures {\n  return blockContentTypeFeatures(blockContentType)\n}\n\nexport {normalizeBlock}\nexport {randomKey} from './util/randomKey'\nexport type {TypedObject, HtmlDeserializerOptions, BlockContentFeatures}\nexport type {\n  ResolvedAnnotationType,\n  DeserializerRule,\n  HtmlParser,\n  ArbitraryTypedObject,\n  BlockEditorSchemaProps,\n} from './types'\nexport type {BlockNormalizationOptions} from './util/normalizeBlock'\n"],"names":["isRecord$1","value","isPortableTextTextBlock","_type","Array","isArray","children","every","child","markDefs","def","style","isPortableTextSpan","text","marks","mark","isRecord","isObjectSchemaType","type","jsonType","isArraySchemaType","isTitledListValue","item","isSpanSchemaType","annotations","decorators","isBlockSchemaType","fields","maybeSpanChildren","maybeStyle","maybeList","isBlockChildrenObjectField","isBlockStyleObjectField","isBlockListObjectField","field","name","of","some","findBlockType","blockContentFeatures","blockContentType","_a","_b","Error","blockType","find","ofType","spanType","member","inlineObjectTypes","filter","inlineType","blockObjectTypes","memberType","styles","resolveEnabledStyles","resolveEnabledDecorators","resolveEnabledAnnotationTypes","lists","resolveEnabledListItems","types","block","span","inlineObjects","blockObjects","styleField","textStyles","getTitledListValuesFromEnumListOptions","options","length","map","annotation","title","icon","listField","listItems","list","toString","Object","prototype","resolveJsType","val","call","nodeType","whatwgRNG","rnds8","Uint8Array","getRandomValues","default","byteToHex","i","substring","randomKey","reduce","str","n","slice","BLOCK_DEFAULT_STYLE","DEFAULT_BLOCK","freeze","DEFAULT_SPAN","HTML_BLOCK_TAGS","p","blockquote","HTML_SPAN_TAGS","object","HTML_LIST_CONTAINER_TAGS","ol","ul","HTML_HEADER_TAGS","h1","h2","h3","h4","h5","h6","HTML_MISC_TAGS","br","HTML_DECORATOR_TAGS","b","strong","em","u","s","strike","del","code","HTML_LIST_ITEM_TAGS","li","level","listItem","ELEMENT_MAP","uniq","values","tag","_XPathResult","ANY_TYPE","NUMBER_TYPE","STRING_TYPE","BOOLEAN_TYPE","UNORDERED_NODE_ITERATOR_TYPE","ORDERED_NODE_ITERATOR_TYPE","UNORDERED_NODE_SNAPSHOT_TYPE","ORDERED_NODE_SNAPSHOT_TYPE","ANY_UNORDERED_NODE_TYPE","FIRST_ORDERED_NODE_TYPE","unwantedWordDocumentPaths","preprocessHTML","html","doc","_c","bodyTextNodes","evaluate","snapshotLength","node","snapshotItem","textContent","replace","newNode","createElement","appendChild","createTextNode","parentNode","replaceChild","removeChild","unwantedNodes","join","unwanted","WORD_HTML_REGEX","unwantedPaths","mappedPaths","elementMap","MsoTocHeading","MsoTitle","MsoToaHeading","MsoSubtitle","MsoSubtleEmphasis","MsoIntenseEmphasis","isWordHtml","test","preprocessWord","prefix","mappedElements","mappedElm","tags","className","Text","parentElement","document","parent","forEach","isGoogleDocsDocument","el","id","getAttribute","match","tagName","preprocessGDocs","body","firstElementChild","childNodes","elm","setAttribute","replaceWith","from","preprocessors","createRuleOptions","features","blockContentTypeFeatures","enabledBlockStyles","enabledSpanDecorators","enabledBlockAnnotations","toLowerCase","preprocess","parseHtml","compactHtml","trim","processor","defaultParseHtml","DOMParser","parseFromString","flattenNestedBlocks","blocks","depth","flattened","traverse","nodes","toRemove","push","splice","indexOf","nextSpan","index","next","prevSpan","prev","isWhiteSpaceChar","includes","trimWhitespace","isMinimalSpan","nextChild","prevChild","isEqual","ensureRootIsBlocks","memo","original","lastBlock","isNodeList","isMinimalBlock","isPlaceholderDecorator","isPlaceholderAnnotation","isElement","resolveListItem","listNodeTagName","listStyle","createHTMLRules","deserialize","isValidWhiteSpace","nextSibling","previousSibling","isValidText","nodeName","keys","localName","ownerDocument","cn","cloneNode","div","parentTag","decorator","linkEnabled","href","markDef","_key","LIST_CONTAINER_TAGS","isEmphasis","isStrong","isGoogleDocs","Boolean","getListItemStyle","getListItemLevel","getBlockStyle","childTag","firstChild","createGDocsRules","_blockContentType","innerText","levelMatch","levelNum","parseInt","isWordListElement","createWordRules","createRules","HtmlDeserializer","constructor","_markDefs","fragment","deserializeElements","concat","flatten","elements","element","deserializeElement","props","rules","rule","ret","deserializeDecorator","deserializeAnnotation","applyDecorator","unshift","applyAnnotation","standardRules","normalizeBlock","blockTypeName","lastChild","usedMarkDefs","allowedDecorators","acc","previousChild","isAllowed","isUsed","htmlToBlocks","deserializer","getBlockContentFeatures"],"mappings":"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"}