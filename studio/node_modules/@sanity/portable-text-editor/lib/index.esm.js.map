{"version":3,"file":"index.esm.js","sources":["../src/utils/schema.ts","../src/utils/getPortableTextMemberSchemaTypes.ts","../../../../node_modules/diff-match-patch/index.js","../src/patch/patches.ts","../src/utils/validateValue.ts","../src/utils/debug.ts","../src/utils/values.ts","../src/utils/weakMaps.ts","../src/constants.ts","../src/editor/hooks/usePortableTextEditor.ts","../src/editor/hooks/usePortableTextEditorSelection.ts","../src/editor/hooks/usePortableTextReadOnly.ts","../src/editor/hooks/usePortableTextEditorValue.ts","../src/utils/operationToPatches.ts","../src/utils/paths.ts","../src/utils/ranges.ts","../src/editor/plugins/createWithEditableAPI.ts","../src/editor/plugins/createWithMaxBlocks.ts","../src/utils/withPreserveKeys.ts","../src/editor/plugins/createWithObjectKeys.ts","../src/utils/withoutPatching.ts","../src/patch/arrayInsert.ts","../src/patch/array.ts","../src/patch/object.ts","../src/patch/primitive.ts","../src/patch/string.ts","../src/patch/applyPatch.ts","../src/utils/patchToOperations.ts","../src/editor/plugins/createWithUndoRedo.ts","../src/editor/plugins/createWithPatches.ts","../src/editor/plugins/createWithPlaceholderBlock.ts","../src/editor/plugins/createWithPortableTextBlockStyle.ts","../src/editor/plugins/createWithPortableTextLists.ts","../src/editor/plugins/createWithPortableTextMarkModel.ts","../src/editor/plugins/createWithPortableTextSelections.ts","../src/editor/plugins/createWithSchemaTypes.ts","../src/editor/plugins/createWithUtils.ts","../src/editor/plugins/createWithHotKeys.ts","../src/editor/plugins/createWithInsertData.ts","../src/editor/plugins/index.ts","../src/editor/PortableTextEditor.tsx","../src/utils/patches.ts","../src/utils/selection.ts","../src/editor/nodes/DefaultAnnotation.tsx","../src/editor/DraggableChild.tsx","../src/editor/Leaf.tsx","../src/editor/nodes/DefaultObject.tsx","../src/editor/nodes/index.ts","../src/editor/DraggableBlock.tsx","../src/editor/Element.tsx","../src/editor/hooks/useForwardedRef.ts","../src/editor/Editable.tsx"],"sourcesContent":["import Schema from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport function getPortableTextMemberSchemaTypes(\n  portableTextType: ArraySchemaType<PortableTextBlock>\n): PortableTextMemberSchemaTypes {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as BlockSchemaType | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find((field) => field.name === 'children') as\n    | {type: ArraySchemaType}\n    | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error('Valid types for block children not found in schema (required)')\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter((memberType) => memberType.name !== 'span') ||\n    []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter((field) => field.name !== blockType.name) ||\n    []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find((btField) => btField.name === 'style')\n  if (!styleField) {\n    throw new Error(\"A field with name 'style' is not defined in the block type (required).\")\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter((style: {value: string}) => style.value)\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\"\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find((btField) => btField.name === 'list')\n  if (!listField) {\n    throw new Error(\"A field with name 'list' is not defined in the block type (required).\")\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nvar diff_match_patch = function() {\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n};\n\n\n//  DIFF FUNCTIONS\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/**\n * Class representing one diff tuple.\n * ~Attempts to look like a two-element array (which is what this used to be).~\n * Constructor returns an actual two-element array, to allow destructing @JackuB\n * See https://github.com/JackuB/diff-match-patch/issues/14 for details\n * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n * @param {string} text Text to be deleted, inserted, or retained.\n * @constructor\n */\ndiff_match_patch.Diff = function(op, text) {\n  return [op, text];\n};\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number=} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n    opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));\n  }\n  if (commonsuffix) {\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n    deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1)];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),\n             new diff_match_patch.Diff(DIFF_EQUAL, shorttext),\n             new diff_match_patch.Diff(DIFF_INSERT,\n                 longtext.substring(i + shorttext.length))];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n            new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([new diff_match_patch.Diff(DIFF_EQUAL, mid_common)],\n                          diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert,\n                       count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var subDiff =\n              this.diff_main(text_delete, text_insert, false, deadline);\n          for (var j = subDiff.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, subDiff[j]);\n          }\n          pointer = pointer + subDiff.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop();  // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if ((new Date()).getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n          new diff_match_patch.Diff(DIFF_INSERT, text2)];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n    deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength == maxLines) {\n          // Bail out at 65535 because\n          // String.fromCharCode(65536) == String.fromCharCode(0)\n          line = text.substring(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  // Allocate 2/3rds of the space for text1, the rest for text2.\n  var maxLines = 40000;\n  var chars1 = diff_linesToCharsMunge_(text1);\n  maxLines = 65535;\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n};\n\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var i = 0; i < diffs.length; i++) {\n    var chars = diffs[i][1];\n    var text = [];\n    for (var j = 0; j < chars.length; j++) {\n      text[j] = lineArray[chars.charCodeAt(j)];\n    }\n    diffs[i][1] = text.join('');\n  }\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) ==\n        text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                               shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                               shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastEquality && (lastEquality.length <=\n          Math.max(length_insertions1, length_deletions1)) &&\n          (lastEquality.length <= Math.max(length_insertions2,\n                                           length_deletions2))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0;  // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastEquality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n        diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 ||\n            overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              insertion.substring(0, overlap_length1)));\n          diffs[pointer - 1][1] =\n              deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 ||\n            overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              deletion.substring(0, overlap_length2)));\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] =\n              insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] =\n              deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 &&\n        char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 &&\n        char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 &&\n        char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 &&\n        char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 &&\n        one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 &&\n        two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\n          (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastEquality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      post_ins = post_del = false;\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastEquality && ((pre_ins && pre_del && post_ins && post_del) ||\n                           ((lastEquality.length < this.Diff_EditCost / 2) &&\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;  // Throw away the equality we just deleted;\n        lastEquality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;  // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ?\n              equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n                    text_insert.substring(0, commonlength)));\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          pointer -= count_delete + count_insert;\n          diffs.splice(pointer, count_delete + count_insert);\n          if (text_delete.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_DELETE, text_delete));\n            pointer++;\n          }\n          if (text_insert.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_INSERT, text_insert));\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {  // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\n    var data = diffs[x][1];  // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\n  var pointer = 0;  // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] =\n              new diff_match_patch.Diff(DIFF_INSERT, decodeURI(param));\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n        // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_EQUAL, text);\n        } else {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_DELETE, text);\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                          tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer +\n        ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n\n//  MATCH FUNCTIONS\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + (proximity / dmp.Match_Distance);\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold =\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << (pattern.length - 1);\n  best_loc = -1;\n\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {  // First pass: exact match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n      } else {  // Subsequent passes: fuzzy match.\n        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n  }\n  return s;\n};\n\n\n//  PATCH FUNCTIONS\n\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  if (patch.start2 === null) {\n    throw Error('patch not initialized');\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\n         this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding,\n                             patch.start2 + patch.length1 + padding);\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, prefix));\n  }\n  // Add the suffix.\n  var suffix = text.substring(patch.start2 + patch.length1,\n                              patch.start2 + patch.length1 + padding);\n  if (suffix) {\n    patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, suffix));\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n  var text1, diffs;\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\n      typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */(a);\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n      typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n      typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n      opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return [];  // Get rid of the null case.\n  }\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n  var char_count1 = 0;  // Number of characters into the text1 string.\n  var char_count2 = 0;  // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                         postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) +\n                         postpatch_text.substring(char_count2 +\n                             diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin &&\n            patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // https://github.com/google/diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] =\n          new diff_match_patch.Diff(patch.diffs[y][0], patch.diffs[y][1]);\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                  expected_loc);\n      if (start_loc != -1) {\n        end_loc = this.match_main(text,\n            text1.substring(text1.length - this.Match_MaxBits),\n            expected_loc + text1.length - this.Match_MaxBits);\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) +\n               this.diff_text2(patches[x].diffs) +\n               text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (text1.length > this.Match_MaxBits &&\n            this.diff_levenshtein(diffs) / text1.length >\n            this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {  // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] +\n                     text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\n              text = text.substring(0, start_loc + index2) +\n                     text.substring(start_loc + this.diff_xIndex(diffs,\n                         index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.start1 -= paddingLength;  // Should be 0.\n    patch.start2 -= paddingLength;  // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n    var bigpatch = patches[x];\n    // Remove the big old patch.\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, precontext));\n      }\n      while (bigpatch.diffs.length !== 0 &&\n             patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                   patch.diffs[0][0] == DIFF_EQUAL &&\n                   diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0,\n              patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] =\n                bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      }\n      // Compute the head context for the next patch.\n      precontext = this.diff_text2(patch.diffs);\n      precontext =\n          precontext.substring(precontext.length - this.Patch_Margin);\n      // Append the end context for this patch.\n      var postcontext = this.diff_text1(bigpatch.diffs)\n                            .substring(0, this.Patch_Margin);\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n        if (patch.diffs.length !== 0 &&\n            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, postcontext));\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function(patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join('');\n};\n\n\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function(textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_DELETE, line));\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_INSERT, line));\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, line));\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n\n/**\n * Emulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indices are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = (this.start1 + 1) + ',' + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = (this.start2 + 1) + ',' + this.length2;\n  }\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n      case DIFF_DELETE:\n        op = '-';\n        break;\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n  return text.join('').replace(/%20/g, ' ');\n};\n\n\n// The following export code was added by @ForbesLindesay\nmodule.exports = diff_match_patch;\nmodule.exports['diff_match_patch'] = diff_match_patch;\nmodule.exports['DIFF_DELETE'] = DIFF_DELETE;\nmodule.exports['DIFF_INSERT'] = DIFF_INSERT;\nmodule.exports['DIFF_EQUAL'] = DIFF_EQUAL;","import {Path, PathSegment} from '@sanity/types'\nimport * as DMP from 'diff-match-patch'\n\nimport type {\n  SetIfMissingPatch,\n  InsertPatch,\n  InsertPosition,\n  SetPatch,\n  UnsetPatch,\n  DiffMatchPatch,\n} from '../types/patch'\n\nexport function setIfMissing(value: any, path: Path = []): SetIfMissingPatch {\n  return {\n    type: 'setIfMissing',\n    path,\n    value,\n  }\n}\n\n// eslint-disable-next-line new-cap\nconst dmp = new DMP.diff_match_patch()\n\nexport function diffMatchPatch(\n  currentValue: string,\n  nextValue: string,\n  path: Path = []\n): DiffMatchPatch {\n  const patch = dmp\n    .patch_make(currentValue, nextValue)\n    .map((_patch) => _patch.toString())\n    .join('')\n  return {type: 'diffMatchPatch', path, value: patch}\n}\n\nexport function insert(items: any[], position: InsertPosition, path: Path = []): InsertPatch {\n  return {\n    type: 'insert',\n    path,\n    position,\n    items,\n  }\n}\n\nexport function set(value: any, path: Path = []): SetPatch {\n  return {type: 'set', path, value}\n}\n\nexport function unset(path: Path = []): UnsetPatch {\n  return {type: 'unset', path}\n}\n\nexport function prefixPath<T extends {path: Path}>(patch: T, segment: PathSegment): T {\n  return {\n    ...patch,\n    path: [segment, ...patch.path],\n  }\n}\n","import {PortableTextBlock, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {flatten, isObject, uniq} from 'lodash'\nimport {set, unset, insert} from '../patch/PatchEvent'\nimport {InvalidValueResolution, PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string\n): {valid: boolean; resolution: InvalidValueResolution | null} {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [types.span.name, ...types.inlineObjects.map((t) => t.name)]\n  const validBlockTypes = [types.block.name, ...types.blockObjects.map((t) => t.name)]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null}\n  }\n  // Only lengthy arrays are allowed \"inside\" the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description: 'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n      },\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      if (!isObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n        }\n        return true\n      }\n      // Test that every block has a _key\n      if (!blk._key) {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n          }\n          return true\n        }\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n        }\n        return true\n      }\n      // Test that every child in text block is valid\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has children\n        if (!textBlock.children) {\n          resolution = {\n            patches: [unset([{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' is missing required key 'children'.`,\n            action: 'Remove the block',\n            item: textBlock,\n          }\n          return true\n        }\n        // Test that markDefs exists\n        if (!blk.markDefs) {\n          resolution = {\n            patches: [set({...textBlock, markDefs: []}, [{_key: textBlock._key}])],\n            description: `Block is missing required key 'markDefs'.`,\n            action: 'Add empty markDefs array',\n            item: textBlock,\n          }\n          return true\n        }\n\n        // // Test that every span has .marks\n        // const spansWithUndefinedMarks = blk.children\n        //   .filter(cld => cld._type === types.span.name)\n        //   .filter(cld => typeof cld.marks === 'undefined')\n\n        // if (spansWithUndefinedMarks.length > 0) {\n        //   const first = spansWithUndefinedMarks[0]\n        //   resolution = {\n        //     patches: [\n        //       set({...first, marks: []}, [{_key: blk._key}, 'children', {_key: first._key}])\n        //     ],\n        //     description: `Span has no .marks array`,\n        //     action: 'Add empty marks array',\n        //     item: first\n        //   }\n        //   return true\n        // }\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || [])\n          ) as string[]\n        )\n        // // Test that all markDefs are in use\n        // if (blk.markDefs && blk.markDefs.length > 0) {\n        //   const unusedMarkDefs: string[] = uniq(\n        //     blk.markDefs.map(def => def._key).filter(key => !allUsedMarks.includes(key))\n        //   )\n        //   if (unusedMarkDefs.length > 0) {\n        //     resolution = {\n        //       patches: unusedMarkDefs.map(key =>\n        //         unset([{_key: blk._key}, 'markDefs', {_key: key}])\n        //       ),\n        //       description: `Block has unused mark definitions: ${unusedMarkDefs.join(', ')}.`,\n        //       action: 'Remove unused markDefs',\n        //       item: blk\n        //     }\n        //     return true\n        //   }\n        // }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.value).includes(mark)\n        )\n        const orphanedMarks = annotationMarks.filter((mark) =>\n          textBlock.markDefs ? !textBlock.markDefs.find((def) => def._key === mark) : false\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark))\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            resolution = {\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter((cMrk) => !orphanedMarks.includes(cMrk)),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks']\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphanedMarks.join(\n                ', '\n              )}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n            }\n            return true\n          }\n        }\n\n        // Test that children is lengthy\n        if (textBlock.children && textBlock.children.length === 0) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n          }\n          resolution = {\n            patches: [insert([newSpan], 'after', [{_key: blk._key}, 'children', 0])],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n          }\n          return true\n        }\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!child._key) {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                patches: [set(newChild, [{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n              }\n              return true\n            }\n            // Verify that children have valid types\n            if (!child._type || validChildTypes.includes(child._type) === false) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', {_key: child._key}])],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n              }\n              return true\n            }\n            // Verify that spans have .text\n            if (child._type === types.span.name && child.text === undefined) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing text property!`,\n                action: `Write an empty .text to the object`,\n                item: blk,\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution}\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import {isEqual} from 'lodash'\nimport {Node, Element, Text, Descendant} from 'slate'\nimport {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {PortableTextMemberSchemaTypes} from '../types/editor'\n\nconst EMPTY_MARKDEFS: PortableTextObject[] = []\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: PortableTextMemberSchemaTypes},\n  keyMap: Record<string, any> = {}\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const voidChildren = [{_key: `${_key}-void-child`, _type: 'span', text: '', marks: []}]\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const children = textBlock.children.map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: voidChildren,\n                value: cRest,\n                __inline: true,\n              },\n              keyMap\n            )\n          }\n          // Original object\n          return child\n        })\n        if (!hasMissingStyle && !hasMissingMarkDefs && !hasInlines && Element.isElement(block)) {\n          // Original object\n          return block\n        }\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].value\n        }\n        if (hasMissingMarkDefs) {\n          rest.markDefs = EMPTY_MARKDEFS\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: voidChildren,\n          value: rest,\n        },\n        keyMap\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: (Node | Partial<Node>)[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {}\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (_type === textBlockType && 'children' in block && Array.isArray(block.children) && _key) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {value: v, _key: k, _type: t, __inline: _i, children: _c, ...rest} = child\n          return keepObjectEquality({...rest, ...v, _key: k as string, _type: t as string}, keyMap)\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality({...block, children, _key, _type}, keyMap) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  types: PortableTextMemberSchemaTypes\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === types.block.name &&\n      'style' in children[0] &&\n      children[0].style === types.styles[0].value &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[]\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) => Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment)\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) => isEqual({_key: child._key}, secondPathSegment))\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[]\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import {Editor, Element, Range, Text} from 'slate'\nimport {EditorSelection} from '..'\n\n/**\n * Dragging\n */\n\n// Is the editor dragging something?\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\n// Is the editor dragging a element?\nexport const IS_DRAGGING_BLOCK_ELEMENT: WeakMap<Editor, Element> = new WeakMap()\nexport const IS_DRAGGING_CHILD_ELEMENT: WeakMap<Editor, Element | Text> = new WeakMap()\n// When dragging elements, this will be the target element\nexport const IS_DRAGGING_ELEMENT_TARGET: WeakMap<Editor, Element> = new WeakMap()\nexport const IS_DRAGGING_ELEMENT_RANGE: WeakMap<Editor, Range> = new WeakMap()\n// Target position for dragging over a block\nexport const IS_DRAGGING_BLOCK_TARGET_POSITION: WeakMap<Editor, 'top' | 'bottom'> = new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> = new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> = new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<Range, EditorSelection>()\n","/**\n * Debounce time for flushing local patches (ms since user haven't produced a patch)\n * (lower time for tests to speed them up)\n */\nexport const FLUSH_PATCHES_DEBOUNCE_MS = process.env.NODE_ENV === 'test' ? 200 : 1000\n","import {createContext, useContext} from 'react'\n\nimport {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\n\nexport const PortableTextEditorContext = createContext<PortableTextEditor | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\n\nexport const usePortableTextEditor = () => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`\n    )\n  }\n\n  return editor\n}\n","import {createContext, useContext} from 'react'\nimport {EditorSelection} from '../../types/editor'\n\n/**\n * A React context for sharing the editor selection.\n */\n\nexport const PortableTextEditorSelectionContext = createContext<EditorSelection | null>(null)\n\n/**\n * Get the current editor selection from the React context.\n */\n\nexport const usePortableTextEditorSelection = () => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`\n    )\n  }\n  return selection\n}\n","import {createContext, useContext} from 'react'\n\n/**\n * A React context for sharing the editor's readOnly status.\n */\n\nexport const PortableTextEditorReadOnlyContext = createContext<boolean>(false)\n\n/**\n * Get the current editor selection from the React context.\n */\n\nexport const usePortableTextEditorReadOnlyStatus = (): boolean => {\n  const readOnly = useContext(PortableTextEditorReadOnlyContext)\n\n  if (readOnly === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorReadOnly\\` hook must be used inside the <PortableTextEditor> component's context.`\n    )\n  }\n  return readOnly\n}\n","import {PortableTextBlock} from '@sanity/types'\nimport {createContext, useContext} from 'react'\n\n/**\n * A React context for sharing the editor value.\n */\n\nexport const PortableTextEditorValueContext = createContext<PortableTextBlock[] | undefined>(\n  undefined\n)\n\n/**\n * Get the current editor value from the React context.\n */\n\nexport const usePortableTextEditorValue = () => {\n  return useContext(PortableTextEditorValueContext)\n}\n","import {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {omitBy, isUndefined, get} from 'lodash'\nimport {\n  Editor,\n  MoveNodeOperation,\n  InsertTextOperation,\n  RemoveTextOperation,\n  SetNodeOperation,\n  InsertNodeOperation,\n  SplitNodeOperation,\n  RemoveNodeOperation,\n  MergeNodeOperation,\n  Descendant,\n} from 'slate'\nimport {set, insert, unset, diffMatchPatch, setIfMissing} from '../patch/PatchEvent'\nimport type {Patch, InsertPosition} from '../types/patch'\nimport {PatchFunctions} from '../editor/plugins/createWithPatches'\nimport {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {fromSlateValue} from './values'\nimport {debugWithName} from './debug'\n\nconst debug = debugWithName('operationToPatches')\n\nexport function createOperationToPatches(types: PortableTextMemberSchemaTypes): PatchFunctions {\n  const textBlockName = types.block.name\n  function insertTextPatch(\n    editor: Editor,\n    operation: InsertTextOperation,\n    beforeValue: Descendant[]\n  ) {\n    debug('Operation', JSON.stringify(operation, null, 2))\n    const block =\n      editor.isTextBlock(editor.children[operation.path[0]]) && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      editor.isTextSpan(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as PortableTextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [{_key: block._key}, 'children', {_key: textChild._key}, 'text']\n    const prevBlock = beforeValue[operation.path[0]]\n    const prevChild = editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevChild) ? prevChild.text : ''\n    const patch = diffMatchPatch(prevText, textChild.text, path)\n    return patch.value.length ? [patch] : []\n  }\n\n  function removeTextPatch(\n    editor: Editor,\n    operation: RemoveTextOperation,\n    beforeValue: Descendant[]\n  ) {\n    const block = editor && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const child = (editor.isTextBlock(block) && block.children[operation.path[1]]) || undefined\n    const textChild: PortableTextSpan | undefined = editor.isTextSpan(child) ? child : undefined\n    if (child && !textChild) {\n      throw new Error('Expected span')\n    }\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [{_key: block._key}, 'children', {_key: textChild._key}, 'text']\n    const beforeBlock = beforeValue[operation.path[0]]\n    const prevTextChild = editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text\n    const patch = diffMatchPatch(prevText || '', textChild.text, path)\n    return patch.value ? [patch] : []\n  }\n\n  function setNodePatch(editor: Editor, operation: SetNodeOperation) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]]\n      if (typeof block._key !== 'string') {\n        throw new Error('Expected block to have a _key')\n      }\n      const setNode = omitBy(\n        {...editor.children[operation.path[0]], ...operation.newProperties},\n        isUndefined\n      )\n      return [set(fromSlateValue([setNode], textBlockName)[0], [{_key: block._key}])]\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]]\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]]\n        if (child) {\n          const blockKey = block._key\n          const childKey = child._key\n          const patches: Patch[] = []\n          Object.keys(operation.newProperties).forEach((keyName) => {\n            const val = get(operation.newProperties, keyName)\n            patches.push(set(val, [{_key: blockKey}, 'children', {_key: childKey}, keyName]))\n          })\n          return patches\n        }\n        throw new Error('Could not find a valid child')\n      }\n      throw new Error('Could not find a valid block')\n    } else {\n      throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`)\n    }\n  }\n\n  function insertNodePatch(\n    editor: Editor,\n    operation: InsertNodeOperation,\n    beforeValue: Descendant[]\n  ): Patch[] {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? 'before' : 'after'\n      const beforeBlock = beforeValue[operation.path[0] - 1]\n      const targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key\n      if (targetKey) {\n        return [\n          insert([fromSlateValue([operation.node], textBlockName)[0]], position, [\n            {_key: targetKey},\n          ]),\n        ]\n      }\n      return [\n        setIfMissing(beforeValue, []),\n        insert([fromSlateValue([operation.node], textBlockName)[0]], 'before', [operation.path[0]]),\n      ]\n    } else if (operation.path.length === 2 && editor.children[operation.path[0]]) {\n      if (!editor.isTextBlock(block)) {\n        throw new Error('Invalid block')\n      }\n      const position =\n        block.children.length === 0 || !block.children[operation.path[1] - 1] ? 'before' : 'after'\n      const blk = fromSlateValue(\n        [\n          {\n            _key: 'bogus',\n            _type: textBlockName,\n            children: [operation.node as Descendant],\n          },\n        ],\n        textBlockName\n      )[0] as PortableTextTextBlock\n      const child = blk.children[0]\n      return [\n        insert([child], position, [\n          {_key: block._key},\n          'children',\n          block.children.length <= 1 || !block.children[operation.path[1] - 1]\n            ? 0\n            : {_key: block.children[operation.path[1] - 1]._key},\n        ]),\n      ]\n    }\n    throw new Error(\n      `Unexpected path encountered: ${JSON.stringify(operation.path)} - ${JSON.stringify(\n        beforeValue\n      )}`\n    )\n  }\n\n  function splitNodePatch(\n    editor: Editor,\n    operation: SplitNodeOperation,\n    beforeValue: Descendant[]\n  ) {\n    const patches: Patch[] = []\n    const splitBlock = editor.children[operation.path[0]]\n    if (!editor.isTextBlock(splitBlock)) {\n      throw new Error(\n        `Block with path ${JSON.stringify(\n          operation.path[0]\n        )} is not a text block and can't be split`\n      )\n    }\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]]\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue(\n          [editor.children[operation.path[0] + 1]],\n          textBlockName\n        )[0]\n        if (targetValue) {\n          patches.push(insert([targetValue], 'after', [{_key: splitBlock._key}]))\n          const spansToUnset = oldBlock.children.slice(operation.position)\n          spansToUnset.forEach((span) => {\n            const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n            patches.push(unset(path))\n          })\n        }\n      }\n      return patches\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]]\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = (\n          fromSlateValue(\n            [\n              {\n                ...splitBlock,\n                children: splitBlock.children.slice(operation.path[1] + 1, operation.path[1] + 2),\n              } as Descendant,\n            ],\n            textBlockName\n          )[0] as PortableTextTextBlock\n        ).children\n\n        patches.push(\n          insert(targetSpans, 'after', [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n          ])\n        )\n        patches.push(\n          set(splitSpan.text, [{_key: splitBlock._key}, 'children', {_key: splitSpan._key}, 'text'])\n        )\n      }\n      return patches\n    }\n    return patches\n  }\n\n  function removeNodePatch(\n    editor: Editor,\n    operation: RemoveNodeOperation,\n    beforeValue: Descendant[]\n  ) {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      // Remove a single block\n      if (block && block._key) {\n        return [unset([{_key: block._key}])]\n      }\n      throw new Error('Block not found')\n    } else if (operation.path.length === 2) {\n      const spanToRemove =\n        editor.isTextBlock(block) && block.children && block.children[operation.path[1]]\n      if (spanToRemove) {\n        return [unset([{_key: block._key}, 'children', {_key: spanToRemove._key}])]\n      }\n      // If it was not there before, do nothing\n      debug('Span not found in editor trying to remove node')\n      return []\n    } else {\n      throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`)\n    }\n  }\n\n  function mergeNodePatch(\n    editor: Editor,\n    operation: MergeNodeOperation,\n    beforeValue: Descendant[]\n  ) {\n    const patches: Patch[] = []\n    if (operation.path.length === 1) {\n      const block = beforeValue[operation.path[0]]\n      const targetKey = block && block._key\n      if (targetKey) {\n        const newBlock = fromSlateValue([editor.children[operation.path[0] - 1]], textBlockName)[0]\n        patches.push(set(newBlock, [{_key: newBlock._key}]))\n        patches.push(unset([{_key: targetKey}]))\n      } else {\n        throw new Error('Target key not found!')\n      }\n    } else if (operation.path.length === 2) {\n      const block = beforeValue[operation.path[0]]\n      const mergedSpan =\n        (editor.isTextBlock(block) && block.children[operation.path[1]]) || undefined\n      const targetBlock = editor.children[operation.path[0]]\n      if (!editor.isTextBlock(targetBlock)) {\n        throw new Error('Invalid block')\n      }\n      const targetSpan = targetBlock.children[operation.path[1] - 1]\n      if (editor.isTextSpan(targetSpan)) {\n        // Set the merged span with it's new value\n        patches.push(\n          set(targetSpan.text, [{_key: block._key}, 'children', {_key: targetSpan._key}, 'text'])\n        )\n        if (mergedSpan) {\n          patches.push(unset([{_key: block._key}, 'children', {_key: mergedSpan._key}]))\n        }\n      }\n    } else {\n      throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`)\n    }\n    return patches\n  }\n\n  function moveNodePatch(editor: Editor, operation: MoveNodeOperation, beforeValue: Descendant[]) {\n    const patches: Patch[] = []\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = beforeValue[operation.newPath[0]]\n    if (operation.path.length === 1) {\n      const position: InsertPosition = operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n      patches.push(unset([{_key: block._key}]))\n      patches.push(\n        insert([fromSlateValue([block], textBlockName)[0]], position, [{_key: targetBlock._key}])\n      )\n    } else if (\n      operation.path.length === 2 &&\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(targetBlock)\n    ) {\n      const child = block.children[operation.path[1]]\n      const targetChild = targetBlock.children[operation.newPath[1]]\n      const position = operation.newPath[1] === targetBlock.children.length ? 'after' : 'before'\n      const childToInsert = (fromSlateValue([block], textBlockName)[0] as PortableTextTextBlock)\n        .children[operation.path[1]]\n      patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n      patches.push(\n        insert([childToInsert], position, [\n          {_key: targetBlock._key},\n          'children',\n          {_key: targetChild._key},\n        ])\n      )\n    }\n    return patches\n  }\n\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch,\n  }\n}\n","import {isEqual} from 'lodash'\nimport {Editor, Point, Path as SlatePath, Element} from 'slate'\nimport {isKeySegment, Path, PortableTextBlock} from '@sanity/types'\nimport {EditorSelectionPoint, PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport function createKeyedPath(\n  point: Point,\n  value: PortableTextBlock[] | undefined,\n  types: PortableTextMemberSchemaTypes\n): Path | null {\n  const blockPath = [point.path[0]]\n  if (!value) {\n    return null\n  }\n  const block = value[blockPath[0]]\n  if (!block) {\n    return null\n  }\n  const keyedBlockPath = [{_key: block._key}]\n  if (block._type !== types.block.name) {\n    return keyedBlockPath as Path\n  }\n  let keyedChildPath\n  const childPath = point.path.slice(0, 2)\n  const child = Array.isArray(block.children) && block.children[childPath[1]]\n  if (child) {\n    keyedChildPath = ['children', {_key: child._key}]\n  }\n  return (keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath) as Path\n}\n\nexport function createArrayedPath(point: EditorSelectionPoint, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) => isKeySegment(point.path[0]) && n._key === point.path[0]._key,\n    })\n  )[0] || [undefined, undefined]\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n  if (editor.isVoid(block)) {\n    return blockPath\n  }\n  const childPath = [point.path[2]]\n  const childIndex = block.children.findIndex((child) => isEqual([{_key: child._key}], childPath))\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n  return blockPath\n}\n","import {PortableTextBlock} from '@sanity/types'\nimport {BaseRange, Editor, Range} from 'slate'\nimport {EditorSelection, EditorSelectionPoint, PortableTextMemberSchemaTypes} from '../types/editor'\nimport {createArrayedPath, createKeyedPath} from './paths'\n\nexport function toPortableTextRange(\n  value: PortableTextBlock[] | undefined,\n  range: BaseRange | Partial<BaseRange> | null,\n  types: PortableTextMemberSchemaTypes\n): EditorSelection {\n  if (!range) {\n    return null\n  }\n  let anchor: EditorSelectionPoint | null = null\n  let focus: EditorSelectionPoint | null = null\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types)\n  if (anchorPath && range.anchor) {\n    anchor = {\n      path: anchorPath,\n      offset: range.anchor.offset,\n    }\n  }\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types)\n  if (focusPath && range.focus) {\n    focus = {\n      path: focusPath,\n      offset: range.focus.offset,\n    }\n  }\n  return anchor && focus ? {anchor, focus} : null\n}\n\nexport function toSlateRange(selection: EditorSelection, editor: Editor): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: createArrayedPath(selection.anchor, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: createArrayedPath(selection.focus, editor),\n    offset: selection.focus.offset,\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n","import {Text, Range, Transforms, Editor, Element as SlateElement, Node} from 'slate'\nimport {\n  ObjectSchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  SchemaType,\n} from '@sanity/types'\nimport {ReactEditor} from '@sanity/slate-react'\nimport {DOMNode} from '@sanity/slate-react/dist/utils/dom'\nimport {\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {toSlateValue, fromSlateValue} from '../../utils/values'\nimport {toSlateRange, toPortableTextRange} from '../../utils/ranges'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nimport {debugWithName} from '../../utils/debug'\nimport {KEY_TO_VALUE_ELEMENT, SLATE_TO_PORTABLE_TEXT_RANGE} from '../../utils/weakMaps'\n\nconst debug = debugWithName('API:editable')\n\nexport function createWithEditableAPI(\n  portableTextEditor: PortableTextEditor,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string\n) {\n  return function withEditableAPI(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    portableTextEditor.setEditable({\n      focus: (): void => {\n        // Make a selection if missing\n        if (!editor.selection) {\n          const point = {path: [0, 0], offset: 0}\n          Transforms.select(editor, {focus: point, anchor: point})\n          editor.onChange()\n        }\n        ReactEditor.focus(editor)\n      },\n      blur: (): void => {\n        ReactEditor.blur(editor)\n      },\n      toggleMark: (mark: string): void => {\n        editor.pteToggleMark(mark)\n      },\n      toggleList: (listStyle: string): void => {\n        editor.pteToggleListItem(listStyle)\n      },\n      toggleBlockStyle: (blockStyle: string): void => {\n        editor.pteToggleBlockStyle(blockStyle)\n      },\n      isMarkActive: (mark: string): boolean => {\n        // Try/catch this, as Slate may error because the selection is currently wrong\n        // TODO: catch only relevant error from Slate\n        try {\n          return editor.pteIsMarkActive(mark)\n        } catch (err) {\n          console.warn(err)\n          return false\n        }\n      },\n      marks: (): string[] => {\n        return (\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        )\n      },\n      undo: (): void => editor.undo(),\n      redo: (): void => editor.redo(),\n      select: (selection: EditorSelection): void => {\n        const slateSelection = toSlateRange(selection, editor)\n        if (slateSelection) {\n          Transforms.select(editor, slateSelection)\n        } else {\n          Transforms.deselect(editor)\n        }\n        editor.onChange()\n      },\n      focusBlock: (): PortableTextBlock | undefined => {\n        if (editor.selection) {\n          // Try/catch this, as Slate may error because the selection is currently wrong\n          // TODO: catch only relevant error from Slate\n          try {\n            const [block] = Array.from(\n              Editor.nodes(editor, {\n                at: editor.selection.focus,\n                match: (n) => Editor.isBlock(editor, n),\n              })\n            )[0] || [undefined]\n            if (block) {\n              return fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0]\n            }\n          } catch (err) {\n            return undefined\n          }\n        }\n        return undefined\n      },\n      focusChild: (): PortableTextChild | undefined => {\n        if (editor.selection) {\n          try {\n            const [node] = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: editor.selection.focus,\n                match: (n) => n._type !== undefined,\n                voids: true,\n              })\n            )[0] || [undefined]\n            if (node && !Editor.isBlock(editor, node)) {\n              const pseudoBlock: PortableTextBlock = {\n                _key: 'pseudo',\n                _type: types.block.name,\n                children: [node],\n              }\n              const blocks = fromSlateValue(\n                [pseudoBlock],\n                types.block.name,\n                KEY_TO_VALUE_ELEMENT.get(editor)\n              )\n              if (editor.isTextBlock(blocks[0])) {\n                return blocks[0].children[0]\n              }\n            }\n          } catch (err) {\n            return undefined\n          }\n        }\n        return undefined\n      },\n      insertChild: (type: SchemaType, value?: {[prop: string]: any}): Path => {\n        if (!editor.selection) {\n          throw new Error('The editor has no selection')\n        }\n        const [focusBlock] = Array.from(\n          Editor.nodes(editor, {\n            at: editor.selection.focus,\n            match: (n) => Editor.isBlock(editor, n),\n          })\n        )[0] || [undefined]\n        if (!focusBlock) {\n          throw new Error('No focus block')\n        }\n        if (focusBlock && Editor.isVoid(editor, focusBlock)) {\n          throw new Error(\"Can't insert childs into block objects\")\n        }\n        const block = toSlateValue(\n          [\n            {\n              _key: keyGenerator(),\n              _type: types.block.name,\n              children: [\n                {\n                  _key: keyGenerator(),\n                  _type: type.name,\n                  ...(value ? value : {}),\n                },\n              ],\n            },\n          ],\n          portableTextEditor\n        )[0] as unknown as SlateElement\n        const child = block.children[0]\n        Editor.insertNode(editor, child as Node)\n        editor.onChange()\n        return (\n          toPortableTextRange(\n            fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n            editor.selection,\n            types\n          )?.focus.path || []\n        )\n      },\n      insertBlock: (type: SchemaType, value?: {[prop: string]: any}): Path => {\n        if (!editor.selection) {\n          throw new Error('The editor has no selection')\n        }\n        const block = toSlateValue(\n          [\n            {\n              _key: keyGenerator(),\n              _type: type.name,\n              ...(value ? value : {}),\n            },\n          ],\n          portableTextEditor\n        )[0] as unknown as Node\n        Editor.insertNode(editor, block)\n        editor.onChange()\n        return (\n          toPortableTextRange(\n            fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n            editor.selection,\n            types\n          )?.focus.path || []\n        )\n      },\n      hasBlockStyle: (style: string): boolean => {\n        try {\n          return editor.pteHasBlockStyle(style)\n        } catch (err) {\n          // This is fine.\n          // debug(err)\n          return false\n        }\n      },\n      hasListStyle: (listStyle: string): boolean => {\n        try {\n          return editor.pteHasListStyle(listStyle)\n        } catch (err) {\n          // This is fine.\n          // debug(err)\n          return false\n        }\n      },\n      isVoid: (element: PortableTextBlock | PortableTextChild) => {\n        return ![types.block.name, types.span.name].includes(element._type)\n      },\n      findByPath: (\n        path: Path\n      ): [PortableTextBlock | PortableTextChild | undefined, Path | undefined] => {\n        const slatePath = toSlateRange(\n          {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n          editor\n        )\n        if (slatePath) {\n          const [block, blockPath] = Editor.node(editor, slatePath.focus.path.slice(0, 1))\n          if (block && blockPath && typeof block._key === 'string') {\n            if (path.length === 1 && slatePath.focus.path.length === 1) {\n              return [fromSlateValue([block], types.block.name)[0], [{_key: block._key}]]\n            }\n            const ptBlock = fromSlateValue(\n              [block],\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor)\n            )[0]\n            if (editor.isTextBlock(ptBlock)) {\n              const ptChild = ptBlock.children[slatePath.focus.path[1]]\n              if (ptChild) {\n                return [ptChild, [{_key: block._key}, 'children', {_key: ptChild._key}]]\n              }\n            }\n          }\n        }\n        return [undefined, undefined]\n      },\n      findDOMNode: (element: PortableTextBlock | PortableTextChild): DOMNode | undefined => {\n        let node: DOMNode | undefined\n        try {\n          const [item] = Array.from(\n            Editor.nodes(editor, {\n              at: [],\n              match: (n) => n._key === element._key,\n            }) || []\n          )[0] || [undefined]\n          node = ReactEditor.toDOMNode(editor, item)\n        } catch (err) {\n          // Nothing\n        }\n        return node\n      },\n      activeAnnotations: (): PortableTextObject[] => {\n        if (!editor.selection || editor.selection.focus.path.length < 2) {\n          return []\n        }\n        try {\n          const activeAnnotations: PortableTextObject[] = []\n          const spans = Editor.nodes(editor, {\n            at: editor.selection,\n            match: (node) =>\n              Text.isText(node) &&\n              node.marks !== undefined &&\n              Array.isArray(node.marks) &&\n              node.marks.length > 0,\n          })\n          for (const [span, path] of spans) {\n            const [block] = Editor.node(editor, path, {depth: 1})\n            if (editor.isTextBlock(block)) {\n              block.markDefs?.forEach((def) => {\n                if (\n                  Text.isText(span) &&\n                  span.marks &&\n                  Array.isArray(span.marks) &&\n                  span.marks.includes(def._key)\n                ) {\n                  activeAnnotations.push(def)\n                }\n              })\n            }\n          }\n          return activeAnnotations\n        } catch (err) {\n          return []\n        }\n      },\n      addAnnotation: (\n        type: ObjectSchemaType,\n        value?: {[prop: string]: unknown}\n      ): {spanPath: Path; markDefPath: Path} | undefined => {\n        const {selection} = editor\n        if (selection) {\n          const [block] = Editor.node(editor, selection.focus, {depth: 1})\n          if (SlateElement.isElement(block) && block._type === types.block.name) {\n            const annotationKey = keyGenerator()\n            if (editor.isTextBlock(block)) {\n              Transforms.setNodes(\n                editor,\n                {\n                  markDefs: [\n                    ...(block.markDefs || []),\n                    {_type: type.name, _key: annotationKey, ...value} as PortableTextObject,\n                  ],\n                },\n                {at: selection.focus}\n              )\n              editor.onChange()\n              if (Range.isCollapsed(selection)) {\n                editor.pteExpandToWord()\n                editor.onChange()\n              }\n              const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n              if (editor.selection) {\n                Editor.withoutNormalizing(editor, () => {\n                  // Split if needed\n                  Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n                  if (editor.selection && Text.isText(textNode)) {\n                    Transforms.setNodes(\n                      editor,\n                      {\n                        marks: [...((textNode.marks || []) as string[]), annotationKey],\n                      },\n                      {\n                        at: editor.selection,\n                        match: (n) => n._type === types.span.name,\n                      }\n                    )\n                    editor.onChange()\n                  }\n                })\n                Editor.normalize(editor)\n                editor.onChange()\n                const newSelection = toPortableTextRange(\n                  fromSlateValue(\n                    editor.children,\n                    types.block.name,\n                    KEY_TO_VALUE_ELEMENT.get(editor)\n                  ),\n                  editor.selection,\n                  types\n                )\n                // eslint-disable-next-line max-depth\n                if (newSelection && typeof block._key === 'string') {\n                  // Insert an empty string to continue writing non-annotated text\n                  Editor.withoutNormalizing(editor, () => {\n                    if (editor.selection) {\n                      Transforms.insertNodes(\n                        editor,\n                        [{_type: 'span', text: '', marks: [], _key: keyGenerator()}],\n                        {\n                          at: Range.end(editor.selection),\n                        }\n                      )\n                      editor.onChange()\n                    }\n                  })\n                  return {\n                    spanPath: newSelection.focus.path,\n                    markDefPath: [{_key: block._key}, 'markDefs', {_key: annotationKey}],\n                  }\n                }\n              }\n            }\n          }\n        }\n        return undefined\n      },\n      delete: (selection: EditorSelection, options?: EditableAPIDeleteOptions): void => {\n        if (selection) {\n          const range = toSlateRange(selection, editor)\n          if (range) {\n            if (!options?.mode || options?.mode === 'selected') {\n              debug(`Deleting content in selection`)\n              Transforms.delete(editor, {\n                at: range,\n                hanging: true,\n                voids: true,\n              })\n              editor.onChange()\n              return\n            }\n            const nodes = Editor.nodes(editor, {\n              at: range,\n              match: (node) => {\n                if (options?.mode === 'blocks') {\n                  debug(`Deleting blocks touched by selection`)\n                  return (\n                    editor.isTextBlock(node) ||\n                    (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                  )\n                }\n                debug(`Deleting children touched by selection`)\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n            const nodeAndPaths = [...nodes]\n            nodeAndPaths.forEach(([, p]) => {\n              Transforms.removeNodes(editor, {\n                at: p,\n                voids: true,\n                hanging: true,\n              })\n            })\n            editor.onChange()\n          }\n        }\n      },\n      removeAnnotation: (type: ObjectSchemaType): void => {\n        let {selection} = editor\n        debug('Removing annotation', type)\n        if (selection) {\n          // Select the whole annotation if collapsed\n          if (Range.isCollapsed(selection)) {\n            const [node, nodePath] = Editor.node(editor, selection, {depth: 2})\n            if (Text.isText(node) && node.marks && typeof node.text === 'string') {\n              Transforms.select(editor, nodePath)\n              selection = editor.selection\n            }\n          }\n          // Do this without normalization or span references will be unstable!\n          Editor.withoutNormalizing(editor, () => {\n            if (selection && Range.isExpanded(selection)) {\n              selection = editor.selection\n              if (!selection) {\n                return\n              }\n              // Split the span first\n              Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n              editor.onChange()\n\n              // Everything in the selection which has marks\n              const spans = [\n                ...Editor.nodes(editor, {\n                  at: selection,\n                  match: (node) =>\n                    Text.isText(node) &&\n                    node.marks !== undefined &&\n                    Array.isArray(node.marks) &&\n                    node.marks.length > 0,\n                }),\n              ]\n              spans.forEach(([span, path]) => {\n                const [block] = Editor.node(editor, path, {depth: 1})\n                if (editor.isTextBlock(block)) {\n                  block.markDefs\n                    ?.filter((def) => def._type === type.name)\n                    .forEach((def) => {\n                      if (\n                        Text.isText(span) &&\n                        Array.isArray(span.marks) &&\n                        span.marks.includes(def._key)\n                      ) {\n                        const newMarks = [...(span.marks || []).filter((mark) => mark !== def._key)]\n                        Transforms.setNodes(\n                          editor,\n                          {\n                            marks: newMarks,\n                          },\n                          {at: path, voids: false, split: false}\n                        )\n                      }\n                    })\n                }\n              })\n            }\n          })\n          Editor.normalize(editor)\n          editor.onChange()\n        }\n      },\n      getSelection: (): EditorSelection | null => {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            return existing\n          }\n          ptRange = toPortableTextRange(\n            fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n            editor.selection,\n            types\n          )\n          SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n        }\n        return ptRange\n      },\n      getValue: () => {\n        return fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))\n      },\n      isCollapsedSelection: () => {\n        return !!editor.selection && Range.isCollapsed(editor.selection)\n      },\n      isExpandedSelection: () => {\n        return !!editor.selection && Range.isExpanded(editor.selection)\n      },\n    })\n    return editor\n  }\n}\n","import {PortableTextSlateEditor} from '../../types/editor'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks() {\n  return function withMaxBlocks(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      const rows = editor.maxBlocks || -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' || operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor} from 'slate'\n\nexport const PRESERVE_KEYS: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withPreserveKeys(editor: Editor, fn: () => void): void {\n  const prev = isPreservingKeys(editor)\n  PRESERVE_KEYS.set(editor, true)\n  fn()\n  PRESERVE_KEYS.set(editor, !prev)\n}\n\nexport function isPreservingKeys(editor: Editor): boolean | undefined {\n  return PRESERVE_KEYS.get(editor)\n}\n","import {Element, Transforms, Node, Editor} from 'slate'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {isPreservingKeys, PRESERVE_KEYS} from '../../utils/withPreserveKeys'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(\n  schemaTypes: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string\n) {\n  return function withKeys(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    PRESERVE_KEYS.set(editor, false)\n    const {apply, normalizeNode} = editor\n    editor.apply = (operation) => {\n      if (operation.type === 'split_node') {\n        operation.properties = {\n          ...operation.properties,\n          _key: keyGenerator(),\n        }\n      }\n      if (operation.type === 'insert_node') {\n        // Must be given a new key or adding/removing marks while typing gets in trouble (duped keys)!\n        const withNewKey = !isPreservingKeys(editor) || !('_key' in operation.node)\n        if (!Editor.isEditor(operation.node)) {\n          operation.node = {\n            ...operation.node,\n            ...(withNewKey ? {_key: keyGenerator()} : {}),\n          }\n        }\n      }\n      apply(operation)\n    }\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (Element.isElement(node) && node._type === schemaTypes.block.name) {\n        // Set key on block itself\n        if (!node._key) {\n          Transforms.setNodes(editor, {_key: keyGenerator()}, {at: path})\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            Transforms.setNodes(editor, {_key: keyGenerator()}, {at: childPath})\n            return\n          }\n        }\n      }\n      // Do the original `normalizeNode` to enforce other constraints.\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","export const BEFORE = 'before'\nexport const AFTER = 'after'\n\nexport default function insert(array: any[], position: string, index: number, ...args: any[]) {\n  if (position !== BEFORE && position !== AFTER) {\n    throw new Error(`Invalid position \"${position}\", must be either ${BEFORE} or ${AFTER}`)\n  }\n\n  const items = flatten(...args)\n\n  if (array.length === 0) {\n    return items\n  }\n\n  const len = array.length\n  const idx = Math.abs((len + index) % len) % len\n\n  const normalizedIdx = position === 'after' ? idx + 1 : idx\n\n  const copy = array.slice()\n  copy.splice(normalizedIdx, 0, ...flatten(items))\n  return copy\n}\n\nfunction flatten(...values: any[]) {\n  return values.reduce((prev, item) => prev.concat(item), [])\n}\n","import {PathSegment} from '@sanity/types'\nimport {findIndex} from 'lodash'\nimport applyPatch from './applyPatch'\nimport insert from './arrayInsert'\n\nconst hasOwn = Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty)\n\nfunction move(arr: any[], from: number, to: any) {\n  const nextValue = arr.slice()\n  const val = nextValue[from]\n  nextValue.splice(from, 1)\n  nextValue.splice(to, 0, val)\n  return nextValue\n}\n\nfunction findTargetIndex(array: any[], pathSegment: PathSegment) {\n  if (typeof pathSegment === 'number') {\n    return pathSegment\n  }\n  const index = findIndex(array, pathSegment)\n  return index === -1 ? false : index\n}\n\nexport default function apply(\n  value: any,\n  patch: {type: any; path: any; value: any; position: any; items: any}\n) {\n  const nextValue = value.slice() // make a copy for internal mutation\n\n  if (patch.path.length === 0) {\n    // its directed to me\n    if (patch.type === 'setIfMissing') {\n      if (!Array.isArray(patch.value)) {\n        // eslint-disable-line max-depth\n        throw new Error('Cannot set value of an array to a non-array')\n      }\n      return value === undefined ? patch.value : value\n    } else if (patch.type === 'set') {\n      if (!Array.isArray(patch.value)) {\n        // eslint-disable-line max-depth\n        throw new Error('Cannot set value of an array to a non-array')\n      }\n      return patch.value\n    } else if (patch.type === 'unset') {\n      return undefined\n    } else if (patch.type === 'move') {\n      if (!patch.value || !hasOwn(patch.value, 'from') || !hasOwn(patch.value, 'to')) {\n        // eslint-disable-line max-depth\n        throw new Error(\n          `Invalid value of 'move' patch. Expected a value with \"from\" and \"to\" indexes, instead got: ${JSON.stringify(\n            patch.value\n          )}`\n        )\n      }\n      return move(nextValue, patch.value.from, patch.value.to)\n    }\n    throw new Error(`Invalid array operation: ${patch.type}`)\n  }\n\n  const [head, ...tail] = patch.path\n\n  const index = findTargetIndex(value, head)\n\n  // If the given selector could not be found, return as-is\n  if (index === false) {\n    return nextValue\n  }\n\n  if (tail.length === 0) {\n    if (patch.type === 'insert') {\n      const {position, items} = patch\n      return insert(value, position, index, items)\n    } else if (patch.type === 'unset') {\n      if (typeof index !== 'number') {\n        throw new Error(`Expected array index to be a number, instead got \"${index}\"`)\n      }\n      nextValue.splice(index, 1)\n      return nextValue\n    }\n  }\n\n  // The patch is not directed to me\n  nextValue[index] = applyPatch(nextValue[index], {\n    ...patch,\n    path: tail,\n  })\n  return nextValue\n}\n","import {omit, clone, isObject} from 'lodash'\nimport applyPatch from './applyPatch'\n\nexport default function apply(value: any, patch: {type: any; path: any; value: any}) {\n  const nextValue = clone(value)\n  if (patch.path.length === 0) {\n    // its directed to me\n    if (patch.type === 'set') {\n      if (!isObject(patch.value)) {\n        // eslint-disable-line max-depth\n        throw new Error('Cannot set value of an object to a non-object')\n      }\n      return patch.value\n    } else if (patch.type === 'unset') {\n      return undefined\n    } else if (patch.type === 'setIfMissing') {\n      // console.log('IS IT missing?', value)\n      return value === undefined ? patch.value : value\n    }\n    throw new Error(`Invalid object operation: ${patch.type}`)\n  }\n\n  // The patch is not directed to me\n  const [head, ...tail] = patch.path\n  if (typeof head !== 'string') {\n    throw new Error(`Expected field name to be a string, instad got: ${head}`)\n  }\n\n  if (tail.length === 0 && patch.type === 'unset') {\n    return omit(nextValue, head)\n  }\n\n  nextValue[head] = applyPatch(nextValue[head], {\n    ...patch,\n    path: tail,\n  })\n  return nextValue\n}\n","const OPERATIONS: Record<string, any> = {\n  replace(_currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  set(_currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  setIfMissing(currentValue: any, nextValue: any) {\n    return currentValue === undefined ? nextValue : currentValue\n  },\n  unset(_currentValue: any, _nextValue: any) {\n    return undefined\n  },\n  inc(currentValue: any, nextValue: any) {\n    return currentValue + nextValue\n  },\n  dec(currentValue: any, nextValue: any) {\n    return currentValue - nextValue\n  },\n}\n\nconst SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS)\n\nexport default function apply(value: any, patch: any) {\n  if (!SUPPORTED_PATCH_TYPES.includes(patch.type)) {\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for primitives. This is most likely a bug.`\n    )\n  }\n\n  if (patch.path.length > 0) {\n    throw new Error(\n      `Cannot apply deep operations on primitive values. Received patch with type \"${\n        patch.type\n      }\" and path \"${patch.path\n        .map((path: any) => JSON.stringify(path))\n        .join('.')} that targeted the value \"${JSON.stringify(value)}\"`\n    )\n  }\n  return OPERATIONS[patch.type](value, patch.value)\n}\n","import * as DMP from 'diff-match-patch'\n\n// eslint-disable-next-line new-cap\nconst dmp = new DMP.diff_match_patch()\n\ntype fn = (oldVal: any, newVal: any) => any\nconst OPERATIONS: Record<string, fn> = {\n  replace(currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  set(currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  setIfMissing(currentValue: undefined, nextValue: any) {\n    return currentValue === undefined ? nextValue : currentValue\n  },\n  unset(currentValue: any, nextValue: any) {\n    return undefined\n  },\n  diffMatchPatch(currentValue: string, nextValue: string) {\n    return dmp.patch_apply(dmp.patch_fromText(nextValue), currentValue)[0]\n  },\n}\n\nconst SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS)\n\nexport default function apply(\n  value: string,\n  patch: {type: string; path: any[]; value: any}\n): string {\n  if (!SUPPORTED_PATCH_TYPES.includes(patch.type)) {\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for string. This is most likely a bug.`\n    )\n  }\n\n  if (patch.path.length > 0) {\n    throw new Error(\n      `Cannot apply deep operations on string values. Received patch with type \"${\n        patch.type\n      }\" and path \"${patch.path.join('.')} that targeted the value \"${JSON.stringify(value)}\"`\n    )\n  }\n  const func = OPERATIONS[patch.type]\n  if (func) {\n    return func(value, patch.value)\n  }\n  throw new Error('Unknown patch type')\n}\n","import {isObject, isString} from 'lodash'\nimport applyArrayPatch from './array'\nimport applyObjectPatch from './object'\nimport applyPrimitivePatch from './primitive'\nimport applyStringPatch from './string'\n\nexport function applyAll(value: any, patches: any[]) {\n  return patches.reduce(_apply, value)\n}\n\nfunction applyPatch(value: string, patch: {type: string; path: any[]; value: any}) {\n  if (Array.isArray(value)) {\n    return applyArrayPatch(value, patch as any)\n  }\n  if (isString(value)) {\n    return applyStringPatch(value, patch)\n  }\n  if (isObject(value)) {\n    return applyObjectPatch(value, patch)\n  }\n  return applyPrimitivePatch(value, patch)\n}\n\nexport default function _apply(value: string, patch: {type: string; path: any[]; value: any}) {\n  const res = applyPatch(value, patch)\n  // console.log('applyPatch(%o, %o) : %o (noop? %o)', value, patch, res, value === res)\n  return res\n}\n","/* eslint-disable max-statements */\nimport {Editor, Transforms, Element, Path as SlatePath, Descendant, Text, Node} from 'slate'\nimport * as DMP from 'diff-match-patch'\nimport {Path, KeyedSegment, PathSegment, PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {Patch, InsertPatch, UnsetPatch, SetPatch, DiffMatchPatch} from '../types/patch'\nimport {applyAll} from '../patch/applyPatch'\nimport {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {toSlateValue} from './values'\nimport {debugWithName} from './debug'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('operationToPatches')\n\n// eslint-disable-next-line new-cap\nconst dmp = new DMP.diff_match_patch()\n\nexport function createPatchToOperations(\n  schemaTypes: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string\n): (\n  editor: Editor,\n  patch: Patch,\n  patches: Patch[],\n  snapshot: PortableTextBlock[] | undefined\n) => boolean {\n  function diffMatchPatch(editor: Editor, patch: DiffMatchPatch) {\n    const blockKey = findLastKey([patch.path[0]])\n    const blockIndex = editor.children.findIndex((node, indx) => {\n      return blockKey ? node._key === blockKey : indx === patch.path[0]\n    })\n    const block = editor.children[blockIndex] as Element\n    const parsed = dmp.patch_fromText(patch.value)[0]\n    if (parsed && editor.isTextBlock(block)) {\n      const childKey = findLastKey([patch.path[2]])\n      const childIndex = block.children.findIndex((node, indx) => {\n        return childKey ? node._key === childKey : indx === patch.path[0]\n      })\n      const slatePath = [blockIndex, childIndex]\n      const distance = parsed.length2 - parsed.length1\n      const point = {\n        path: slatePath,\n        offset:\n          distance >= 0\n            ? (parsed.start1 || 0) + parsed.diffs[0][1].length\n            : (parsed.start2 || 0) + parsed.length2 - distance,\n      }\n      debug(\n        `DiffMatchPatch (${distance < 0 ? 'remove' : 'insert'}) at ${JSON.stringify(slatePath)}}: `,\n        JSON.stringify(point, null, 2),\n        JSON.stringify(parsed, null, 2)\n      )\n      debugState(editor, 'before')\n\n      let text\n      if (parsed.diffs[1]) {\n        text = parsed.diffs[1][1]\n      } else {\n        text = parsed.diffs[0][1]\n      }\n      debug(`Text: '${text}'`)\n      if (distance >= 0) {\n        editor.apply({\n          type: 'insert_text',\n          path: point.path,\n          offset: point.offset,\n          text,\n        })\n      } else {\n        editor.apply({\n          type: 'remove_text',\n          path: point.path,\n          offset: point.offset - text.length,\n          text,\n        })\n      }\n      debugState(editor, 'after')\n      return true\n    }\n    return false\n  }\n\n  function insertPatch(editor: Editor, patch: InsertPatch) {\n    // Insert blocks\n    if (patch.path.length === 1) {\n      const {items, position} = patch\n      const blocksToInsert = toSlateValue(\n        items as PortableTextBlock[],\n        {schemaTypes},\n        KEY_TO_SLATE_ELEMENT.get(editor)\n      ) as Descendant[]\n      const posKey = findLastKey(patch.path)\n      const index = Math.max(\n        0,\n        editor.children.findIndex((node, indx) => {\n          return posKey ? node._key === posKey : indx === patch.path[0]\n        })\n      )\n      const normalizedIdx = position === 'after' ? index + 1 : index\n      debug(`Inserting blocks at path [${normalizedIdx}]`)\n      debugState(editor, 'before')\n      Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n      debugState(editor, 'after')\n      return true\n    }\n    const {items, position} = patch\n    const posKey = findLastKey(patch.path)\n    const blockIndex = editor.children.findIndex((node, indx) => {\n      return posKey ? node._key === posKey : indx === patch.path[0]\n    })\n\n    // Insert children\n    const block: Descendant | undefined =\n      editor.children && blockIndex > -1 ? editor.children[blockIndex] : undefined\n    const childIndex = editor.isTextBlock(block)\n      ? block.children.findIndex((node: PortableTextChild, indx: number) => {\n          return isKeyedSegment(patch.path[2])\n            ? node._key === patch.path[2]._key\n            : indx === patch.path[2]\n        })\n      : 0\n    const childrenToInsert =\n      block &&\n      toSlateValue(\n        [{...block, children: items as PortableTextChild[]}],\n        {schemaTypes},\n        KEY_TO_SLATE_ELEMENT.get(editor)\n      )\n\n    const normalizedIdx = position === 'after' ? childIndex + 1 : childIndex\n    const targetPath = [blockIndex, normalizedIdx]\n    debug(`Inserting children at path ${targetPath}`)\n    debugState(editor, 'before')\n    if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n      Transforms.insertNodes(editor, childrenToInsert[0].children, {at: targetPath})\n    }\n    debugState(editor, 'after')\n    return true\n  }\n\n  function setPatch(editor: Editor, patch: SetPatch) {\n    const blockIndex = editor.children.findIndex((node, indx) => {\n      return isKeyedSegment(patch.path[0])\n        ? node._key === patch.path[0]._key\n        : indx === patch.path[0]\n    })\n    debug('blockIndex', blockIndex)\n    const block = blockIndex > -1 ? editor.children[blockIndex] : undefined\n    const childIndex = editor.isTextBlock(block)\n      ? block.children.findIndex((node: PortableTextChild, indx: number) => {\n          return isKeyedSegment(patch.path[2])\n            ? node._key === patch.path[2]._key\n            : indx === patch.path[2]\n        })\n      : 0\n    let value = patch.value\n    const targetPath: SlatePath = childIndex > -1 ? [blockIndex, childIndex] : [blockIndex]\n    if (typeof patch.path[3] === 'string') {\n      value = {}\n      value[patch.path[3]] = patch.value\n    }\n    const isTextBlock = editor.isTextBlock(block)\n    if (isTextBlock) {\n      debug(`Setting nodes at ${JSON.stringify(patch.path)} - ${JSON.stringify(targetPath)}`)\n      debug('Value to set', JSON.stringify(value, null, 2))\n      debugState(editor, 'before')\n      if (targetPath.length === 1) {\n        debug('Setting block property')\n        const {children, ...nextRest} = value as PortableTextBlock\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const {children: prevChildren, ...prevRest} = block || {children: undefined}\n        editor.apply({\n          type: 'set_node',\n          path: targetPath,\n          properties: {...prevRest},\n          newProperties: nextRest,\n        })\n        if (block && Element.isElement(block)) {\n          block.children.forEach((c, cIndex) => {\n            editor.apply({\n              type: 'remove_node',\n              path: targetPath.concat(cIndex),\n              node: c,\n            })\n          })\n        }\n        if (Array.isArray(children)) {\n          children.forEach((c, cIndex) => {\n            editor.apply({\n              type: 'insert_node',\n              path: targetPath.concat(cIndex),\n              node: c,\n            })\n          })\n        }\n      } else if (Text.isText(value)) {\n        debug('Setting text property')\n        const prevSel = editor.selection && {...editor.selection}\n        editor.apply({\n          type: 'remove_text',\n          path: targetPath,\n          offset: 0,\n          text: block.children[childIndex].text as string,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: targetPath,\n          offset: 0,\n          text: value.text,\n        })\n        const onSamePath = prevSel && isEqual(prevSel.focus.path, targetPath)\n        // const onSameText =\n        //   editor.selection &&\n        //   editor.selection.focus.path[0] === blockIndex &&\n        //   patch.path[3] === 'text'\n        if (onSamePath) {\n          debug('On same path, restoring previous selection')\n          Transforms.select(editor, prevSel)\n        }\n        //  else if (onSameText) {\n        //   debug('Adjusting for inserted text')\n        //   const newOffset = typeof patch.value === 'string' ? patch.value.length : 0\n        //   const point = {path: targetPath, offset: newOffset}\n        //   Transforms.select(editor, {focus: point, anchor: point})\n        // }\n      } else {\n        debug('Setting non-text property')\n        editor.apply({\n          type: 'set_node',\n          path: targetPath,\n          properties: {},\n          newProperties: value as Partial<Node>,\n        })\n      }\n      debugState(editor, 'after')\n      return true\n    }\n    // If this is a object block, just set the whole block\n    else if (block && 'value' in block) {\n      const newVal = applyAll([block.value], [patch])[0]\n      Transforms.setNodes(editor, {...block, value: newVal}, {at: [blockIndex]})\n      return true\n    }\n    return false\n  }\n\n  function unsetPatch(editor: Editor, patch: UnsetPatch, previousPatch?: Patch) {\n    // Value\n    if (patch.path.length === 0) {\n      debug(`Removing everything`)\n      debugState(editor, 'before')\n      Transforms.deselect(editor)\n      editor.children.forEach((c, i) => {\n        Transforms.removeNodes(editor, {at: [i]})\n      })\n      debugState(editor, 'after')\n      return true\n    }\n    // Single blocks\n    if (patch.path.length === 1) {\n      const lastKey = findLastKey(patch.path)\n      const index = editor.children.findIndex((node, indx) =>\n        lastKey ? node._key === lastKey : indx === patch.path[0]\n      )\n      debug(`Removing block at path [${index}]`)\n      debugState(editor, 'before')\n      if (\n        editor.selection &&\n        editor.selection.focus.path[0] === index &&\n        editor.children[index - 1]\n      ) {\n        const point = {path: [Math.max(editor.selection.focus.path[0] - 1, 0)], offset: 0}\n        Transforms.select(editor, {focus: point, anchor: point})\n        Transforms.move(editor, {unit: 'line'})\n      }\n      Transforms.removeNodes(editor, {at: [index]})\n      debugState(editor, 'after')\n      return true\n    }\n\n    const blockIndex = editor.children.findIndex((node, indx) => {\n      return isKeyedSegment(patch.path[0])\n        ? node._key === patch.path[0]._key\n        : indx === patch.path[0]\n    })\n\n    const block = blockIndex > -1 ? editor.children[blockIndex] : undefined\n\n    // Unset on text block children\n    if (editor.isTextBlock(block) && patch.path[1] === 'children' && patch.path.length === 3) {\n      const childIndex = block.children.findIndex((node: PortableTextChild, indx: number) => {\n        return isKeyedSegment(patch.path[2])\n          ? node._key === patch.path[2]._key\n          : indx === patch.path[2]\n      })\n      const targetPath = [blockIndex, childIndex]\n      const prevSel = editor.selection && {...editor.selection}\n      const onSamePath = isEqual(editor.selection?.focus.path, targetPath)\n\n      debug(`Removing child at path ${JSON.stringify(targetPath)}`)\n      debugState(editor, 'before')\n      if (prevSel && onSamePath && editor.isTextBlock(block)) {\n        const needToAdjust = childIndex >= prevSel.focus.path[1]\n        if (needToAdjust) {\n          const textChild = block.children[childIndex]\n          const isMergeUnset =\n            previousPatch?.type === 'set' &&\n            previousPatch.path[3] === 'text' &&\n            typeof previousPatch.value === 'string' &&\n            editor.isTextSpan(textChild) &&\n            isEqual(\n              previousPatch.value.slice(-textChild.text.length),\n              block.children[childIndex].text\n            )\n          if (isMergeUnset) {\n            const mergedChild = block.children[Math.max(childIndex - 1, 0)]\n            debug('Adjusting selection for merging of nodes')\n            prevSel.focus = {...prevSel.focus}\n            prevSel.focus.path = [targetPath[0], Math.max(targetPath[1] - 1, 0)]\n            prevSel.focus.offset = editor.isTextSpan(mergedChild)\n              ? mergedChild.text.length - textChild.text.length + prevSel.focus.offset\n              : 0\n            prevSel.anchor = prevSel.focus\n            Transforms.select(editor, prevSel)\n            Transforms.removeNodes(editor, {at: [blockIndex, childIndex]})\n            debugState(editor, 'after')\n            return true\n          }\n        }\n      }\n      Transforms.removeNodes(editor, {at: [blockIndex, childIndex]})\n      debugState(editor, 'after')\n      return true\n    }\n    // Inside block objects - patch block and set it again\n    if (!editor.isTextBlock(block)) {\n      const newBlock = applyAll([block], [patch])[0]\n      Transforms.setNodes(editor, newBlock, {at: [blockIndex]})\n      return true\n    }\n    return false\n  }\n\n  let previousPatch: Patch | undefined\n\n  return function (editor: Editor, patch: Patch): boolean {\n    let changed = false\n    debug('\\n\\nNEW PATCH =============================================================')\n    debug(JSON.stringify(patch, null, 2))\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch, previousPatch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n    previousPatch = patch\n    return changed\n  }\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\n// Helper function to find the last part of a patch path that has a known key\nfunction findLastKey(path: Path): string | null {\n  let key: string | null = null\n\n  path\n    .concat('')\n    .reverse()\n    .forEach((part) => {\n      if (isKeyedSegment(part)) {\n        key = part._key\n      }\n    })\n\n  return key\n}\n\nfunction debugState(editor: Editor, stateName: string) {\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n","/* eslint-disable complexity */\n/* eslint-disable no-eq-null */\n/* eslint-disable max-depth */\n/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport {isEqual, flatten} from 'lodash'\nimport {\n  Editor,\n  Element as SlateElement,\n  Operation,\n  Path,\n  SplitNodeOperation,\n  InsertTextOperation,\n  RemoveTextOperation,\n  SelectionOperation,\n} from 'slate'\nimport * as DMP from 'diff-match-patch'\nimport type {Patch} from '../../types/patch'\nimport {PatchObservable, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {isPatching} from '../../utils/withoutPatching'\n\nconst debug = debugWithName('plugin:withUndoRedo')\n// eslint-disable-next-line new-cap\nconst dmp = new DMP.diff_match_patch()\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst MERGING = new WeakMap<Editor, boolean | undefined>()\nconst UNDO_STEP_LIMIT = 300\n\nconst isMerging = (editor: Editor): boolean | undefined => {\n  return MERGING.get(editor)\n}\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  if (!isPatching(editor)) {\n    return false\n  }\n  return SAVING.get(editor)\n}\n\nexport function createWithUndoRedo(\n  incomingPatches$?: PatchObservable\n): [editor: (editor: PortableTextSlateEditor) => PortableTextSlateEditor, cleanupFn: () => void] {\n  // TODO: unsubscribe to this\n  // Subscribe to incoming patches\n  let cleanupFn: () => void = () => undefined\n  const incomingPatches: {patch: Patch; time: Date}[] = []\n  if (incomingPatches$) {\n    debug('Subscribing to patches')\n    const sub = incomingPatches$.subscribe(({patches}) => {\n      patches.forEach((patch) => {\n        if (patch.origin !== 'local') {\n          incomingPatches.push({patch: patch, time: new Date()})\n        }\n      })\n    })\n    cleanupFn = () => {\n      debug('Unsubscribing to patches')\n      sub.unsubscribe()\n    }\n  }\n\n  return [\n    (editor: PortableTextSlateEditor) => {\n      editor.history = {undos: [], redos: []}\n      const {apply} = editor\n      // Apply function for merging and saving local history inspired from 'slate-history' by Ian Storm Taylor\n      editor.apply = (op: Operation) => {\n        if (editor.readOnly) {\n          apply(op)\n          return\n        }\n        const {operations, history} = editor\n        const {undos} = history\n        const step = undos[undos.length - 1]\n        const lastOp = step && step.operations && step.operations[step.operations.length - 1]\n        const overwrite = shouldOverwrite(op, lastOp)\n        let save = isSaving(editor)\n        let merge = isMerging(editor)\n\n        if (save == null) {\n          save = shouldSave(op, lastOp)\n        }\n\n        if (save) {\n          if (merge == null) {\n            if (step == null) {\n              merge = false\n              // eslint-disable-next-line no-negated-condition\n            } else if (operations.length !== 0) {\n              merge = true\n            } else {\n              merge = shouldMerge(op, lastOp) || overwrite\n            }\n          }\n\n          if (step && merge) {\n            if (overwrite) {\n              step.operations.pop()\n            }\n            step.operations.push(op)\n          } else {\n            const stp = {\n              operations: [\n                ...(editor.selection === null ? [] : [createSelectOperation(editor)]),\n                op,\n              ],\n              timestamp: new Date(),\n            }\n            undos.push(stp)\n            debug('Created new undo step', step)\n          }\n\n          while (undos.length > UNDO_STEP_LIMIT) {\n            undos.shift()\n          }\n\n          if (shouldClear(op)) {\n            history.redos = []\n          }\n        }\n        apply(op)\n      }\n\n      editor.undo = () => {\n        if (editor.readOnly) {\n          return\n        }\n        const {undos} = editor.history\n        if (undos.length > 0) {\n          const step = undos[undos.length - 1]\n          debug('Undoing', step)\n          if (step.operations.length > 0) {\n            const otherPatches = [...incomingPatches.filter((item) => item.time >= step.timestamp)]\n            let transformedOperations = step.operations\n            otherPatches.forEach((item) => {\n              transformedOperations = flatten(\n                transformedOperations.map((op) => transformOperation(editor, item.patch, op))\n              )\n            })\n            withoutSaving(editor, () => {\n              Editor.withoutNormalizing(editor, () => {\n                transformedOperations\n                  .map(Operation.inverse)\n                  .reverse()\n                  .forEach((op) => {\n                    // Try this as the document could be changed from the outside,\n                    // and sometimes we can't perform the undo operation on the current doc.\n                    try {\n                      editor.apply(op)\n                    } catch (err) {\n                      debug('Could not perform undo step', err)\n                      editor.history.redos.push(step)\n                      editor.history.undos.pop()\n                    }\n                  })\n              })\n            })\n          }\n          editor.history.redos.push(step)\n          editor.history.undos.pop()\n          editor.onChange()\n        }\n      }\n\n      editor.redo = () => {\n        if (editor.readOnly) {\n          return\n        }\n        const {redos} = editor.history\n        if (redos.length > 0) {\n          const step = redos[redos.length - 1]\n          debug('Redoing', step)\n          if (step.operations.length > 0) {\n            const otherPatches = incomingPatches.filter((item) => item.time > step.timestamp)\n            let transformedOperations = step.operations\n            otherPatches.forEach((item) => {\n              transformedOperations = flatten(\n                transformedOperations.map((op) => transformOperation(editor, item.patch, op))\n              )\n            })\n            withoutSaving(editor, () => {\n              Editor.withoutNormalizing(editor, () => {\n                transformedOperations.forEach((op) => {\n                  try {\n                    editor.apply(op)\n                  } catch (err) {\n                    debug('Could not perform redo step', err)\n                    editor.history.undos.push(step)\n                    editor.history.redos.pop()\n                  }\n                })\n              })\n            })\n          }\n          editor.history.undos.push(step)\n          editor.history.redos.pop()\n          editor.onChange()\n        }\n      }\n\n      // Plugin return\n      return editor\n    },\n    cleanupFn,\n  ]\n}\n\n// This will adjust the user selection according to patcehes done by others.\n// TODO: complete all necessary steps of the algorithm and write tests.\n\n// eslint-disable-next-line max-statements\nfunction transformOperation(editor: Editor, patch: Patch, operation: Operation): Operation[] {\n  // debug(`Rebasing selection for patch ${patch.type} against operation ${operation.type}`)\n\n  let transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    return [adjustBlockPath(editor, patch, operation, patch.items.length)]\n  }\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    return [adjustBlockPath(editor, patch, operation, -1)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(`Adjusting selection for unset everything patch and ${operation.type} operation`)\n    return [operation]\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const blockIndex = editor.children.findIndex((blk) => isEqual({_key: blk._key}, patch.path[0]))\n    const block = editor.children[blockIndex]\n    if (SlateElement.isElement(block) && Array.isArray(block.children)) {\n      const childIndex = block.children.findIndex((child) =>\n        isEqual({_key: child._key}, patch.path[2])\n      )\n      const parsed = dmp.patch_fromText(patch.value)[0]\n      if (!parsed) {\n        debug('Could not parse diffMatchPatch', patch)\n        return [operation]\n      }\n      const distance = parsed.length2 - parsed.length1\n      const patchIsRemovingText = parsed.diffs.some((diff) => diff[0] === -1)\n\n      if (operation.type === 'split_node' && operation.path.length > 1) {\n        const splitOperation = transformedOperation as SplitNodeOperation\n        if (patchIsRemovingText) {\n          splitOperation.position -= distance\n        } else {\n          splitOperation.position += distance\n        }\n        return [splitOperation]\n      }\n\n      if (\n        (operation.type === 'insert_text' || operation.type === 'remove_text') &&\n        Path.isPath(operation.path) &&\n        operation.path[0] !== undefined &&\n        operation.path[0] === blockIndex &&\n        operation.path[1] === childIndex\n      ) {\n        if (operation.type === 'insert_text') {\n          let insertOffset = 0\n          for (const diff of parsed.diffs) {\n            if (diff[0] === 0) {\n              insertOffset = diff[1].length\n            }\n            if (diff[0] === 1) {\n              break\n            }\n          }\n          if (parsed.start1 !== null && insertOffset + parsed.start1 <= operation.offset) {\n            const insertTextOperation = transformedOperation as InsertTextOperation\n            insertTextOperation.offset += distance\n            transformedOperation = insertTextOperation\n          }\n          // TODO: deal with overlapping ranges\n          return [transformedOperation]\n        }\n\n        if (operation.type === 'remove_text') {\n          let insertOffset = 0\n          for (const diff of parsed.diffs) {\n            if (diff[0] === 0) {\n              insertOffset = diff[1].length\n            }\n            if (diff[0] === -1) {\n              break\n            }\n          }\n          if (parsed.start1 !== null && insertOffset + parsed.start1 <= operation.offset) {\n            const removeTextOperation = transformedOperation as RemoveTextOperation\n            removeTextOperation.offset -= distance\n            transformedOperation = removeTextOperation\n          }\n          return [transformedOperation]\n        }\n      }\n      // // Selection operations with diffPatchMatch\n      // if (operation.type === 'set_selection') {\n      //   const newProperties = transformedOperation.newProperties\n      //   if (newProperties && patchIsRemovingText) {\n      //     newProperties.offset = newProperties.offset - distance\n      //   } else if (newProperties) {\n      //     newProperties.offset = newProperties.offset + distance\n      //   }\n      //   return [newProperties ? {...transformedOperation, newProperties} : transformedOperation]\n      // }\n    }\n    // TODO: transform this?\n    // if (operation.type === 'set_selection' && patch.type !== 'diffMatchPatch') {\n    //   console.log('set_selection other', JSON.stringify(patch))\n    // }\n  }\n  return [operation]\n}\n\nfunction adjustBlockPath(\n  editor: Editor,\n  patch: Patch,\n  operation: Operation,\n  level: number\n): Operation {\n  const myIndex = editor.children.findIndex((blk) => isEqual({_key: blk._key}, patch.path[0]))\n  if (\n    myIndex >= 0 &&\n    operation.type !== 'set_selection' &&\n    Array.isArray(operation.path) &&\n    operation.path[0] !== undefined &&\n    operation.path[0] >= myIndex + level\n  ) {\n    const transformedOperation = {...operation}\n    const newPath = [operation.path[0] + level, ...operation.path.slice(1)]\n    debug(`Adjusting ${operation.type} for block ${patch.type}`, operation.path, newPath)\n    transformedOperation.path = newPath\n    return transformedOperation\n  }\n  return operation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldSave = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection' && op.newProperties === null) {\n    return false\n  }\n\n  return true\n}\n\nconst shouldOverwrite = (op: Operation, prev: Operation | undefined): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n","/* eslint-disable max-nested-callbacks */\nimport {Observable, Subject, Subscription} from 'rxjs'\nimport {\n  Descendant,\n  Editor,\n  InsertNodeOperation,\n  InsertTextOperation,\n  MergeNodeOperation,\n  MoveNodeOperation,\n  Operation,\n  RemoveNodeOperation,\n  RemoveTextOperation,\n  SetNodeOperation,\n  SplitNodeOperation,\n} from 'slate'\nimport {debounce} from 'lodash'\nimport {PortableTextBlock} from '@sanity/types'\nimport {insert, setIfMissing, unset} from '../../patch/PatchEvent'\nimport type {Patch} from '../../types/patch'\n\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../utils/values'\nimport {\n  EditorChange,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {PATCHING, isPatching, withoutPatching} from '../../utils/withoutPatching'\nimport {KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport {createPatchToOperations} from '../../utils/patchToOperations'\nimport {defaultKeyGenerator} from '../../editor/PortableTextEditor'\nimport {withPreserveKeys} from '../../utils/withPreserveKeys'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\n\nexport interface PatchFunctions {\n  insertNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  insertTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  mergeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  moveNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  removeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  removeTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  setNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  splitNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n}\n\ninterface Options {\n  patchFunctions: PatchFunctions\n  change$: Subject<EditorChange>\n  schemaTypes: PortableTextMemberSchemaTypes\n  syncValue: () => void\n  incomingPatches$?: Observable<{\n    patches: Patch[]\n    snapshot: PortableTextBlock[] | undefined\n  }>\n}\n\nexport function createWithPatches({\n  patchFunctions,\n  change$,\n  schemaTypes,\n  syncValue,\n  incomingPatches$,\n}: Options): [\n  editor: (editor: PortableTextSlateEditor) => PortableTextSlateEditor,\n  cleanupFn: () => void\n] {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const patchToOperations = createPatchToOperations(schemaTypes, defaultKeyGenerator)\n  let patchSubscription: Subscription\n  const cleanupFn = () => {\n    if (patchSubscription) {\n      debug('Unsubscribing to patches')\n      patchSubscription.unsubscribe()\n    }\n  }\n  return [\n    function withPatches(editor: PortableTextSlateEditor) {\n      PATCHING.set(editor, true)\n\n      previousChildren = [...editor.children]\n\n      // Sync the with props.value in PortableTextEditor after we have processed batches of incoming patches.\n      // This is only for consistency checking against the props.value, so it can be debounced without problems.\n      const syncValueAfterIncomingPatches = debounce(() => syncValue(), 0, {\n        trailing: true,\n        leading: false,\n      })\n\n      // Subscribe and deal with incoming patches\n      if (incomingPatches$) {\n        debug('Subscribing to patches')\n        patchSubscription = incomingPatches$.subscribe(({patches, snapshot}) => {\n          debug('Incoming patches', patches)\n          const remotePatches = patches.filter((p) => p.origin !== 'local')\n          if (remotePatches.length !== 0) {\n            Editor.withoutNormalizing(editor, () => {\n              remotePatches.forEach((patch) => {\n                debug(`Handling remote patch ${JSON.stringify(patch)}`)\n                withoutPatching(editor, () => {\n                  withoutSaving(editor, () => {\n                    withPreserveKeys(editor, () => {\n                      try {\n                        patchToOperations(editor, patch, patches, snapshot)\n                      } catch (err) {\n                        debug('Got error trying to create operations from patch')\n                        console.error(err)\n                      }\n                    })\n                  })\n                })\n              })\n            })\n          }\n          if (patches.length > 0) {\n            syncValueAfterIncomingPatches()\n          }\n        })\n      }\n      const {apply} = editor\n      editor.apply = (operation: Operation): void | Editor => {\n        if (editor.readOnly) {\n          apply(operation)\n          return editor\n        }\n        let patches: Patch[] = []\n\n        // Update previous children here before we apply\n        previousChildren = editor.children\n\n        const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes)\n\n        // Apply the operation\n        apply(operation)\n\n        const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n        if (!isPatching(editor)) {\n          debug(`Editor is not producing patch for operation ${operation.type}`, operation)\n          return editor\n        }\n\n        // Make sure the actual value is an array, and then insert the placeholder block into it\n        // before we produce any other patches that will target that block.\n        if (editorWasEmpty && operation.type !== 'set_selection') {\n          patches.push(setIfMissing([], []))\n          previousChildren.forEach((c, index) => {\n            patches.push(insert(fromSlateValue([c], schemaTypes.block.name), 'before', [index]))\n          })\n        }\n        switch (operation.type) {\n          case 'insert_text':\n            patches = [\n              ...patches,\n              ...patchFunctions.insertTextPatch(editor, operation, previousChildren),\n            ]\n            break\n          case 'remove_text':\n            patches = [\n              ...patches,\n              ...patchFunctions.removeTextPatch(editor, operation, previousChildren),\n            ]\n            break\n          case 'remove_node':\n            patches = [\n              ...patches,\n              ...patchFunctions.removeNodePatch(editor, operation, previousChildren),\n            ]\n            break\n          case 'split_node':\n            patches = [\n              ...patches,\n              ...patchFunctions.splitNodePatch(editor, operation, previousChildren),\n            ]\n            break\n          case 'insert_node':\n            patches = [\n              ...patches,\n              ...patchFunctions.insertNodePatch(editor, operation, previousChildren),\n            ]\n            break\n          case 'set_node':\n            patches = [\n              ...patches,\n              ...patchFunctions.setNodePatch(editor, operation, previousChildren),\n            ]\n            break\n          case 'merge_node':\n            patches = [\n              ...patches,\n              ...patchFunctions.mergeNodePatch(editor, operation, previousChildren),\n            ]\n            break\n          case 'move_node':\n            patches = [\n              ...patches,\n              ...patchFunctions.moveNodePatch(editor, operation, previousChildren),\n            ]\n            break\n          case 'set_selection':\n          default:\n          // Do nothing\n        }\n\n        // Unset the value if the operation made the editor empty\n        if (editorIsEmpty && ['remove_text', 'remove_node'].includes(operation.type)) {\n          patches = [...patches, unset([])]\n          change$.next({\n            type: 'unset',\n            previousValue: fromSlateValue(\n              previousChildren,\n              schemaTypes.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor)\n            ),\n          })\n        }\n\n        // Emit all patches\n        if (patches.length > 0) {\n          patches.forEach((patch) => {\n            change$.next({\n              type: 'patch',\n              patch: {...patch, origin: 'local'},\n            })\n          })\n        }\n        return editor\n      }\n      return editor\n    },\n    cleanupFn,\n  ]\n}\n","import {Transforms, Descendant} from 'slate'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\ninterface Options {\n  schemaTypes: PortableTextMemberSchemaTypes\n  keyGenerator: () => string\n}\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock({\n  schemaTypes,\n  keyGenerator,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    editor.createPlaceholderBlock = (): Descendant => {\n      return {\n        _type: schemaTypes.block.name,\n        _key: keyGenerator(),\n        style: schemaTypes.styles[0].value || 'normal',\n        markDefs: [],\n        children: [\n          {\n            _type: 'span',\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          },\n        ],\n      }\n    }\n    const {onChange} = editor\n    // Make sure there's a placeholder block present if the editor's children become empty\n    editor.onChange = () => {\n      const hadSelection = !!editor.selection\n      onChange()\n      if (editor.children.length === 0) {\n        debug('Inserting placeholder block')\n        Transforms.deselect(editor)\n        // Set the value directly without using transforms as we don't want this to be producing any patches\n        editor.children = [editor.createPlaceholderBlock()]\n        if (hadSelection) {\n          Transforms.select(editor, {\n            focus: {path: [0, 0], offset: 0},\n            anchor: {path: [0, 0], offset: 0},\n          })\n        }\n        editor.onChange()\n      }\n    }\n    return editor\n  }\n}\n","import {Subject} from 'rxjs'\nimport {Editor, Transforms, Element, Path, Text as SlateText, Node} from 'slate'\nimport {\n  EditorChange,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toPortableTextRange} from '../../utils/ranges'\nimport {fromSlateValue} from '../../utils/values'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  types: PortableTextMemberSchemaTypes,\n  change$: Subject<EditorChange>\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = types.styles[0].value\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n    editor.normalizeNode = (nodeEntry) => {\n      normalizeNode(nodeEntry)\n      const [, path] = nodeEntry\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            Transforms.setNodes(editor, {style: defaultStyle}, {at: [op.path[0] + 1], voids: false})\n            break\n          }\n        }\n      }\n    }\n    editor.pteHasBlockStyle = (style: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node) && node.style === style,\n        }),\n      ]\n      if (selectedBlocks.length > 0) {\n        return true\n      }\n      return false\n    }\n\n    editor.pteToggleBlockStyle = (blockStyle: string): void => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => Element.isElement(node) && node._type === types.block.name,\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isTextBlock(node) && node.style === blockStyle) {\n          debug(`Unsetting block style '${blockStyle}'`)\n          Transforms.setNodes(editor, {...node, style: defaultStyle} as Partial<Node>, {\n            at: path,\n          })\n        } else {\n          if (blockStyle) {\n            debug(`Setting style '${blockStyle}'`)\n          } else {\n            debug('Setting default style', defaultStyle)\n          }\n          Transforms.setNodes(\n            editor,\n            {\n              ...node,\n              style: blockStyle || defaultStyle,\n            } as Partial<Node>,\n            {at: path}\n          )\n        }\n      })\n      // Emit a new selection here (though it might be the same).\n      // Toolbars and similar on the outside may rely on selection changes to update themselves.\n      change$.next({\n        type: 'selection',\n        selection: toPortableTextRange(\n          fromSlateValue(editor.children, types.block.name),\n          editor.selection,\n          types\n        ),\n      })\n      editor.onChange()\n    }\n    return editor\n  }\n}\n","import {Editor, Transforms, Element, Text, Node} from 'slate'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withPortableTextLists')\nconst MAX_LIST_LEVEL = 10\n\nexport function createWithPortableTextLists(types: PortableTextMemberSchemaTypes) {\n  return function withPortableTextLists(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    editor.pteToggleListItem = (listItemStyle: string) => {\n      const isActive = editor.pteHasListStyle(listItemStyle)\n      if (isActive) {\n        debug(`Remove list item '${listItemStyle}'`)\n        editor.pteUnsetListItem(listItemStyle)\n      } else {\n        debug(`Add list item '${listItemStyle}'`)\n        editor.pteSetListItem(listItemStyle)\n      }\n    }\n\n    editor.pteUnsetListItem = (listItemStyle: string) => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => Element.isElement(node) && node._type === types.block.name,\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isListBlock(node)) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {listItem, level, ...rest} = node\n          const newNode = {\n            ...rest,\n            listItem: undefined,\n            level: undefined,\n          } as Partial<Node>\n          debug(`Unsetting list '${listItemStyle}'`)\n          Transforms.setNodes(editor, newNode, {at: path})\n        }\n      })\n    }\n\n    editor.pteSetListItem = (listItemStyle: string) => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node),\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        debug(`Setting list '${listItemStyle}'`)\n        Transforms.setNodes(\n          editor,\n          {\n            ...node,\n            level: 1,\n            listItem: listItemStyle || (types.lists[0] && types.lists[0].value),\n          } as Partial<Node>,\n          {at: path}\n        )\n      })\n    }\n\n    editor.pteEndList = () => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Element.isElement(node) &&\n            editor.isListBlock(node) &&\n            node.children.length === 1 &&\n            Text.isText(node.children[0]) &&\n            node.children[0].text === '',\n        }),\n      ]\n      if (selectedBlocks.length === 0) {\n        return false\n      }\n      selectedBlocks.forEach(([node, path]) => {\n        if (Element.isElement(node)) {\n          debug('Unset list')\n          Transforms.setNodes(\n            editor,\n            {\n              ...node,\n              level: undefined,\n              listItem: undefined,\n            },\n            {at: path}\n          )\n        }\n      })\n      return true // Note: we are exiting the plugin chain by not returning editor (or hotkey plugin 'enter' will fire)\n    }\n\n    editor.pteIncrementBlockLevels = (reverse?: boolean): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => !!editor.isListBlock(node),\n        }),\n      ]\n      if (selectedBlocks.length === 0) {\n        return false\n      }\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isListBlock(node)) {\n          let level = node.level || 1\n          if (reverse) {\n            level--\n            debug('Decrementing list level', Math.min(MAX_LIST_LEVEL, Math.max(1, level)))\n          } else {\n            level++\n            debug('Incrementing list level', Math.min(MAX_LIST_LEVEL, Math.max(1, level)))\n          }\n          Transforms.setNodes(\n            editor,\n            {level: Math.min(MAX_LIST_LEVEL, Math.max(1, level))},\n            {at: path}\n          )\n        }\n      })\n      return true\n    }\n\n    editor.pteHasListStyle = (listStyle: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isListBlock(node) && node.listItem === listStyle,\n        }),\n      ]\n      if (selectedBlocks.length > 0) {\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n","/* eslint-disable complexity */\n/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isEqual, flatten, uniq} from 'lodash'\nimport {Editor, Range, Transforms, Text, Path, NodeEntry, Element} from 'slate'\n\nimport {debugWithName} from '../../utils/debug'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  types: PortableTextMemberSchemaTypes\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = types.decorators.map((t) => t.value)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      normalizeNode(nodeEntry)\n      if (\n        editor.operations.some((op) =>\n          [\n            'insert_node',\n            'insert_text',\n            'merge_node',\n            'remove_node',\n            'remove_text',\n            'set_node',\n          ].includes(op.type)\n        )\n      ) {\n        mergeSpans(editor)\n      }\n      const [node, path] = nodeEntry\n      const isSpan = Text.isText(node) && node._type === types.span.name\n      const isTextBlock = editor.isTextBlock(node)\n      if (isSpan || isTextBlock) {\n        if (!isTextBlock && !Array.isArray(node.marks)) {\n          debug('Adding .marks to span node')\n          Transforms.setNodes(editor, {marks: []}, {at: path})\n          editor.onChange()\n        }\n        for (const op of editor.operations) {\n          // Make sure markDefs are copied over when merging two blocks.\n          if (\n            op.type === 'merge_node' &&\n            op.path.length === 1 &&\n            'markDefs' in op.properties &&\n            op.properties._type === types.block.name &&\n            Array.isArray(op.properties.markDefs) &&\n            op.properties.markDefs.length > 0 &&\n            op.path[0] - 1 >= 0\n          ) {\n            const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n            debug(`Copying markDefs over to merged block`, op)\n            if (editor.isTextBlock(targetBlock)) {\n              const oldDefs = (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n              const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n              const isNormalized = isEqual(newMarkDefs, targetBlock.markDefs)\n              // eslint-disable-next-line max-depth\n              if (!isNormalized) {\n                Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: targetPath, voids: false})\n                editor.onChange()\n              }\n            }\n          }\n          // Make sure markDefs are copied over to new block when splitting a block.\n          if (\n            op.type === 'split_node' &&\n            op.path.length === 1 &&\n            Element.isElementProps(op.properties) &&\n            op.properties._type === types.block.name &&\n            'markDefs' in op.properties &&\n            Array.isArray(op.properties.markDefs) &&\n            op.properties.markDefs.length > 0 &&\n            op.path[0] + 1 < editor.children.length\n          ) {\n            const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] + 1])\n            debug(`Copying markDefs over to split block`, op)\n            if (editor.isTextBlock(targetBlock)) {\n              const oldDefs = (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n              Transforms.setNodes(\n                editor,\n                {markDefs: uniq([...oldDefs, ...op.properties.markDefs])},\n                {at: targetPath, voids: false}\n              )\n              editor.onChange()\n            }\n          }\n          // Make sure marks are reset, if a block is split at the end.\n          if (\n            op.type === 'split_node' &&\n            op.path.length === 2 &&\n            op.properties._type === types.span.name &&\n            'marks' in op.properties &&\n            Array.isArray(op.properties.marks) &&\n            op.properties.marks.length > 0 &&\n            op.path[0] + 1 < editor.children.length\n          ) {\n            const [child, childPath] = Editor.node(editor, [op.path[0] + 1, 0])\n            if (\n              Text.isText(child) &&\n              child.text === '' &&\n              Array.isArray(child.marks) &&\n              child.marks.length > 0\n            ) {\n              Transforms.setNodes(editor, {marks: []}, {at: childPath, voids: false})\n              editor.onChange()\n            }\n          }\n          // Make sure markDefs are reset, if a block is split at start.\n          if (\n            op.type === 'split_node' &&\n            op.path.length === 1 &&\n            op.properties._type === types.block.name &&\n            'markDefs' in op.properties &&\n            Array.isArray(op.properties.markDefs) &&\n            op.properties.markDefs.length > 0\n          ) {\n            const [block, blockPath] = Editor.node(editor, [op.path[0]])\n            if (\n              editor.isTextBlock(block) &&\n              block.children.length === 1 &&\n              block.markDefs &&\n              block.markDefs.length > 0 &&\n              Text.isText(block.children[0]) &&\n              block.children[0].text === '' &&\n              (!block.children[0].marks || block.children[0].marks.length === 0)\n            ) {\n              Transforms.setNodes(editor, {markDefs: []}, {at: blockPath})\n              editor.onChange()\n            }\n          }\n        }\n        // Empty marks if text is empty\n        if (isSpan && Array.isArray(node.marks) && node.marks.length > 0 && node.text === '') {\n          Transforms.setNodes(editor, {marks: []}, {at: path, voids: false})\n          editor.onChange()\n        }\n      }\n      // Check consistency of markDefs\n      if (\n        isTextBlock &&\n        editor.operations.some((op) =>\n          ['split_node', 'remove_node', 'remove_text', 'merge_node'].includes(op.type)\n        )\n      ) {\n        normalizeMarkDefs(editor)\n      }\n    }\n\n    // Special hook before inserting text at the end of an annotation.\n    editor.apply = (op) => {\n      if (op.type === 'insert_text') {\n        const {selection} = editor\n        if (\n          selection &&\n          Range.isCollapsed(selection) &&\n          Editor.marks(editor)?.marks?.some((mark) => !decorators.includes(mark))\n        ) {\n          const [node] = Array.from(\n            Editor.nodes(editor, {\n              mode: 'lowest',\n              at: selection.focus,\n              match: (n) => n._type === types.span.name,\n              voids: false,\n            })\n          )[0] || [undefined]\n          if (\n            Text.isText(node) &&\n            node.text.length === selection.focus.offset &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0\n          ) {\n            apply(op)\n            Transforms.splitNodes(editor, {\n              match: Text.isText,\n              at: {...selection.focus, offset: selection.focus.offset},\n            })\n            const marksWithoutAnnotationMarks: string[] = (\n              {\n                ...(Editor.marks(editor) || {}),\n              }.marks || []\n            ).filter((mark) => decorators.includes(mark))\n            Transforms.setNodes(\n              editor,\n              {marks: marksWithoutAnnotationMarks},\n              {at: Path.next(selection.focus.path)}\n            )\n            return\n          }\n        }\n      }\n      apply(op)\n    }\n\n    // Override built in addMark function\n    editor.addMark = (mark: string) => {\n      if (editor.selection) {\n        if (Range.isExpanded(editor.selection)) {\n          // Split if needed\n          Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n          // Use new selection\n          const splitTextNodes = [\n            ...Editor.nodes(editor, {at: editor.selection, match: Text.isText}),\n          ]\n          const shouldRemoveMark = flatten(\n            splitTextNodes.map((item) => item[0]).map((node) => node.marks)\n          ).includes(mark)\n          if (shouldRemoveMark) {\n            editor.removeMark(mark)\n            return\n          }\n          Editor.withoutNormalizing(editor, () => {\n            splitTextNodes.forEach(([node, path]) => {\n              const marks = [\n                ...(Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark\n                ),\n                mark,\n              ]\n              Transforms.setNodes(\n                editor,\n                {marks},\n                {at: path, match: Text.isText, split: true, hanging: true}\n              )\n            })\n          })\n          Editor.normalize(editor)\n        } else {\n          const existingMarks: string[] =\n            {\n              ...(Editor.marks(editor) || {}),\n            }.marks || []\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            marks: [...existingMarks, mark],\n          }\n          editor.marks = marks as Text\n        }\n        editor.onChange()\n      }\n    }\n\n    // Override built in removeMark function\n    editor.removeMark = (mark: string) => {\n      const {selection} = editor\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Editor.withoutNormalizing(editor, () => {\n            // Split if needed\n            Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n            if (editor.selection) {\n              const splitTextNodes = [\n                ...Editor.nodes(editor, {at: editor.selection, match: Text.isText}),\n              ]\n              splitTextNodes.forEach(([node, path]) => {\n                const block = editor.children[path[0]]\n                if (Element.isElement(block) && block.children.includes(node)) {\n                  Transforms.setNodes(\n                    editor,\n                    {\n                      marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                        (eMark: string) => eMark !== mark\n                      ),\n                    },\n                    {at: path}\n                  )\n                }\n              })\n            }\n          })\n          Editor.normalize(editor)\n        } else {\n          const existingMarks: string[] =\n            {\n              ...(Editor.marks(editor) || {}),\n            }.marks || []\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            marks: existingMarks.filter((eMark) => eMark !== mark),\n          }\n          editor.marks = marks as Text\n        }\n        editor.onChange()\n      }\n    }\n\n    editor.pteIsMarkActive = (mark: string): boolean => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return false\n      }\n      let existingMarks =\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      if (Range.isExpanded(editor.selection)) {\n        Array.from(Editor.nodes(editor, {match: Text.isText, at: editor.selection})).forEach(\n          (n) => {\n            const [node] = n as NodeEntry<Text>\n            existingMarks = uniq([...existingMarks, ...((node.marks as string[]) || [])])\n          }\n        )\n      }\n      return existingMarks.includes(mark)\n    }\n\n    // Custom editor function to toggle a mark\n    editor.pteToggleMark = (mark: string) => {\n      const isActive = editor.pteIsMarkActive(mark)\n      if (isActive) {\n        debug(`Remove mark '${mark}'`)\n        Editor.removeMark(editor, mark)\n      } else {\n        debug(`Add mark '${mark}'`)\n        Editor.addMark(editor, mark, true)\n      }\n      editor.onChange()\n    }\n    return editor\n  }\n\n  /**\n   * Normalize re-marked spans in selection\n   */\n  function mergeSpans(editor: Editor) {\n    const {selection} = editor\n    if (selection) {\n      for (const [node, path] of Array.from(\n        Editor.nodes(editor, {\n          at: Editor.range(editor, [selection.anchor.path[0]], [selection.focus.path[0]]),\n        })\n      ).reverse()) {\n        const [parent] = path.length > 1 ? Editor.node(editor, Path.parent(path)) : [undefined]\n        const nextPath = [path[0], path[1] + 1]\n        if (Editor.isBlock(editor, parent)) {\n          const nextNode = parent.children[nextPath[1]]\n          if (Text.isText(node) && Text.isText(nextNode) && isEqual(nextNode.marks, node.marks)) {\n            debug('Merging spans')\n            Transforms.mergeNodes(editor, {at: nextPath, voids: true})\n            editor.onChange()\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Normalize markDefs\n   *\n   */\n  function normalizeMarkDefs(editor: Editor) {\n    const {selection} = editor\n    if (selection) {\n      const blocks = Editor.nodes(editor, {\n        at: selection,\n        match: (n) => n._type === types.block.name,\n      })\n      for (const [block, path] of blocks) {\n        if (editor.isTextBlock(block)) {\n          const newMarkDefs = (block.markDefs || []).filter((def) => {\n            return block.children.find((child) => {\n              return (\n                Text.isText(child) && Array.isArray(child.marks) && child.marks.includes(def._key)\n              )\n            })\n          })\n          if (!isEqual(newMarkDefs, block.markDefs)) {\n            debug('Removing markDef not in use')\n            Transforms.setNodes(\n              editor,\n              {\n                markDefs: newMarkDefs,\n              },\n              {at: path}\n            )\n            editor.onChange()\n          }\n        }\n      }\n    }\n  }\n}\n","import {Subject} from 'rxjs'\nimport {\n  EditorChange,\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toPortableTextRange} from '../../utils/ranges'\nimport {fromSlateValue} from '../../utils/values'\nimport {KEY_TO_VALUE_ELEMENT, SLATE_TO_PORTABLE_TEXT_RANGE} from '../../utils/weakMaps'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  change$: Subject<EditorChange>,\n  types: PortableTextMemberSchemaTypes\n) {\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          ptRange = existing\n        } else {\n          ptRange = toPortableTextRange(\n            fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n            editor.selection,\n            types\n          )\n          SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n        }\n      }\n      debug(`Emitting selection ${JSON.stringify(ptRange || null)}`)\n      if (ptRange) {\n        change$.next({type: 'selection', selection: ptRange})\n      } else {\n        change$.next({type: 'selection', selection: null})\n      }\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      const hasChanges = editor.operations.length > 0\n      onChange()\n      if (hasChanges) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import {Element, Operation, InsertNodeOperation, Text as SlateText} from 'slate'\nimport {\n  isPortableTextTextBlock,\n  PortableTextTextBlock,\n  isPortableTextSpan,\n  PortableTextSpan,\n  PortableTextListBlock,\n  isPortableTextListBlock,\n} from '@sanity/types'\nimport {debugWithName} from '../../utils/debug'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes(types: PortableTextMemberSchemaTypes) {\n  return function withSchemaTypes(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return isPortableTextTextBlock(value) && value._type === types.block.name\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isPortableTextSpan(value) && value._type == types.span.name\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return isPortableTextListBlock(value) && value._type === types.block.name\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        types.block.name !== element._type &&\n        (types.blockObjects.map((obj) => obj.name).includes(element._type) ||\n          types.inlineObjects.map((obj) => obj.name).includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = types.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n    // Extend Slate's default normalization to add _type span to span inserted after a inline void object\n    const {apply} = editor\n    editor.apply = (op: Operation) => {\n      const isInsertTextWithoutType =\n        op.type === 'insert_node' &&\n        op.path.length === 2 &&\n        SlateText.isText(op.node) &&\n        op.node._type === undefined\n      if (isInsertTextWithoutType) {\n        const insertNodeOperation = op as InsertNodeOperation\n        const newNode: SlateText = {\n          ...(insertNodeOperation.node as SlateText),\n          _type: 'span',\n        }\n        op.node = newNode\n        debug('Setting span type to child without a type', op)\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Range, Transforms, Text} from 'slate'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withUtils')\n\ninterface Options {\n  schemaTypes: PortableTextMemberSchemaTypes\n  keyGenerator: () => string\n}\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({schemaTypes, keyGenerator}: Options) {\n  return function withUtils(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    // Expands the the selection to wrap around the word the focus is at\n    editor.pteExpandToWord = () => {\n      const {selection} = editor\n      if (selection && !Range.isExpanded(selection)) {\n        const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n        if (!textNode || !Text.isText(textNode) || textNode.text.length === 0) {\n          debug(`pteExpandToWord: Can't expand to word here`)\n          return\n        }\n        const {focus} = selection\n        const focusOffset = focus.offset\n        const charsBefore = textNode.text.slice(0, focusOffset)\n        const charsAfter = textNode.text.slice(focusOffset, -1)\n        const isEmpty = (str: string) => str.match(/\\s/g)\n        const whiteSpaceBeforeIndex = charsBefore\n          .split('')\n          .reverse()\n          .findIndex((str) => isEmpty(str))\n        const newStartOffset =\n          whiteSpaceBeforeIndex > -1 ? charsBefore.length - whiteSpaceBeforeIndex : 0\n        const whiteSpaceAfterIndex = charsAfter.split('').findIndex((obj) => isEmpty(obj))\n        const newEndOffset =\n          charsBefore.length +\n          (whiteSpaceAfterIndex > -1 ? whiteSpaceAfterIndex : charsAfter.length + 1)\n        if (!(newStartOffset === newEndOffset || isNaN(newStartOffset) || isNaN(newEndOffset))) {\n          debug('pteExpandToWord: Expanding to focused word')\n          Transforms.setSelection(editor, {\n            anchor: {...selection.anchor, offset: newStartOffset},\n            focus: {...selection.focus, offset: newEndOffset},\n          })\n          return\n        }\n        debug(`pteExpandToWord: Can't expand to word here`)\n      }\n    }\n    return editor\n  }\n}\n","/* eslint-disable max-statements */\n/* eslint-disable complexity */\nimport {Editor, Transforms, Path, Range} from 'slate'\nimport isHotkey from 'is-hotkey'\nimport {ReactEditor} from '@sanity/slate-react'\nimport {isPortableTextSpan, isPortableTextTextBlock} from '@sanity/types'\nimport {PortableTextMemberSchemaTypes, PortableTextSlateEditor} from '../../types/editor'\nimport {HotkeyOptions} from '../../types/options'\nimport {debugWithName} from '../../utils/debug'\nimport {toSlateValue} from '../../utils/values'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\nconst DEFAULT_HOTKEYS: HotkeyOptions = {\n  marks: {\n    'mod+b': 'strong',\n    'mod+i': 'em',\n    'mod+u': 'underline',\n    \"mod+'\": 'code',\n  },\n  custom: {},\n}\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions || DEFAULT_HOTKEYS // TODO: Merge where possible? A union?\n  const createEmptyBlock = () =>\n    toSlateValue(\n      [\n        {\n          _type: types.block.name,\n          _key: keyGenerator(),\n          style: 'normal',\n          markDefs: [],\n          children: [\n            {\n              _type: 'span',\n              _key: keyGenerator(),\n              text: '',\n              marks: [],\n            },\n          ],\n        },\n      ],\n      portableTextEditor\n    )[0]\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: React.KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          // eslint-disable-next-line guard-for-in\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editor.pteToggleMark(mark)\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          // eslint-disable-next-line guard-for-in\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n\n      const isEnter = isHotkey('enter', event.nativeEvent)\n      const isTab = isHotkey('tab', event.nativeEvent)\n      const isShiftEnter = isHotkey('shift+enter', event.nativeEvent)\n      const isShiftTab = isHotkey('shift+tab', event.nativeEvent)\n      const isBackspace = isHotkey('backspace', event.nativeEvent)\n      const isDelete = isHotkey('delete', event.nativeEvent)\n\n      // Disallow deleting void blocks by backspace from another line.\n      // Otherwise it's so easy to delete the void block above when trying to delete text on\n      // the line below or above\n      if (\n        isBackspace &&\n        editor.selection &&\n        editor.selection.focus.path[0] > 0 &&\n        Range.isCollapsed(editor.selection)\n      ) {\n        const [prevBlock, prevPath] = Editor.node(\n          editor,\n          Path.previous(editor.selection.focus.path.slice(0, 1))\n        )\n        const [focusBlock] = Editor.node(editor, editor.selection.focus, {depth: 1})\n        if (\n          prevBlock &&\n          focusBlock &&\n          Editor.isVoid(editor, prevBlock) &&\n          editor.selection.focus.offset === 0\n        ) {\n          debug('Preventing deleting void block above')\n          event.preventDefault()\n          event.stopPropagation()\n          Transforms.removeNodes(editor, {match: (n) => n === focusBlock})\n          Transforms.select(editor, prevPath)\n          editor.onChange()\n          return\n        }\n      }\n      if (\n        isDelete &&\n        editor.selection &&\n        editor.selection.focus.offset === 0 &&\n        Range.isCollapsed(editor.selection) &&\n        editor.children[editor.selection.focus.path[0] + 1]\n      ) {\n        const [nextBlock] = Editor.node(editor, Path.next(editor.selection.focus.path.slice(0, 1)))\n        const [focusBlock, focusBlockPath] = Editor.node(editor, editor.selection.focus, {depth: 1})\n        if (\n          nextBlock &&\n          focusBlock &&\n          !Editor.isVoid(editor, focusBlock) &&\n          Editor.isVoid(editor, nextBlock)\n        ) {\n          debug('Preventing deleting void block below')\n          event.preventDefault()\n          event.stopPropagation()\n          Transforms.removeNodes(editor, {match: (n) => n === focusBlock})\n          Transforms.select(editor, focusBlockPath)\n          editor.onChange()\n          return\n        }\n      }\n\n      // Tab for lists\n      // Only steal tab when we are on a plain text span or we are at the start of the line (fallback if the whole block is annotated or contains a single inline object)\n      // Otherwise tab is reserved for accessability for buttons etc.\n      if ((isTab || isShiftTab) && editor.selection) {\n        const [focusChild] = Editor.node(editor, editor.selection.focus, {depth: 2})\n        const [focusBlock] = isPortableTextSpan(focusChild)\n          ? Editor.node(editor, editor.selection.focus, {depth: 1})\n          : []\n        const hasAnnotationFocus =\n          focusChild &&\n          isPortableTextTextBlock(focusBlock) &&\n          isPortableTextSpan(focusChild) &&\n          (focusChild.marks || ([] as string[])).filter((m) =>\n            (focusBlock.markDefs || []).map((def) => def._key).includes(m)\n          ).length > 0\n        const [start] = Range.edges(editor.selection)\n        const atStartOfNode = Editor.isStart(editor, start, start.path)\n\n        if (\n          focusChild &&\n          isPortableTextSpan(focusChild) &&\n          (!hasAnnotationFocus || atStartOfNode) &&\n          editor.pteIncrementBlockLevels(isShiftTab)\n        ) {\n          event.preventDefault()\n        }\n      }\n\n      // Deal with enter key combos\n      if (isEnter && !isShiftEnter && editor.selection) {\n        let focusBlock\n        try {\n          ;[focusBlock] = Editor.node(editor, editor.selection.focus, {depth: 1})\n        } catch (err) {\n          // Just ignore\n        }\n        // List item enter key\n        if (editor.isListBlock(focusBlock)) {\n          if (editor.pteEndList()) {\n            event.preventDefault()\n          }\n          return\n        }\n\n        // Enter from another style than the first (default one)\n        if (\n          editor.isTextBlock(focusBlock) &&\n          focusBlock.style &&\n          focusBlock.style !== types.styles[0].value\n        ) {\n          const [, end] = Range.edges(editor.selection)\n          const endAtEndOfNode = Editor.isEnd(editor, end, end.path)\n          if (endAtEndOfNode) {\n            Editor.insertNode(editor, createEmptyBlock())\n            event.preventDefault()\n            return\n          }\n        }\n        // Block object enter key\n        if (focusBlock && Editor.isVoid(editor, focusBlock)) {\n          Editor.insertNode(editor, createEmptyBlock())\n          event.preventDefault()\n          return\n        }\n      }\n\n      // Soft line breaks\n      if (isShiftEnter) {\n        event.preventDefault()\n        editor.insertText('\\n')\n        return\n      }\n\n      // Undo/redo\n      if (isHotkey('mod+z', event.nativeEvent)) {\n        event.preventDefault()\n        editor.undo()\n        return\n      }\n      if (isHotkey('mod+y', event.nativeEvent) || isHotkey('mod+shift+z', event.nativeEvent)) {\n        event.preventDefault()\n        editor.redo()\n      }\n    }\n    return editor\n  }\n}\n","import {Node, Transforms, Editor, Descendant, Range} from 'slate'\nimport {htmlToBlocks, normalizeBlock} from '@sanity/block-tools'\nimport {ReactEditor} from '@sanity/slate-react'\nimport {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {\n  EditorChanges,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {fromSlateValue, toSlateValue} from '../../utils/values'\nimport {validateValue} from '../../utils/validateValue'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withInsertData')\n\n/**\n * This plugin handles copy/paste in the editor\n *\n */\nexport function createWithInsertData(\n  change$: EditorChanges,\n  schemaTypes: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string\n) {\n  return function withInsertData(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    const blockTypeName = schemaTypes.block.name\n    const spanTypeName = schemaTypes.span.name\n\n    const toPlainText = (blocks: PortableTextBlock[]) => {\n      return blocks\n        .map((block) => {\n          if (editor.isTextBlock(block)) {\n            return block.children\n              .map((child: PortableTextChild) => {\n                if (child._type === spanTypeName) {\n                  return child.text\n                }\n                return `[${\n                  schemaTypes.inlineObjects.find((t) => t.name === child._type)?.title || 'Object'\n                }]`\n              })\n              .join('')\n          }\n          return `[${\n            schemaTypes.blockObjects.find((t) => t.name === block._type)?.title || 'Object'\n          }]`\n        })\n        .join('\\n\\n')\n    }\n\n    editor.setFragmentData = (data: DataTransfer, originEvent) => {\n      const {selection} = editor\n\n      if (!selection) {\n        return\n      }\n\n      const [start, end] = Range.edges(selection)\n      const startVoid = Editor.void(editor, {at: start.path})\n      const endVoid = Editor.void(editor, {at: end.path})\n\n      if (Range.isCollapsed(selection) && !startVoid) {\n        return\n      }\n\n      // Create a fake selection so that we can add a Base64-encoded copy of the\n      // fragment to the HTML, to decode on future pastes.\n      const domRange = ReactEditor.toDOMRange(editor, selection)\n      let contents = domRange.cloneContents()\n      // COMPAT: If the end node is a void node, we need to move the end of the\n      // range from the void node's spacer span, to the end of the void node's\n      // content, since the spacer is before void's content in the DOM.\n      if (endVoid) {\n        const [voidNode] = endVoid\n        const r = domRange.cloneRange()\n        const domNode = ReactEditor.toDOMNode(editor, voidNode)\n        r.setEndAfter(domNode)\n        contents = r.cloneContents()\n      }\n      // Remove any zero-width space spans from the cloned DOM so that they don't\n      // show up elsewhere when pasted.\n      Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach((zw) => {\n        const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n        zw.textContent = isNewline ? '\\n' : ''\n      })\n      // Clean up the clipboard HTML for editor spesific attributes\n      Array.from(contents.querySelectorAll('*')).forEach((elm) => {\n        elm.removeAttribute('contentEditable')\n        elm.removeAttribute('data-slate-inline')\n        elm.removeAttribute('data-slate-leaf')\n        elm.removeAttribute('data-slate-node')\n        elm.removeAttribute('data-slate-spacer')\n        elm.removeAttribute('data-slate-string')\n        elm.removeAttribute('data-slate-zero-width')\n        elm.removeAttribute('draggable')\n        for (const key in elm.attributes) {\n          if (elm.hasAttribute(key)) {\n            elm.removeAttribute(key)\n          }\n        }\n      })\n      const div = contents.ownerDocument.createElement('div')\n      div.appendChild(contents)\n      div.setAttribute('hidden', 'true')\n      contents.ownerDocument.body.appendChild(div)\n      const asHTML = div.innerHTML\n      contents.ownerDocument.body.removeChild(div)\n      const fragment = editor.getFragment()\n      const portableText = fromSlateValue(fragment, blockTypeName)\n\n      const asJSON = JSON.stringify(portableText)\n      const asPlainText = toPlainText(portableText)\n      data.clearData()\n      data.setData('text/plain', asPlainText)\n      data.setData('text/html', asHTML)\n      data.setData('application/json', asJSON)\n      data.setData('application/x-portable-text', asJSON)\n      debug('text', asPlainText)\n      data.setData('application/x-portable-text-event-origin', originEvent || 'external')\n      debug('Set fragment data', asJSON, asHTML)\n    }\n\n    editor.insertPortableTextData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const pText = data.getData('application/x-portable-text')\n      const origin = data.getData('application/x-portable-text-event-origin')\n      debug(`Inserting portable text from ${origin} event`, pText)\n      if (pText) {\n        const parsed = JSON.parse(pText) as PortableTextBlock[]\n        if (Array.isArray(parsed) && parsed.length > 0) {\n          const slateValue = regenerateKeys(\n            editor,\n            toSlateValue(parsed, {schemaTypes}),\n            keyGenerator,\n            spanTypeName\n          )\n          // Validate the result\n          const validation = validateValue(parsed, schemaTypes, keyGenerator)\n          // Bail out if it's not valid\n          if (!validation.valid) {\n            const errorDescription = `${validation.resolution?.description}`\n            change$.next({\n              type: 'error',\n              level: 'warning',\n              name: 'pasteError',\n              description: errorDescription,\n              data: validation,\n            })\n            debug('Invalid insert result', validation)\n            return false\n          }\n          mixMarkDefs(editor, slateValue)\n          editor.insertFragment(slateValue)\n          editor.onChange()\n          return true\n        }\n      }\n      return false\n    }\n\n    editor.insertTextOrHTMLData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        debug('No selection, not inserting')\n        return false\n      }\n      change$.next({type: 'loading', isLoading: true}) // This could potentially take some time\n      const html = data.getData('text/html')\n      const text = data.getData('text/plain')\n      if (html || text) {\n        debug('Inserting data', data)\n        let portableText: PortableTextBlock[]\n        let fragment: Node[]\n        let insertedType\n\n        if (html) {\n          portableText = htmlToBlocks(html, schemaTypes.portableText).map((block) =>\n            normalizeBlock(block, {blockTypeName})\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {schemaTypes})\n          insertedType = 'HTML'\n        } else {\n          // plain text\n          const blocks = escapeHtml(text)\n            .split(/\\n{2,}/)\n            .map((line) =>\n              line ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>` : '<p></p>'\n            )\n            .join('')\n          const textToHtml = `<html><body>${blocks}</body></html>`\n          portableText = htmlToBlocks(textToHtml, schemaTypes.portableText).map((block) =>\n            normalizeBlock(block, {blockTypeName})\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {\n            schemaTypes,\n          })\n          insertedType = 'text'\n        }\n\n        // Validate the result\n        const validation = validateValue(portableText, schemaTypes, keyGenerator)\n\n        // Bail out if it's not valid\n        if (!validation.valid) {\n          const errorDescription = `Could not validate the resulting portable text to insert.\\n${validation.resolution?.description}\\nTry to insert as plain text (shift-paste) instead.`\n          change$.next({\n            type: 'error',\n            level: 'warning',\n            name: 'pasteError',\n            description: errorDescription,\n            data: validation,\n          })\n          debug('Invalid insert result', validation)\n          return false\n        }\n        debug(`Inserting ${insertedType} fragment at ${JSON.stringify(editor.selection)}`)\n        mixMarkDefs(editor, fragment)\n        editor.insertFragment(fragment)\n        editor.onChange()\n        change$.next({type: 'loading', isLoading: false})\n        return true\n      }\n      change$.next({type: 'loading', isLoading: false})\n      return false\n    }\n\n    editor.insertData = (data: DataTransfer) => {\n      if (!editor.insertPortableTextData(data)) {\n        editor.insertTextOrHTMLData(data)\n      }\n    }\n\n    editor.insertFragmentData = (data: DataTransfer): boolean => {\n      const fragment = data.getData('application/x-portable-text')\n      if (fragment) {\n        const parsed = JSON.parse(fragment)\n        editor.insertFragment(parsed)\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n\nfunction regenerateKeys(\n  editor: PortableTextSlateEditor,\n  fragment: Descendant[],\n  keyGenerator: () => string,\n  spanTypeName: string\n): Descendant[] {\n  return fragment.map((node) => {\n    const newNode: Descendant = {...node}\n    // Ensure the copy has new keys\n    if (editor.isTextBlock(newNode)) {\n      newNode.markDefs = (newNode.markDefs || []).map((def) => {\n        const oldKey = def._key\n        const newKey = keyGenerator()\n        if (editor.isTextBlock(newNode)) {\n          newNode.children = newNode.children.map((child) =>\n            child._type === spanTypeName && editor.isTextSpan(child)\n              ? {\n                  ...child,\n                  marks:\n                    child.marks && child.marks.includes(oldKey)\n                      ? // eslint-disable-next-line max-nested-callbacks\n                        [...child.marks].filter((mark) => mark !== oldKey).concat(newKey)\n                      : child.marks,\n                }\n              : child\n          )\n        }\n        return {...def, _key: newKey}\n      })\n    }\n    const nodeWithNewKeys = {...newNode, _key: keyGenerator()}\n    if (editor.isTextBlock(nodeWithNewKeys)) {\n      nodeWithNewKeys.children = nodeWithNewKeys.children.map((child) => ({\n        ...child,\n        _key: keyGenerator(),\n      }))\n    }\n    return nodeWithNewKeys as Descendant\n  })\n}\n\nfunction mixMarkDefs(editor: PortableTextSlateEditor, fragment: any) {\n  if (!editor.selection) {\n    return false\n  }\n  const [focusBlock, focusPath] = Editor.node(editor, editor.selection, {depth: 1})\n  if (editor.isTextBlock(focusBlock) && editor.isTextBlock(fragment[0])) {\n    const {markDefs} = focusBlock\n    debug('Mixing markDefs of focusBlock and fragments[0] block', markDefs, fragment[0].markDefs)\n    // As the first block will be inserted into another block (potentially), mix those markDefs\n    Transforms.setNodes(\n      editor,\n      {\n        markDefs: [...(fragment[0].markDefs || []), ...(markDefs || [])],\n      },\n      {at: focusPath, mode: 'lowest', voids: false}\n    )\n    return true\n  }\n  return false\n}\n","import {BaseOperation, Editor, NodeEntry, Node} from 'slate'\nimport {PortableTextSlateEditor} from '../../types/editor'\nimport {createEditorOptions} from '../../types/options'\nimport {createOperationToPatches} from '../../utils/operationToPatches'\nimport {createWithEditableAPI} from './createWithEditableAPI'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextLists} from './createWithPortableTextLists'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\n\nexport {createWithEditableAPI} from './createWithEditableAPI'\nexport {createWithHotkeys} from './createWithHotKeys'\nexport {createWithInsertData} from './createWithInsertData'\nexport {createWithMaxBlocks} from './createWithMaxBlocks'\nexport {createWithObjectKeys} from './createWithObjectKeys'\nexport {createWithPatches} from './createWithPatches'\nexport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nexport {createWithPortableTextLists} from './createWithPortableTextLists'\nexport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nexport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nexport {createWithSchemaTypes} from './createWithSchemaTypes'\nexport {createWithUndoRedo} from './createWithUndoRedo'\nexport {createWithUtils} from './createWithUtils'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\nconst originalFnMap = new WeakMap<PortableTextSlateEditor, OriginalEditorFunctions>()\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: createEditorOptions\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {portableTextEditor} = options\n  const {schemaTypes, keyGenerator, readOnly, change$, syncValue, incomingPatches$} =\n    portableTextEditor\n  e.maxBlocks = portableTextEditor.maxBlocks || -1\n  e.readOnly = portableTextEditor.readOnly || false\n  if (e.destroy) {\n    e.destroy()\n  } else {\n    // Save a copy of the original editor functions here before they were changed by plugins.\n    // We will put them back when .destroy is called (see below).\n    originalFnMap.set(e, {\n      apply: e.apply,\n      onChange: e.onChange,\n      normalizeNode: e.normalizeNode,\n    })\n  }\n  const operationToPatches = createOperationToPatches(schemaTypes)\n  const withObjectKeys = createWithObjectKeys(schemaTypes, keyGenerator)\n  const withSchemaTypes = createWithSchemaTypes(schemaTypes)\n  const withEditableAPI = createWithEditableAPI(portableTextEditor, schemaTypes, keyGenerator)\n  const [withPatches, withPatchesCleanupFunction] = readOnly\n    ? []\n    : createWithPatches({\n        patchFunctions: operationToPatches,\n        change$,\n        schemaTypes,\n        syncValue,\n        incomingPatches$,\n      })\n  const withMaxBlocks = createWithMaxBlocks()\n  const withPortableTextLists = createWithPortableTextLists(schemaTypes)\n  const [withUndoRedo, withUndoRedoCleanupFunction] = readOnly\n    ? []\n    : createWithUndoRedo(incomingPatches$)\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(schemaTypes)\n  const withPortableTextBlockStyle = createWithPortableTextBlockStyle(schemaTypes, change$)\n\n  const withPlaceholderBlock = createWithPlaceholderBlock({\n    keyGenerator,\n    schemaTypes,\n  })\n\n  const withUtils = createWithUtils({keyGenerator, schemaTypes})\n  const withPortableTextSelections = createWithPortableTextSelections(change$, schemaTypes)\n\n  e.destroy = () => {\n    const originalFunctions = originalFnMap.get(e)\n    if (!originalFunctions) {\n      throw new Error('Could not find pristine versions of editor functions')\n    }\n    e.onChange = originalFunctions.onChange\n    e.apply = originalFunctions.apply\n    e.normalizeNode = originalFunctions.normalizeNode\n    if (withPatchesCleanupFunction) {\n      withPatchesCleanupFunction()\n    }\n    if (withUndoRedoCleanupFunction) {\n      withUndoRedoCleanupFunction()\n    }\n  }\n  if (readOnly) {\n    return withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withUtils(\n              withPlaceholderBlock(\n                withPortableTextLists(withPortableTextSelections(withEditableAPI(e)))\n              )\n            )\n          )\n        )\n      )\n    )\n  }\n\n  // The 'if' here is only to satisfy Typscript\n  if (withUndoRedo && withPatches) {\n    // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n    return withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPortableTextLists(\n              withPlaceholderBlock(\n                withUtils(\n                  withMaxBlocks(\n                    withUndoRedo(withPatches(withPortableTextSelections(withEditableAPI(e))))\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  }\n  return e\n}\n","import React, {PropsWithChildren} from 'react'\nimport {\n  ArrayDefinition,\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  SpanSchemaType,\n} from '@sanity/types'\nimport {Subscription, Subject, defer, of, EMPTY, Observable, OperatorFunction} from 'rxjs'\nimport {concatMap, share, switchMap, tap} from 'rxjs/operators'\nimport {randomKey} from '@sanity/util/content'\nimport {createEditor, Descendant, Transforms} from 'slate'\nimport {debounce, isEqual, throttle} from 'lodash'\nimport {Slate, withReact} from '@sanity/slate-react'\nimport {compileType} from '../utils/schema'\nimport {getPortableTextMemberSchemaTypes} from '../utils/getPortableTextMemberSchemaTypes'\nimport type {Patch} from '../types/patch'\nimport {\n  EditorSelection,\n  EditorChange,\n  EditorChanges,\n  EditableAPI,\n  InvalidValueResolution,\n  PatchObservable,\n  PortableTextSlateEditor,\n  EditableAPIDeleteOptions,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {validateValue} from '../utils/validateValue'\nimport {debugWithName} from '../utils/debug'\nimport {getValueOrInitialValue, toSlateValue} from '../utils/values'\nimport {KEY_TO_SLATE_ELEMENT, KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport {FLUSH_PATCHES_DEBOUNCE_MS} from '../constants'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionContext} from './hooks/usePortableTextEditorSelection'\nimport {PortableTextEditorReadOnlyContext} from './hooks/usePortableTextReadOnly'\nimport {PortableTextEditorValueContext} from './hooks/usePortableTextEditorValue'\nimport {withPlugins} from './plugins'\n\nexport const defaultKeyGenerator = () => randomKey(12)\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n */\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n */\nexport type PortableTextEditorProps = PropsWithChildren<{\n  /**\n   * Function that gets called when the editor changes the value\n   */\n  onChange: (change: EditorChange) => void\n\n  /**\n   * Schema type for the portable text field\n   */\n  schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n  /**\n   * Maximum number of blocks to allow within the editor\n   */\n  maxBlocks?: number | string\n\n  /**\n   * Whether or not the editor should be in read-only mode\n   */\n  readOnly?: boolean\n\n  /**\n   * The current value of the portable text field\n   */\n  value?: PortableTextBlock[]\n\n  /**\n   * Function used to generate keys for array items (`_key`)\n   */\n  keyGenerator?: () => string\n\n  /**\n   * Observable of incoming patches - used for undo/redo operations,\n   * adjusting editor selections on concurrent editing and similar\n   */\n  incomingPatches$?: PatchObservable\n}>\n\n/**\n * @internal\n */\n\nexport interface PortableTextEditorState {\n  invalidValueResolution: InvalidValueResolution | null\n  initialSlateEditorValue: Descendant[]\n}\nexport class PortableTextEditor extends React.Component<\n  PortableTextEditorProps,\n  PortableTextEditorState\n> {\n  public change$: EditorChanges = new Subject()\n  public keyGenerator: () => string\n  public maxBlocks: number | undefined\n  public schemaTypes: PortableTextMemberSchemaTypes\n  public readOnly: boolean\n  public slateInstance: PortableTextSlateEditor\n  public type: ArraySchemaType<PortableTextBlock>\n  public incomingPatches$?: PatchObservable\n\n  private changeSubscription: Subscription\n  private editable?: EditableAPI\n  private pendingPatches: Patch[] = []\n  private returnedPatches: Patch[] = []\n  private selectionRef: React.MutableRefObject<EditorSelection | null>\n  private hasPendingLocalPatches: React.MutableRefObject<boolean | null>\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (!props.schemaType) {\n      throw new Error('PortableTextEditor: missing \"type\" property')\n    }\n\n    this.hasPendingLocalPatches = React.createRef()\n    this.hasPendingLocalPatches.current = false\n\n    this.selectionRef = React.createRef()\n\n    this.state = {\n      invalidValueResolution: null,\n      initialSlateEditorValue: [], // Created in the constructor\n    }\n\n    // Test if we have a compiled schema type, if not, conveniently compile it\n    this.type = props.schemaType.hasOwnProperty('jsonType')\n      ? props.schemaType\n      : compileType(props.schemaType)\n    // Indicate that we are loading\n    this.change$.next({type: 'loading', isLoading: true})\n\n    // Get the block types feature set (lookup table)\n    this.schemaTypes = getPortableTextMemberSchemaTypes(this.type)\n\n    // Setup keyGenerator (either from props, or default)\n    this.keyGenerator = props.keyGenerator || defaultKeyGenerator\n\n    // Setup processed incoming patches stream\n    if (props.incomingPatches$) {\n      // Buffer patches until we are no longer producing local patches\n      this.incomingPatches$ = props.incomingPatches$\n        .pipe(\n          tap(({patches}: {patches: Patch[]; snapshot: PortableTextBlock[] | undefined}) => {\n            // Reset hasPendingLocalPatches when local patches are returned\n            if (patches.some((p) => p.origin === 'local')) {\n              this.hasPendingLocalPatches.current = false\n            }\n          })\n        )\n        .pipe(\n          bufferUntil(() => !this.hasPendingLocalPatches.current),\n          concatMap((incoming) => {\n            return incoming\n          }),\n          share()\n        )\n    }\n\n    // Subscribe to editor events and set state for selection and pending patches\n    this.changeSubscription = this.change$.subscribe((next: EditorChange): void => {\n      const {onChange} = this.props\n      switch (next.type) {\n        case 'patch':\n          this.pendingPatches.push(next.patch)\n          if (this.props.incomingPatches$) {\n            this.hasPendingLocalPatches.current = true\n          }\n          this.flushDebounced()\n          onChange(next)\n          break\n        case 'selection':\n          onChange(next)\n          this.selectionRef.current = next.selection\n          break\n        default:\n          onChange(next)\n      }\n    })\n\n    // Set maxBlocks and readOnly\n    this.maxBlocks =\n      typeof props.maxBlocks === 'undefined'\n        ? undefined\n        : parseInt(props.maxBlocks.toString(), 10) || undefined\n    this.readOnly = Boolean(props.readOnly) || false\n    // Validate the incoming value\n    if (props.value) {\n      const validation = validateValue(props.value, this.schemaTypes, this.keyGenerator)\n      if (props.value && !validation.valid) {\n        this.change$.next({type: 'loading', isLoading: false})\n        this.change$.next({\n          type: 'invalidValue',\n          resolution: validation.resolution,\n          value: props.value,\n        })\n        this.state = {...this.state, invalidValueResolution: validation.resolution}\n      }\n    }\n\n    // Create the slate instance\n    this.slateInstance = withPlugins(withReact(createEditor()), {\n      portableTextEditor: this,\n    })\n\n    this.state = {\n      ...this.state,\n      initialSlateEditorValue: toSlateValue(\n        getValueOrInitialValue(props.value, [\n          this.slateInstance.createPlaceholderBlock(),\n        ] as PortableTextBlock[]),\n        {schemaTypes: this.schemaTypes},\n        KEY_TO_SLATE_ELEMENT.get(this.slateInstance)\n      ),\n    }\n    KEY_TO_VALUE_ELEMENT.set(this.slateInstance, {})\n    KEY_TO_SLATE_ELEMENT.set(this.slateInstance, {})\n  }\n\n  componentWillUnmount() {\n    this.flush()\n    this.changeSubscription.unsubscribe()\n    this.slateInstance.destroy()\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Whenever readOnly toggles, recreate the editor's plugin chain\n    if (this.props.readOnly !== prevProps.readOnly) {\n      this.readOnly = Boolean(this.props.readOnly)\n      this.slateInstance = withPlugins(this.slateInstance, {\n        portableTextEditor: this,\n      })\n    }\n    // Update the maxBlocks prop\n    if (this.props.maxBlocks !== prevProps.maxBlocks) {\n      this.maxBlocks =\n        typeof this.props.maxBlocks === 'undefined'\n          ? undefined\n          : parseInt(this.props.maxBlocks.toString(), 10) || undefined\n      this.slateInstance.maxBlocks = this.maxBlocks\n    }\n    // Sync value from props, but not when we are responding to incoming patches\n    // (if this is the case, we sync the value after the incoming patches has been processed - see createWithPatches plugin)\n    const isPristineEditor =\n      !prevProps.value && this.slateInstance.children === this.state.initialSlateEditorValue\n    if (\n      this.props.value !== prevProps.value &&\n      (isPristineEditor || this.readOnly || !this.props.incomingPatches$)\n    ) {\n      this.syncValue()\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editable = {...this.editable, ...editable}\n    this.change$.next({type: 'value', value: this.props.value || undefined})\n    this.change$.next({type: 'ready'})\n  }\n\n  render() {\n    if (this.state.invalidValueResolution) {\n      return this.state.invalidValueResolution.description\n    }\n\n    return (\n      <PortableTextEditorContext.Provider value={this}>\n        <PortableTextEditorValueContext.Provider value={this.props.value}>\n          <PortableTextEditorReadOnlyContext.Provider value={Boolean(this.props.readOnly)}>\n            <PortableTextEditorSelectionContext.Provider value={this.selectionRef.current}>\n              <Slate\n                onChange={NOOP}\n                editor={this.slateInstance}\n                value={this.state.initialSlateEditorValue}\n              >\n                {this.props.children}\n              </Slate>\n            </PortableTextEditorSelectionContext.Provider>\n          </PortableTextEditorReadOnlyContext.Provider>\n        </PortableTextEditorValueContext.Provider>\n      </PortableTextEditorContext.Provider>\n    )\n  }\n\n  public syncValue: (userCallbackFn?: () => void) => void = (userCallbackFn) => {\n    const val = this.props.value\n    const callbackFn = () => {\n      debug('Updating slate instance')\n      this.slateInstance.onChange()\n      this.change$.next({type: 'value', value: val})\n      if (userCallbackFn) {\n        userCallbackFn()\n      }\n    }\n    // Don't sync the value if we haven't submitted all the local patches yet.\n    if (this.hasPendingLocalPatches.current && !this.readOnly) {\n      debug('Not syncing value (has pending local patches)')\n      retrySync(() => this.syncValue(), callbackFn)\n      return\n    }\n    // Test for diffs between our state value and the incoming value.\n    const isEqualToValue =\n      this.slateInstance.children.length === (val || []).length &&\n      !(val || []).some((blk, index) => {\n        const compareBlock = toSlateValue(\n          [blk],\n          {schemaTypes: this.schemaTypes},\n          KEY_TO_SLATE_ELEMENT.get(this.slateInstance)\n        )[0]\n        if (!isEqual(compareBlock, this.slateInstance.children[index])) {\n          return true\n        }\n        return false\n      })\n    if (isEqualToValue) {\n      debug('Not syncing value (value is equal)')\n      return\n    }\n    // Value is different - validate it.\n    debug('Validating')\n    const validation = validateValue(val, this.schemaTypes, this.keyGenerator)\n    if (val && !validation.valid) {\n      this.change$.next({\n        type: 'invalidValue',\n        resolution: validation.resolution,\n        value: val,\n      })\n      this.setState({invalidValueResolution: validation.resolution})\n    }\n    // Set the new value\n    debug('Replacing changed nodes')\n    if (val && val.length > 0) {\n      const oldSel = this.slateInstance.selection\n      Transforms.deselect(this.slateInstance)\n      const slateValueFromProps = toSlateValue(\n        val,\n        {\n          schemaTypes: this.schemaTypes,\n        },\n        KEY_TO_SLATE_ELEMENT.get(this.slateInstance)\n      )\n      this.slateInstance.children = slateValueFromProps\n      if (oldSel) {\n        Transforms.select(this.slateInstance, oldSel)\n      }\n    }\n    callbackFn()\n  }\n\n  private flush = () => {\n    const {onChange} = this.props\n    const finalPatches = [...this.pendingPatches]\n    if (finalPatches.length > 0) {\n      debug('Flushing', finalPatches)\n      finalPatches.forEach((p) => {\n        this.returnedPatches.push(p)\n      })\n      onChange({type: 'mutation', patches: finalPatches})\n      this.pendingPatches = []\n    }\n  }\n  private flushDebounced = debounce(this.flush, FLUSH_PATCHES_DEBOUNCE_MS, {\n    leading: false,\n    trailing: true,\n  })\n\n  // Static API methods\n  static activeAnnotations = (editor: PortableTextEditor): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n  static addAnnotation = (\n    editor: PortableTextEditor,\n    type: ObjectSchemaType,\n    value?: {[prop: string]: unknown}\n  ): {spanPath: Path; markDefPath: Path} | undefined => editor.editable?.addAnnotation(type, value)\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions\n  ) => editor.editable?.delete(selection, options)\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild\n  ) => {\n    // eslint-disable-next-line react/no-find-dom-node\n    return editor.editable?.findDOMNode(element)\n  }\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n  static focusChild = (editor: PortableTextEditor): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n  static insertChild = (\n    editor: PortableTextEditor,\n    type: SpanSchemaType | ObjectSchemaType,\n    value?: {[prop: string]: unknown}\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n  static insertBlock = (\n    editor: PortableTextEditor,\n    type: BlockSchemaType | ObjectSchemaType,\n    value?: {[prop: string]: unknown}\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n  static isVoid = (editor: PortableTextEditor, element: PortableTextBlock | PortableTextChild) => {\n    return editor.editable?.isVoid(element)\n  }\n  static isObjectPath = (editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n  static select = (editor: PortableTextEditor, selection: EditorSelection | null) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n  static removeAnnotation = (editor: PortableTextEditor, type: ObjectSchemaType) =>\n    editor.editable?.removeAnnotation(type)\n  static toggleBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n}\n\nconst retrySync = throttle((syncFn, callbackFn) => syncFn(callbackFn), 100)\n\nfunction bufferUntil<T>(emitWhen: (currentBuffer: T[]) => boolean): OperatorFunction<T, T[]> {\n  return (source: Observable<T>) =>\n    defer(() => {\n      let buffer: T[] = [] // custom buffer\n      return source.pipe(\n        tap((v) => buffer.push(v)), // add values to buffer\n        switchMap(() => (emitWhen(buffer) ? of(buffer) : EMPTY)), // emit the buffer when the condition is met\n        tap(() => (buffer = [])) // clear the buffer\n      )\n    })\n}\n\nconst NOOP = () => undefined\n","import {isEqual} from 'lodash'\nimport type {Patch} from '../types/patch'\n\n/**\n * Try to compact a set of patches\n *\n */\nexport function compactPatches(patches: Patch[]) {\n  // If the last patch is unsetting everything, just do that\n  const lastPatch = patches.slice(-1)[0]\n  if (lastPatch && lastPatch.type === 'unset' && lastPatch.path.length === 0) {\n    return [lastPatch]\n  }\n  let finalPatches = patches\n  // Run through the patches and remove any redundant ones.\n  finalPatches = finalPatches.filter((patch, index) => {\n    if (!patch) {\n      return false\n    }\n    const nextPatch = finalPatches[index + 1]\n    if (\n      nextPatch &&\n      nextPatch.type === 'set' &&\n      patch.type === 'set' &&\n      isEqual(patch.path, nextPatch.path)\n    ) {\n      return false\n    }\n    return true\n  })\n  if (finalPatches.length !== patches.length) {\n    return finalPatches\n  }\n  return patches\n}\n","import {isEqual} from 'lodash'\nimport {Path, PortableTextBlock} from '@sanity/types'\nimport {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[]\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' && '_key' in point.path[0] && point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' && '_key' in point.path[2] && point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find((blk) => blk._key === blockKey)\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (!block.children || (Array.isArray(block.children) && block.children.length === 0)) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) && block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (anchor && value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus}\n  }\n  return null\n}\n","import {PortableTextObject} from '@sanity/types'\nimport React, {useCallback} from 'react'\n\ntype Props = {\n  annotation: PortableTextObject\n  children: React.ReactNode\n}\nexport function DefaultAnnotation(props: Props) {\n  // eslint-disable-next-line no-alert\n  const handleClick = useCallback(() => alert(JSON.stringify(props.annotation)), [props.annotation])\n  return (\n    <span style={{color: 'blue'}} onClick={handleClick}>\n      {props.children}\n    </span>\n  )\n}\n","import React, {ReactElement, useRef, useMemo, useCallback} from 'react'\nimport {Element as SlateElement, Transforms, Editor, Text} from 'slate'\nimport {ReactEditor, useSlateStatic} from '@sanity/slate-react'\nimport {debugWithName} from '../utils/debug'\nimport {IS_DRAGGING, IS_DRAGGING_ELEMENT_RANGE, IS_DRAGGING_CHILD_ELEMENT} from '../utils/weakMaps'\n\nconst debug = debugWithName('components:DraggableChild')\ndeclare global {\n  interface Document {\n    // TypeScript removed this function from the default types (2021-08-26)\n    caretPositionFromPoint?(x: number, y: number): {offsetNode: Node; offset: number}\n  }\n}\n\nexport interface DraggableChildProps {\n  children: ReactElement\n  element: Text | SlateElement\n  readOnly: boolean\n}\n\nexport const DraggableChild = ({children, element, readOnly}: DraggableChildProps) => {\n  const editor = useSlateStatic()\n  const dragGhostRef: React.MutableRefObject<undefined | HTMLElement> = useRef()\n  const isVoid = useMemo(() => Editor.isVoid(editor, element), [editor, element])\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragOver = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      const isMyDragOver = IS_DRAGGING_CHILD_ELEMENT.get(editor)\n      if (!isMyDragOver) {\n        return\n      }\n      debug('handle drag over')\n      event.preventDefault() // Needed to get the dropEffect showing\n      event.dataTransfer.dropEffect = 'move'\n      // Find the range where the drop happened\n      const range = ReactEditor.findEventRange(editor, event)\n      if (range) {\n        IS_DRAGGING_ELEMENT_RANGE.set(editor, range)\n        Transforms.select(editor, range)\n      }\n    },\n    [editor]\n  )\n\n  // Note: this is called for the dragging child\n  const handleDragStart = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      debug('Drag start')\n      IS_DRAGGING.set(editor, true)\n      IS_DRAGGING_CHILD_ELEMENT.set(editor, element)\n      if (isVoid) {\n        event.dataTransfer.effectAllowed = 'move'\n        // Specify dragImage so that single elements in the preview will not be the drag image,\n        // but always the whole block preview itself.\n        // Also clone it so that it will not be visually clipped by scroll-containers etc.\n        const elm = event.currentTarget\n        if (elm instanceof HTMLElement) {\n          const dragGhost = elm.cloneNode(true) as HTMLElement\n          dragGhostRef.current = dragGhost\n          dragGhost.style.width = `${elm.clientWidth}px`\n          dragGhost.style.height = `${elm.clientHeight}px`\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.top = '-99999px'\n          dragGhost.style.left = '-99999px'\n          if (document.body) {\n            document.body.appendChild(dragGhost)\n            const rect = elm.getBoundingClientRect()\n            const x = event.clientX - rect.left\n            const y = event.clientY - rect.top\n            dragGhost.style.width = `${rect.width}px`\n            dragGhost.style.height = `${rect.height}px`\n            event.dataTransfer.setDragImage(dragGhost, x, y)\n          }\n        }\n      }\n    },\n    [editor, element, isVoid]\n  )\n\n  if (readOnly) {\n    return children\n  }\n\n  return (\n    <span draggable={isVoid} onDragStart={handleDragStart} onDragOver={handleDragOver}>\n      {children}\n    </span>\n  )\n}\n","import React, {ReactElement} from 'react'\nimport {Range, Text} from 'slate'\nimport {RenderLeafProps, useSelected, useSlateStatic} from '@sanity/slate-react'\nimport {uniq} from 'lodash'\nimport {PortableTextObject, PortableTextTextBlock} from '@sanity/types'\nimport {\n  RenderChildFunction,\n  PortableTextMemberSchemaTypes,\n  RenderAnnotationFunction,\n  RenderDecoratorFunction,\n} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {DefaultAnnotation} from './nodes/DefaultAnnotation'\nimport {DraggableChild} from './DraggableChild'\n\nconst debug = debugWithName('components:Leaf')\nconst debugRenders = false\n\ninterface LeafProps extends RenderLeafProps {\n  children: ReactElement\n  keyGenerator: () => string\n  schemaTypes: PortableTextMemberSchemaTypes\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\nexport const Leaf = (props: LeafProps) => {\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const {attributes, children, leaf, schemaTypes, keyGenerator, renderChild, readOnly} = props\n  const spanRef = React.useRef(null)\n  let returnedChildren = children\n  const focused = (selected && editor.selection && Range.isCollapsed(editor.selection)) || false\n\n  // Render text nodes\n  if (Text.isText(leaf) && leaf._type === schemaTypes.span.name) {\n    const block = children.props.parent as PortableTextTextBlock | undefined\n    const path = block ? [{_key: block._key}, 'children', {_key: leaf._key}] : []\n    const decoratorValues = schemaTypes.decorators.map((dec) => dec.value)\n    const marks: string[] = uniq(\n      (Array.isArray(leaf.marks) ? leaf.marks : []).filter((mark) => decoratorValues.includes(mark))\n    )\n    marks.forEach((mark) => {\n      const type = schemaTypes.decorators.find((dec) => dec.value === mark)\n      if (type && props.renderDecorator) {\n        returnedChildren = props.renderDecorator({\n          children: returnedChildren,\n          editorElementRef: spanRef,\n          focused,\n          path,\n          selected,\n          type,\n          value: mark,\n        })\n      }\n    })\n    const annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : []\n    const annotations = annotationMarks\n      .map(\n        (mark) =>\n          !decoratorValues.includes(mark) &&\n          block &&\n          block.markDefs &&\n          block.markDefs.find((def) => def._key === mark)\n      )\n      .filter(Boolean) as PortableTextObject[]\n\n    if (block && annotations.length > 0) {\n      annotations.forEach((annotation) => {\n        const type = schemaTypes.annotations.find((t) => t.name === annotation._type)\n        if (type) {\n          if (props.renderAnnotation) {\n            returnedChildren = (\n              <span ref={spanRef}>\n                {props.renderAnnotation({\n                  block,\n                  children: returnedChildren,\n                  editorElementRef: spanRef,\n                  focused,\n                  path,\n                  selected,\n                  type,\n                  value: annotation,\n                })}\n              </span>\n            )\n          } else {\n            returnedChildren = (\n              <DefaultAnnotation annotation={annotation}>\n                <span ref={spanRef}>{returnedChildren}</span>\n              </DefaultAnnotation>\n            )\n          }\n        }\n      })\n    }\n    if (block && renderChild) {\n      const child = block.children.find((_child) => _child._key === leaf._key) // Ensure object equality\n      if (child) {\n        const defaultRendered = <>{returnedChildren}</>\n        returnedChildren = renderChild({\n          children: defaultRendered,\n          value: child,\n          schemaType: schemaTypes.span,\n          focused,\n          selected,\n          path,\n          annotations,\n          editorElementRef: spanRef,\n        })\n      }\n    }\n  }\n  if (debugRenders) {\n    debug(`Render ${leaf._key} (span)`)\n  }\n  const key = leaf._key || keyGenerator()\n\n  return (\n    <span key={key} {...attributes} ref={spanRef}>\n      <DraggableChild element={leaf} readOnly={readOnly}>\n        {returnedChildren}\n      </DraggableChild>\n    </span>\n  )\n}\n","import {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport React from 'react'\n\ntype Props = {\n  value: PortableTextBlock | PortableTextChild\n}\n\nconst DefaultObject = (props: Props): JSX.Element => {\n  return (\n    <div>\n      <pre>{JSON.stringify(props.value, null, 2)}</pre>\n    </div>\n  )\n}\n\nexport default DefaultObject\n","import styled from 'styled-components'\n\nexport const DefaultBlockObject = styled.div`\n  user-select: none;\n  border: ${(props: {selected: boolean}) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\nexport const DefaultInlineObject = styled.span`\n  background: #999;\n  border: ${(props: {selected: boolean}) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\ntype ListItemProps = {listLevel: number; listStyle: string}\n\nexport const DefaultListItem = styled.div<ListItemProps>`\n  &.pt-list-item {\n    width: fit-content;\n    position: relative;\n    display: block;\n\n    /* Important 'transform' in order to force refresh the ::before and ::after rules\n      in Webkit: https://stackoverflow.com/a/21947628/831480\n    */\n    transform: translateZ(0);\n    margin-left: ${(props: ListItemProps) => getLeftPositionForListLevel(props.listLevel)};\n  }\n  &.pt-list-item > .pt-list-item-inner {\n    display: flex;\n    margin: 0;\n    padding: 0;\n    &:before {\n      justify-content: flex-start;\n      vertical-align: top;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner:before {\n      content: '${(props: ListItemProps) =>\n        getContentForListLevelAndStyle(props.listLevel, props.listStyle)}';\n      font-size: 0.4375rem; /* 7px */\n      line-height: 1.5rem; /* Same as body text */\n      /* Optical alignment */\n      position: relative;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner {\n    &:before {\n      min-width: 1.5rem; /* Make sure space between bullet and text never shrinks */\n    }\n  }\n  &.pt-list-item-number {\n    counter-increment: ${(props: {listLevel: number}) =>\n      getCounterIncrementForListLevel(props.listLevel)};\n    counter-reset: ${(props: {listLevel: number}) => getCounterResetForListLevel(props.listLevel)};\n  }\n  & + :not(.pt-list-item-number) {\n    counter-reset: listItemNumber;\n  }\n  &.pt-list-item-number > .pt-list-item-inner:before {\n    content: ${(props) => getCounterContentForListLevel(props.listLevel)};\n    min-width: 1.5rem; /* Make sure space between number and text never shrinks */\n    /* Optical alignment */\n    position: relative;\n    top: 1px;\n  }\n`\n\nexport const DefaultListItemInner = styled.div``\n\nfunction getLeftPositionForListLevel(level: number) {\n  switch (Number(level)) {\n    case 1:\n      return '1.5em'\n    case 2:\n      return '3em'\n    case 3:\n      return '4.5em'\n    case 4:\n      return '6em'\n    case 5:\n      return '7.5em'\n    case 6:\n      return '9em'\n    case 7:\n      return '10.5em'\n    case 8:\n      return '12em'\n    case 9:\n      return '13.5em'\n    case 10:\n      return '15em'\n    default:\n      return '0em'\n  }\n}\n\nconst bullets = ['●', '○', '■']\n\nfunction getContentForListLevelAndStyle(level: number, style: string) {\n  const normalizedLevel = (level - 1) % 3\n  if (style === 'bullet') {\n    return bullets[normalizedLevel]\n  }\n  return '*'\n}\n\nfunction getCounterIncrementForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemNumber'\n    case 2:\n      return 'listItemAlpha'\n    case 3:\n      return 'listItemRoman'\n    case 4:\n      return 'listItemNumberNext'\n    case 5:\n      return 'listItemLetterNext'\n    case 6:\n      return 'listItemRomanNext'\n    case 7:\n      return 'listItemNumberNextNext'\n    case 8:\n      return 'listItemAlphaNextNext'\n    case 9:\n      return 'listItemRomanNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterResetForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemAlpha'\n    case 2:\n      return 'listItemRoman'\n    case 3:\n      return 'listItemNumberNext'\n    case 4:\n      return 'listItemLetterNext'\n    case 5:\n      return 'listItemRomanNext'\n    case 6:\n      return 'listItemNumberNextNext'\n    case 7:\n      return 'listItemAlphaNextNext'\n    case 8:\n      return 'listItemRomanNextNext'\n    case 9:\n      return 'listItemNumberNextNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterContentForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return `counter(listItemNumber) '. '`\n    case 2:\n      return `counter(listItemAlpha, lower-alpha) '. '`\n    case 3:\n      return `counter(listItemRoman, lower-roman) '. '`\n    case 4:\n      return `counter(listItemNumberNext) '. '`\n    case 5:\n      return `counter(listItemLetterNext, lower-alpha) '. '`\n    case 6:\n      return `counter(listItemRomanNext, lower-roman) '. '`\n    case 7:\n      return `counter(listItemNumberNextNext) '. '`\n    case 8:\n      return `counter(listItemAlphaNextNext, lower-alpha) '. '`\n    case 9:\n      return `counter(listItemRomanNextNext, lower-roman) '. '`\n    default:\n      return `counter(listItemNumberNextNextNext) '. '`\n  }\n}\n","import React, {useState, useRef, useMemo, useCallback, DragEvent, useEffect} from 'react'\nimport {Element as SlateElement, Transforms, Path, Editor} from 'slate'\nimport {ReactEditor, useSlateStatic} from '@sanity/slate-react'\nimport {debugWithName} from '../utils/debug'\nimport {\n  IS_DRAGGING_ELEMENT_TARGET,\n  IS_DRAGGING_BLOCK_ELEMENT,\n  IS_DRAGGING,\n  IS_DRAGGING_BLOCK_TARGET_POSITION,\n} from '../utils/weakMaps'\n\nconst debug = debugWithName('components:DraggableBlock')\nconst debugRenders = false\n\nexport interface DraggableBlockProps {\n  children: React.ReactNode\n  element: SlateElement\n  readOnly: boolean\n  blockRef: React.MutableRefObject<HTMLDivElement | null>\n}\n\nexport const DraggableBlock = ({children, element, readOnly, blockRef}: DraggableBlockProps) => {\n  const editor = useSlateStatic()\n  const dragGhostRef: React.MutableRefObject<undefined | HTMLElement> = useRef()\n  const [isDragOver, setIsDragOver] = useState(false)\n  const isVoid = useMemo(() => Editor.isVoid(editor, element), [editor, element])\n  const isInline = useMemo(() => Editor.isInline(editor, element), [editor, element])\n\n  const [blockElement, setBlockElement] = useState<HTMLElement | null>(null)\n\n  useEffect(\n    () => setBlockElement(blockRef ? blockRef.current : ReactEditor.toDOMNode(editor, element)),\n    [editor, element, blockRef]\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragOver = useCallback(\n    (event: DragEvent) => {\n      const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor)\n      // debug('Drag over', blockElement)\n      if (!isMyDragOver || !blockElement) {\n        return\n      }\n      event.preventDefault()\n      event.dataTransfer.dropEffect = 'move'\n      IS_DRAGGING_ELEMENT_TARGET.set(editor, element)\n      const elementRect = blockElement.getBoundingClientRect()\n      const offset = elementRect.top\n      const height = elementRect.height\n      const Y = event.pageY\n      const loc = Math.abs(offset - Y)\n      let position: 'top' | 'bottom' = 'bottom'\n      if (element === editor.children[0]) {\n        position = 'top'\n      } else if (loc < height / 2) {\n        position = 'top'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      } else {\n        position = 'bottom'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      }\n      if (isMyDragOver === element) {\n        event.dataTransfer.dropEffect = 'none'\n        return\n      }\n      setIsDragOver(true)\n    },\n    [blockElement, editor, element]\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragLeave = useCallback(() => {\n    setIsDragOver(false)\n  }, [])\n\n  // Note: this is called for the dragging block\n  const handleDragEnd = useCallback(\n    (event: DragEvent) => {\n      const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor)\n      if (targetBlock) {\n        IS_DRAGGING.set(editor, false)\n        event.preventDefault()\n        event.stopPropagation()\n        IS_DRAGGING_ELEMENT_TARGET.delete(editor)\n        if (dragGhostRef.current) {\n          debug('Removing drag ghost')\n          document.body.removeChild(dragGhostRef.current)\n        }\n        const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n        IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor)\n        let targetPath = ReactEditor.findPath(editor, targetBlock)\n        const myPath = ReactEditor.findPath(editor, element)\n        const isBefore = Path.isBefore(myPath, targetPath)\n        if (dragPosition === 'bottom' && !isBefore) {\n          // If it is already at the bottom, don't do anything.\n          if (targetPath[0] >= editor.children.length - 1) {\n            debug('target is already at the bottom, not moving')\n            return\n          }\n          const originalPath = targetPath\n          targetPath = Path.next(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath\n            )}`\n          )\n        }\n        if (dragPosition === 'top' && isBefore && targetPath[0] !== editor.children.length - 1) {\n          const originalPath = targetPath\n          targetPath = Path.previous(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath\n            )}`\n          )\n        }\n        if (Path.equals(targetPath, myPath)) {\n          event.preventDefault()\n          debug('targetPath and myPath is the same, not moving')\n          return\n        }\n        debug(\n          `Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(\n            targetPath\n          )} (${dragPosition})`\n        )\n        Transforms.moveNodes(editor, {at: myPath, to: targetPath})\n        editor.onChange()\n        return\n      }\n      debug('No target element, not doing anything')\n    },\n    [editor, element]\n  )\n  // Note: this is called not for the dragging block, but for the drop target\n  const handleDrop = useCallback(\n    (event: DragEvent) => {\n      if (IS_DRAGGING_BLOCK_ELEMENT.get(editor)) {\n        debug('On drop (prevented)', element)\n        event.preventDefault()\n        event.stopPropagation()\n        setIsDragOver(false)\n      }\n    },\n    [editor, element]\n  )\n  // Note: this is called for the dragging block\n  const handleDrag = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid) {\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        return\n      }\n      IS_DRAGGING.set(editor, true)\n      IS_DRAGGING_BLOCK_ELEMENT.set(editor, element)\n      event.stopPropagation() // Stop propagation so that leafs don't get this and take focus/selection!\n\n      const target = event.target\n\n      if (target instanceof HTMLElement) {\n        target.style.opacity = '1'\n      }\n    },\n    [editor, element, isVoid]\n  )\n\n  // Note: this is called for the dragging block\n  const handleDragStart = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid || isInline) {\n        debug('Not dragging block')\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        IS_DRAGGING.set(editor, false)\n        return\n      }\n      debug('Drag start')\n      IS_DRAGGING.set(editor, true)\n      if (event.dataTransfer) {\n        event.dataTransfer.setData('application/portable-text', 'something')\n        event.dataTransfer.effectAllowed = 'move'\n      }\n      // Clone blockElement so that it will not be visually clipped by scroll-containers etc.\n      // The application that uses the portable-text-editor may indicate the element used as\n      // drag ghost by adding a truthy data attribute 'data-pt-drag-ghost-element' to a HTML element.\n      if (blockElement && blockElement instanceof HTMLElement) {\n        let dragGhost = blockElement.cloneNode(true) as HTMLElement\n        const customGhost = dragGhost.querySelector('[data-pt-drag-ghost-element]')\n        if (customGhost) {\n          dragGhost = customGhost as HTMLElement\n        }\n\n        // Set the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        if (document.body) {\n          dragGhostRef.current = dragGhost\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n          const rect = blockElement.getBoundingClientRect()\n          const x = event.clientX - rect.left\n          const y = event.clientY - rect.top\n          dragGhost.style.width = `${rect.width}px`\n          dragGhost.style.height = `${rect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      }\n      handleDrag(event)\n    },\n    [blockElement, editor, handleDrag, isInline, isVoid]\n  )\n\n  const isDraggingOverFirstBlock =\n    isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const isDraggingOverLastBlock =\n    isDragOver &&\n    editor.children[editor.children.length - 1] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n\n  const isDraggingOverTop =\n    isDraggingOverFirstBlock ||\n    (isDragOver && !isDraggingOverFirstBlock && !isDraggingOverLastBlock && dragPosition === 'top')\n  const isDraggingOverBottom =\n    isDraggingOverLastBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'bottom')\n\n  const dropIndicator = useMemo(\n    () => (\n      <div\n        className=\"pt-drop-indicator\"\n        style={{\n          position: 'absolute',\n          width: '100%',\n          height: 1,\n          borderBottom: '1px solid currentColor',\n          zIndex: 5,\n        }}\n      />\n    ),\n    []\n  )\n\n  if (readOnly) {\n    return <>{children}</>\n  }\n\n  if (debugRenders) {\n    debug('render')\n  }\n\n  return (\n    <div\n      draggable={isVoid}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      onDragEnd={handleDragEnd}\n      onDrop={handleDrop}\n    >\n      {isDraggingOverTop && dropIndicator}\n      {children}\n      {isDraggingOverBottom && dropIndicator}\n    </div>\n  )\n}\n","import React, {ReactElement, FunctionComponent, useRef, useMemo} from 'react'\nimport {Element as SlateElement, Editor, Range} from 'slate'\nimport {Path, PortableTextChild, PortableTextObject, PortableTextTextBlock} from '@sanity/types'\nimport {useSelected, useSlateStatic, ReactEditor, RenderElementProps} from '@sanity/slate-react'\nimport {\n  BlockRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../types/editor'\nimport {fromSlateValue} from '../utils/values'\nimport {debugWithName} from '../utils/debug'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport ObjectNode from './nodes/DefaultObject'\nimport {DefaultBlockObject, DefaultListItem, DefaultListItemInner} from './nodes/index'\nimport {DraggableBlock} from './DraggableBlock'\nimport {DraggableChild} from './DraggableChild'\n\nconst debug = debugWithName('components:Element')\nconst debugRenders = false\nconst EMPTY_ANNOTATIONS: PortableTextObject[] = []\ninterface ElementProps {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}\n\nconst inlineBlockStyle = {display: 'inline-block'}\n\n// eslint-disable-next-line max-statements, complexity\nexport const Element: FunctionComponent<ElementProps> = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck,\n}) => {\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const blockRef = useRef<HTMLDivElement | null>(null)\n  const inlineBlockObjectRef = useRef(null)\n  const focused = (selected && editor.selection && Range.isCollapsed(editor.selection)) || false\n\n  const value = useMemo(\n    () => fromSlateValue([element], schemaTypes.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0],\n    [editor, element, schemaTypes.block.name]\n  )\n\n  let renderedBlock = children\n\n  let className\n\n  const blockPath: Path = useMemo(() => [{_key: element._key}], [element])\n\n  if (typeof element._type !== 'string') {\n    throw new Error(`Expected element to have a _type property`)\n  }\n\n  if (typeof element._key !== 'string') {\n    throw new Error(`Expected element to have a _key property`)\n  }\n\n  // Test for inline objects first\n  if (editor.isInline(element)) {\n    const path = ReactEditor.findPath(editor, element)\n    const [block] = Editor.node(editor, path, {depth: 1})\n    const schemaType = schemaTypes.inlineObjects.find((_type) => _type.name === element._type)\n    if (!schemaType) {\n      throw new Error('Could not find type for inline block element')\n    }\n    if (SlateElement.isElement(block)) {\n      const elmPath: Path = [{_key: block._key}, 'children', {_key: element._key}]\n      if (debugRenders) {\n        debug(`Render ${element._key} (inline object)`)\n      }\n      return (\n        <span {...attributes}>\n          {/* Note that children must follow immediately or cut and selections will not work properly in Chrome. */}\n          {children}\n          <DraggableChild element={element} readOnly={readOnly}>\n            <span\n              className=\"pt-inline-object\"\n              ref={inlineBlockObjectRef}\n              key={element._key}\n              style={inlineBlockStyle}\n              contentEditable={false}\n            >\n              {renderChild &&\n                renderChild({\n                  annotations: EMPTY_ANNOTATIONS, // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n                  children: <ObjectNode value={value} />,\n                  value: value as PortableTextChild,\n                  schemaType,\n                  focused,\n                  selected,\n                  path: elmPath,\n                  editorElementRef: inlineBlockObjectRef,\n                })}\n              {!renderChild && <ObjectNode value={value} />}\n            </span>\n          </DraggableChild>\n        </span>\n      )\n    }\n    throw new Error('Block not found!')\n  }\n\n  // If not inline, it's either a block (text) or a block object (non-text)\n  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)\n  if (element._type === schemaTypes.block.name) {\n    className = `pt-block pt-text-block`\n    const isListItem = 'listItem' in element\n    if (debugRenders) {\n      debug(`Render ${element._key} (text block)`)\n    }\n    const style = ('style' in element && element.style) || 'normal'\n    className = `pt-block pt-text-block pt-text-block-style-${style}`\n    const blockStyleType = schemaTypes.styles.find((item) => item.value === style)\n    if (renderStyle && blockStyleType) {\n      renderedBlock = renderStyle({\n        block: element as PortableTextTextBlock,\n        children,\n        focused,\n        selected,\n        value: style,\n        path: blockPath,\n        type: blockStyleType,\n        editorElementRef: blockRef,\n      })\n    }\n    let level\n    if (isListItem) {\n      if (typeof element.level === 'number') {\n        level = element.level\n      }\n      className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`\n    }\n    if (editor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find((item) => item.value === element.listItem)\n      if (renderListItem && listType) {\n        renderedBlock = renderListItem({\n          block: value,\n          children: renderedBlock,\n          focused,\n          selected,\n          value: element.listItem,\n          path: blockPath,\n          type: listType,\n          level: value.level || 1,\n          editorElementRef: blockRef,\n        })\n      } else {\n        renderedBlock = (\n          <DefaultListItem\n            listStyle={value.listItem || schemaTypes.lists[0].value}\n            listLevel={value.level || 1}\n          >\n            <DefaultListItemInner>{renderedBlock}</DefaultListItemInner>\n          </DefaultListItem>\n        )\n      }\n    }\n    const renderProps: BlockRenderProps = {\n      children: renderedBlock,\n      editorElementRef: blockRef,\n      focused,\n      level,\n      listItem: isListItem ? element.listItem : undefined,\n      path: blockPath,\n      selected,\n      style,\n      type: schemaTypes.block,\n      value,\n    }\n\n    const propsOrDefaultRendered = renderBlock ? renderBlock(renderProps) : children\n    return (\n      <div key={element._key} {...attributes} className={className} spellCheck={spellCheck}>\n        <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n          <div ref={blockRef}>{propsOrDefaultRendered}</div>\n        </DraggableBlock>\n      </div>\n    )\n  }\n  const type = schemaTypes.blockObjects.find((_type) => _type.name === element._type)\n  if (!type) {\n    throw new Error(`Could not find schema type for block element of _type ${element._type}`)\n  }\n  if (debugRenders) {\n    debug(`Render ${element._key} (object block)`)\n  }\n  className = 'pt-block pt-object-block'\n  const block = fromSlateValue(\n    [element],\n    schemaTypes.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor)\n  )[0]\n  const renderedBlockFromProps =\n    renderBlock &&\n    renderBlock({\n      children: <ObjectNode value={value} />,\n      value: block,\n      type,\n      selected,\n      focused,\n      path: blockPath,\n      editorElementRef: blockRef,\n    })\n  return (\n    <div key={element._key} {...attributes} className={className}>\n      {children}\n      <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n        {renderedBlockFromProps && (\n          <div ref={blockRef} contentEditable={false}>\n            {renderedBlockFromProps}\n          </div>\n        )}\n        {!renderedBlockFromProps && (\n          <DefaultBlockObject selected={selected}>\n            <ObjectNode value={value} />\n          </DefaultBlockObject>\n        )}\n      </DraggableBlock>\n    </div>\n  )\n}\n","import React, {useRef, useLayoutEffect, useEffect} from 'react'\n\nconst useIsomorphicEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect\n\nexport function useForwardedRef<T>(ref: React.ForwardedRef<T>): React.MutableRefObject<T | null> {\n  const innerRef = useRef<T | null>(null)\n\n  useIsomorphicEffect(() => {\n    if (!ref) return\n\n    if (typeof ref === 'function') {\n      ref(innerRef.current)\n    } else {\n      ref.current = innerRef.current\n    }\n  })\n\n  return innerRef\n}\n","import {BaseRange, Transforms, Text} from 'slate'\nimport React, {useCallback, useMemo, useEffect, forwardRef} from 'react'\nimport {\n  Editable as SlateEditable,\n  ReactEditor,\n  RenderElementProps,\n  RenderLeafProps,\n} from '@sanity/slate-react'\nimport {\n  EditorSelection,\n  OnBeforeInputFn,\n  OnCopyFn,\n  OnPasteFn,\n  OnPasteResult,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport {HotkeyOptions} from '../types/options'\nimport {fromSlateValue, isEqualToEmptyEditor, toSlateValue} from '../utils/values'\nimport {normalizeSelection} from '../utils/selection'\nimport {toSlateRange} from '../utils/ranges'\nimport {debugWithName} from '../utils/debug'\nimport {Leaf} from './Leaf'\nimport {Element} from './Element'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {createWithInsertData, createWithHotkeys} from './plugins'\nimport {useForwardedRef} from './hooks/useForwardedRef'\nimport {usePortableTextEditorReadOnlyStatus} from './hooks/usePortableTextReadOnly'\n\nconst debug = debugWithName('component:Editable')\n\nconst PLACEHOLDER_STYLE: React.CSSProperties = {\n  opacity: 0.5,\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n}\n\nconst NOOP = () => {\n  // Nope\n}\ntype DOMNode = globalThis.Node\n\nconst isDOMNode = (value: unknown): value is DOMNode => {\n  return value instanceof Node\n}\n\n/**\n * Check if the target is editable and in the editor.\n */\nexport const hasEditableTarget = (\n  editor: ReactEditor,\n  target: EventTarget | null\n): target is DOMNode => {\n  return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target, {editable: true})\n}\n\nexport type PortableTextEditableProps = {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: OnBeforeInputFn\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: () => React.ReactNode\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\nconst EMPTY_DECORATORS: BaseRange[] = []\n\nexport const PortableTextEditable = forwardRef(function PortableTextEditable(\n  props: PortableTextEditableProps & Omit<React.HTMLProps<HTMLDivElement>, 'as' | 'onPaste'>,\n  forwardedRef: React.ForwardedRef<HTMLDivElement>\n) {\n  const {\n    hotkeys,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const readOnly = usePortableTextEditorReadOnlyStatus()\n  const ref = useForwardedRef(forwardedRef)\n\n  const {change$, keyGenerator, schemaTypes, slateInstance: slateEditor} = portableTextEditor\n\n  const blockTypeName = schemaTypes.block.name\n\n  // React/UI-spesific plugins\n  const withInsertData = useMemo(\n    () => createWithInsertData(change$, schemaTypes, keyGenerator),\n    [change$, keyGenerator, schemaTypes]\n  )\n  const withHotKeys = useMemo(\n    () => createWithHotkeys(schemaTypes, keyGenerator, portableTextEditor, hotkeys),\n    [hotkeys, keyGenerator, portableTextEditor, schemaTypes]\n  )\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    if (readOnly) {\n      debug('Editable is in read only mode')\n      return withInsertData(slateEditor)\n    }\n    debug('Editable is in edit mode')\n    return withInsertData(withHotKeys(slateEditor))\n  }, [readOnly, slateEditor, withHotKeys, withInsertData])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <Element\n        {...eProps}\n        schemaTypes={schemaTypes}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        spellCheck={spellCheck}\n      />\n    ),\n    [schemaTypes, spellCheck, readOnly, renderBlock, renderChild, renderListItem, renderStyle]\n  )\n\n  const renderLeaf = useCallback(\n    (lProps: RenderLeafProps & {leaf: Text & {placeholder?: boolean}}) => {\n      if (renderPlaceholder && lProps.leaf.placeholder && lProps.text.text === '') {\n        return (\n          <>\n            <div style={PLACEHOLDER_STYLE} contentEditable={false}>\n              {renderPlaceholder()}\n            </div>\n            <Leaf\n              {...lProps}\n              keyGenerator={keyGenerator}\n              schemaTypes={schemaTypes}\n              renderAnnotation={renderAnnotation}\n              renderChild={renderChild}\n              renderDecorator={renderDecorator}\n              readOnly={readOnly}\n            />\n          </>\n        )\n      }\n      return (\n        <Leaf\n          {...lProps}\n          keyGenerator={keyGenerator}\n          schemaTypes={schemaTypes}\n          renderAnnotation={renderAnnotation}\n          renderChild={renderChild}\n          renderDecorator={renderDecorator}\n          readOnly={readOnly}\n        />\n      )\n    },\n    [\n      keyGenerator,\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n      schemaTypes,\n    ]\n  )\n\n  // Restore selection from props\n  useEffect(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(slateEditor.children, blockTypeName)\n      )\n      if (normalizedSelection !== null) {\n        debug(`Normalized selection from props ${JSON.stringify(normalizedSelection)}`)\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set selection operations in the\n          // editor (this is usually automatically outputted by the withPortableTextSelections plugin)\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            change$.next({type: 'selection', selection: normalizedSelection})\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [slateEditor, propsSelection, blockTypeName, change$])\n\n  // Set initial selection from props\n  useEffect(() => {\n    if (propsSelection) {\n      PortableTextEditor.select(portableTextEditor, propsSelection)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []) // Only initial\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: React.ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      }\n    },\n    [onCopy]\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: React.ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      event.preventDefault()\n      if (!slateEditor.selection) {\n        return\n      }\n      if (!onPaste) {\n        debug('Pasting normally')\n        slateEditor.insertData(event.clipboardData)\n        return\n      }\n      // Resolve it as promise (can be either async promise or sync return value)\n      new Promise<OnPasteResult>((resolve) => {\n        resolve(\n          onPaste({\n            event,\n            value: PortableTextEditor.getValue(portableTextEditor),\n            path: slateEditor.selection?.focus.path || [],\n            schemaTypes,\n          })\n        )\n      })\n        .then((result) => {\n          debug('Custom paste function from client resolved', result)\n          change$.next({type: 'loading', isLoading: true})\n          if (!result || !result.insert) {\n            debug('No result from custom paste handler, pasting normally')\n            slateEditor.insertData(event.clipboardData)\n            return\n          }\n          if (result && result.insert) {\n            slateEditor.insertFragment(toSlateValue(result.insert, {schemaTypes}))\n            change$.next({type: 'loading', isLoading: false})\n            return\n          }\n          console.warn('Your onPaste function returned something unexpected:', result)\n        })\n        .catch((error) => {\n          change$.next({type: 'loading', isLoading: false})\n          console.error(error) // eslint-disable-line no-console\n          return error\n        })\n    },\n    [change$, onPaste, portableTextEditor, schemaTypes, slateEditor]\n  )\n\n  const handleOnFocus = useCallback(() => {\n    change$.next({type: 'focus'})\n  }, [change$])\n\n  const handleOnBlur = useCallback(() => {\n    change$.next({type: 'blur'})\n  }, [change$])\n\n  const handleOnBeforeInput = useCallback(\n    (event: Event) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput]\n  )\n\n  const handleKeyDown = slateEditor.pteWithHotKeys\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return NOOP\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  const decorate = useCallback(() => {\n    if (isEqualToEmptyEditor(slateEditor.children, schemaTypes)) {\n      return [\n        {\n          anchor: {\n            path: [0, 0],\n            offset: 0,\n          },\n          focus: {\n            path: [0, 0],\n            offset: 0,\n          },\n          placeholder: true,\n        },\n      ]\n    }\n    return EMPTY_DECORATORS\n  }, [schemaTypes, slateEditor.children])\n\n  // The editor\n  const slateEditable = useMemo(\n    () => (\n      <SlateEditable\n        autoFocus={false}\n        className=\"pt-editable\"\n        decorate={decorate}\n        onBlur={handleOnBlur}\n        onCopy={handleCopy}\n        onDOMBeforeInput={handleOnBeforeInput}\n        onFocus={handleOnFocus}\n        onKeyDown={handleKeyDown}\n        onPaste={handlePaste}\n        readOnly={readOnly}\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n      />\n    ),\n    [\n      decorate,\n      handleCopy,\n      handleKeyDown,\n      handleOnBeforeInput,\n      handleOnBlur,\n      handleOnFocus,\n      handlePaste,\n      readOnly,\n      renderElement,\n      renderLeaf,\n      scrollSelectionIntoViewToSlate,\n    ]\n  )\n\n  if (!portableTextEditor) {\n    return null\n  }\n  return (\n    <div ref={ref} {...restProps}>\n      {slateEditable}\n    </div>\n  )\n})\n"],"names":["compileType","rawType","Schema","compile","name","types","get","getPortableTextMemberSchemaTypes","portableTextType","_a","_b","_c","Error","blockType","of","find","findBlockType","childrenField","fields","field","ofType","type","spanType","memberType","inlineObjectTypes","filter","blockObjectTypes","styles","resolveEnabledStyles","decorators","resolveEnabledDecorators","lists","resolveEnabledListItems","block","span","portableText","inlineObjects","blockObjects","annotations","styleField","btField","textStyles","options","list","style","value","length","listField","listItems","diff_match_patch","Diff_Timeout","Diff_EditCost","Match_Threshold","Match_Distance","Patch_DeleteThreshold","Patch_Margin","Match_MaxBits","DIFF_DELETE","DIFF_INSERT","DIFF_EQUAL","Diff","op","text","prototype","diff_main","text1","text2","opt_checklines","opt_deadline","Number","MAX_VALUE","Date","getTime","deadline","checklines","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","diffs","diff_compute_","unshift","push","diff_cleanupMerge","longtext","shorttext","i","indexOf","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_lineMode_","diff_bisect_","a","diff_linesToChars_","chars1","chars2","linearray","lineArray","diff_charsToLines_","diff_cleanupSemantic","pointer","count_delete","count_insert","text_delete","text_insert","splice","subDiff","j","pop","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","x1","y1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","lineHash","diff_linesToCharsMunge_","chars","lineStart","lineEnd","lineArrayLength","line","hasOwnProperty","undefined","String","fromCharCode","maxLines","charCodeAt","join","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_commonOverlap_","text_length","best","pattern","found","dmp","diff_halfMatchI_","seed","best_common","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","prefixLength","suffixLength","hm1","hm2","changes","equalities","equalitiesLength","lastEquality","length_insertions1","length_deletions1","length_insertions2","length_deletions2","max","diff_cleanupSemanticLossless","deletion","insertion","overlap_length1","overlap_length2","diff_cleanupSemanticScore_","one","two","char1","char2","nonAlphaNumeric1","match","nonAlphaNumericRegex_","nonAlphaNumeric2","whitespace1","whitespaceRegex_","whitespace2","lineBreak1","linebreakRegex_","lineBreak2","blankLine1","blanklineEndRegex_","blankLine2","blanklineStartRegex_","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","diff_cleanupEfficiency","pre_ins","pre_del","post_ins","post_del","diff_xIndex","loc","last_chars1","last_chars2","diff_prettyHtml","html","pattern_amp","pattern_lt","pattern_gt","pattern_para","data","replace","diff_text1","diff_text2","diff_levenshtein","levenshtein","insertions","deletions","diff_toDelta","encodeURI","diff_fromDelta","diffsLength","tokens","split","param","decodeURI","ex","n","parseInt","isNaN","match_main","match_bitap_","s","match_alphabet_","match_bitapScore_","e","accuracy","proximity","abs","score_threshold","best_loc","lastIndexOf","matchmask","bin_min","bin_mid","bin_max","last_rd","start","finish","rd","charMatch","patch_addContext_","patch","start2","length1","padding","prefix","suffix","start1","length2","patch_make","opt_b","opt_c","patches","patch_obj","patchDiffLength","char_count1","char_count2","prepatch_text","postpatch_text","diff_type","diff_text","patch_deepCopy","patchesCopy","patchCopy","patch_apply","nullPadding","patch_addPadding","patch_splitMax","results","expected_loc","start_loc","end_loc","index1","index2","mod","paddingLength","extraLength","patch_size","bigpatch","precontext","empty","shift","postcontext","patch_toText","patch_fromText","textline","textPointer","patchHeader","m","sign","toString","coords1","coords2","module","exports","setIfMissing","path","DMP.diff_match_patch","diffMatchPatch","currentValue","nextValue","map","_patch","insert","items","position","set","unset","validateValue","keyGenerator","resolution","valid","validChildTypes","t","validBlockTypes","isArray","description","action","item","some","blk","index","isObject","_key","_type","includes","currentBlockTypeName","textBlock","children","markDefs","allUsedMarks","uniq","flatten","cld","marks","annotationMarks","mark","dec","orphanedMarks","def","spanChildren","child","cMrk","newSpan","cIndex","newChild","rootName","debug","debugWithName","namespace","enabled","EMPTY_MARKDEFS","keepObjectEquality","object","keyMap","isEqual","toSlateValue","schemaTypes","rest","voidChildren","isPortableText","hasInlines","hasMissingStyle","hasMissingMarkDefs","cType","cKey","cRest","__inline","Element","isElement","fromSlateValue","textBlockType","_cType","v","k","_i","blockValue","isEqualToEmptyEditor","Text","isText","getValueOrInitialValue","initialValue","IS_DRAGGING","WeakMap","IS_DRAGGING_BLOCK_ELEMENT","IS_DRAGGING_CHILD_ELEMENT","IS_DRAGGING_ELEMENT_TARGET","IS_DRAGGING_ELEMENT_RANGE","IS_DRAGGING_BLOCK_TARGET_POSITION","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","FLUSH_PATCHES_DEBOUNCE_MS","process","env","NODE_ENV","PortableTextEditorContext","createContext","usePortableTextEditor","editor","useContext","PortableTextEditorSelectionContext","usePortableTextEditorSelection","selection","PortableTextEditorReadOnlyContext","usePortableTextEditorReadOnlyStatus","readOnly","PortableTextEditorValueContext","createOperationToPatches","textBlockName","insertTextPatch","operation","beforeValue","JSON","stringify","isTextBlock","textChild","isTextSpan","prevBlock","prevChild","prevText","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","newProperties","isUndefined","blockKey","childKey","Object","keys","forEach","keyName","val","insertNodePatch","targetKey","node","splitNodePatch","splitBlock","oldBlock","targetValue","spansToUnset","slice","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","newBlock","mergedSpan","targetBlock","targetSpan","moveNodePatch","newPath","targetChild","childToInsert","createKeyedPath","point","blockPath","keyedBlockPath","keyedChildPath","childPath","createArrayedPath","from","Editor","nodes","at","isKeySegment","isVoid","childIndex","findIndex","toPortableTextRange","range","anchor","focus","anchorPath","offset","focusPath","toSlateRange","createWithEditableAPI","portableTextEditor","withEditableAPI","setEditable","Transforms","select","onChange","ReactEditor","blur","toggleMark","pteToggleMark","toggleList","listStyle","pteToggleListItem","toggleBlockStyle","blockStyle","pteToggleBlockStyle","isMarkActive","pteIsMarkActive","err","console","warn","undo","redo","slateSelection","deselect","focusBlock","isBlock","focusChild","mode","voids","pseudoBlock","blocks","insertChild","insertNode","insertBlock","hasBlockStyle","pteHasBlockStyle","hasListStyle","pteHasListStyle","element","findByPath","slatePath","ptBlock","ptChild","findDOMNode","toDOMNode","activeAnnotations","spans","depth","addAnnotation","SlateElement","annotationKey","setNodes","Range","isCollapsed","pteExpandToWord","textNode","withoutNormalizing","normalize","newSelection","insertNodes","end","spanPath","markDefPath","delete","hanging","nodeAndPaths","p","removeNodes","removeAnnotation","nodePath","isExpanded","newMarks","getSelection","ptRange","existing","getValue","isCollapsedSelection","isExpandedSelection","createWithMaxBlocks","withMaxBlocks","apply","rows","maxBlocks","PRESERVE_KEYS","withPreserveKeys","fn","prev","isPreservingKeys","createWithObjectKeys","withKeys","normalizeNode","properties","withNewKey","isEditor","entry","Node","PATCHING","withoutPatching","isPatching","BEFORE","AFTER","array","args","len","idx","normalizedIdx","copy","values","reduce","hasOwn","call","bind","move","arr","to","findTargetIndex","pathSegment","head","tail","applyPatch","clone","omit","OPERATIONS","_currentValue","_nextValue","inc","SUPPORTED_PATCH_TYPES","func","applyAll","_apply","applyArrayPatch","isString","applyStringPatch","applyObjectPatch","applyPrimitivePatch","res","createPatchToOperations","findLastKey","blockIndex","indx","parsed","distance","debugState","insertPatch","blocksToInsert","posKey","isKeyedSegment","childrenToInsert","targetPath","setPatch","nextRest","prevChildren","prevRest","c","prevSel","onSamePath","newVal","unsetPatch","previousPatch","lastKey","unit","needToAdjust","isMergeUnset","mergedChild","changed","error","segment","key","reverse","part","stateName","SAVING","MERGING","UNDO_STEP_LIMIT","isMerging","isSaving","createWithUndoRedo","incomingPatches$","cleanupFn","incomingPatches","sub","subscribe","origin","time","unsubscribe","history","undos","redos","operations","step","lastOp","overwrite","shouldOverwrite","save","merge","shouldSave","shouldMerge","stp","createSelectOperation","timestamp","shouldClear","otherPatches","transformedOperations","transformOperation","withoutSaving","Operation","inverse","transformedOperation","adjustBlockPath","patchIsRemovingText","diff","splitOperation","Path","isPath","insertOffset","insertTextOperation","removeTextOperation","level","myIndex","equals","createWithPatches","patchFunctions","change$","syncValue","previousChildren","patchToOperations","patchSubscription","withPatches","syncValueAfterIncomingPatches","debounce","trailing","leading","snapshot","remotePatches","editorWasEmpty","editorIsEmpty","next","previousValue","createWithPlaceholderBlock","withPlaceholderBlock","createPlaceholderBlock","hadSelection","createWithPortableTextBlockStyle","defaultStyle","withPortableTextBlockStyle","nodeEntry","SlateText","selectedBlocks","MAX_LIST_LEVEL","createWithPortableTextLists","withPortableTextLists","listItemStyle","isActive","pteUnsetListItem","pteSetListItem","isListBlock","listItem","newNode","pteEndList","pteIncrementBlockLevels","createWithPortableTextMarkModel","withPortableTextMarkModel","mergeSpans","isSpan","oldDefs","newMarkDefs","isNormalized","isElementProps","normalizeMarkDefs","splitNodes","marksWithoutAnnotationMarks","addMark","splitTextNodes","shouldRemoveMark","removeMark","eMark","existingMarks","parent","nextPath","nextNode","mergeNodes","createWithPortableTextSelections","withPortableTextSelections","emitPortableTextSelection","hasChanges","createWithSchemaTypes","withSchemaTypes","isPortableTextTextBlock","isPortableTextSpan","isPortableTextListBlock","obj","isInline","inlineSchemaTypes","isInsertTextWithoutType","insertNodeOperation","createWithUtils","withUtils","focusOffset","charsBefore","charsAfter","isEmpty","str","whiteSpaceBeforeIndex","newStartOffset","whiteSpaceAfterIndex","newEndOffset","setSelection","DEFAULT_HOTKEYS","custom","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","createEmptyBlock","withHotKeys","pteWithHotKeys","event","cat","hotkey","isHotkey","nativeEvent","preventDefault","possibleMark","possibleCommand","command","isEnter","isTab","isShiftEnter","isShiftTab","isBackspace","isDelete","prevPath","previous","stopPropagation","nextBlock","focusBlockPath","hasAnnotationFocus","edges","atStartOfNode","isStart","endAtEndOfNode","isEnd","insertText","createWithInsertData","withInsertData","blockTypeName","spanTypeName","toPlainText","title","setFragmentData","originEvent","startVoid","void","endVoid","domRange","toDOMRange","contents","cloneContents","voidNode","r","cloneRange","domNode","setEndAfter","querySelectorAll","zw","isNewline","getAttribute","textContent","elm","removeAttribute","attributes","hasAttribute","div","ownerDocument","createElement","appendChild","setAttribute","body","asHTML","innerHTML","removeChild","fragment","getFragment","asJSON","asPlainText","clearData","setData","insertPortableTextData","pText","getData","parse","slateValue","regenerateKeys","validation","errorDescription","mixMarkDefs","insertFragment","insertTextOrHTMLData","isLoading","insertedType","htmlToBlocks","normalizeBlock","escapeHtml","textToHtml","insertData","insertFragmentData","entityMap","oldKey","newKey","nodeWithNewKeys","originalFnMap","withPlugins","destroy","operationToPatches","withObjectKeys","withPatchesCleanupFunction","withUndoRedo","withUndoRedoCleanupFunction","originalFunctions","defaultKeyGenerator","randomKey","PortableTextEditor","React","Component","constructor","props","Subject","pendingPatches","returnedPatches","editable","userCallbackFn","callbackFn","slateInstance","hasPendingLocalPatches","current","retrySync","isEqualToValue","compareBlock","setState","invalidValueResolution","oldSel","slateValueFromProps","flush","finalPatches","flushDebounced","schemaType","createRef","selectionRef","state","initialSlateEditorValue","pipe","tap","bufferUntil","concatMap","incoming","share","changeSubscription","Boolean","withReact","createEditor","componentWillUnmount","componentDidUpdate","prevProps","isPristineEditor","render","jsx","Provider","Slate","NOOP","isObjectPath","isChildObjectEditPath","isBlockObjectEditPath","throttle","syncFn","emitWhen","source","defer","buffer","switchMap","EMPTY","compactPatches","lastPatch","nextPatch","normalizePoint","newOffset","normalizeSelection","newAnchor","newFocus","DefaultAnnotation","handleClick","useCallback","alert","annotation","color","onClick","DraggableChild","useSlateStatic","dragGhostRef","useRef","useMemo","handleDragOver","isMyDragOver","dataTransfer","dropEffect","findEventRange","handleDragStart","effectAllowed","currentTarget","HTMLElement","dragGhost","cloneNode","width","clientWidth","height","clientHeight","top","left","document","rect","getBoundingClientRect","clientX","clientY","setDragImage","draggable","onDragStart","onDragOver","Leaf","selected","useSelected","leaf","renderChild","spanRef","returnedChildren","focused","decoratorValues","renderDecorator","editorElementRef","renderAnnotation","ref","_child","defaultRendered","DefaultObject","DefaultBlockObject","styled","DefaultListItem","getLeftPositionForListLevel","listLevel","getContentForListLevelAndStyle","getCounterIncrementForListLevel","getCounterResetForListLevel","getCounterContentForListLevel","DefaultListItemInner","bullets","normalizedLevel","DraggableBlock","blockRef","isDragOver","setIsDragOver","useState","blockElement","setBlockElement","useEffect","elementRect","Y","pageY","handleDragLeave","handleDragEnd","dragPosition","findPath","myPath","isBefore","originalPath","moveNodes","handleDrop","handleDrag","target","opacity","customGhost","querySelector","boxSizing","isDraggingOverFirstBlock","isDraggingOverLastBlock","isDraggingOverTop","isDraggingOverBottom","dropIndicator","className","borderBottom","zIndex","jsxs","onDrag","onDragLeave","onDragEnd","onDrop","EMPTY_ANNOTATIONS","inlineBlockStyle","display","renderBlock","renderListItem","renderStyle","spellCheck","inlineBlockObjectRef","renderedBlock","elmPath","contentEditable","ObjectNode","isListItem","blockStyleType","listType","renderProps","propsOrDefaultRendered","renderedBlockFromProps","useIsomorphicEffect","window","useLayoutEffect","useForwardedRef","innerRef","PLACEHOLDER_STYLE","userSelect","pointerEvents","EMPTY_DECORATORS","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","renderPlaceholder","propsSelection","scrollSelectionIntoView","restProps","slateEditor","renderElement","eProps","renderLeaf","lProps","placeholder","Fragment","normalizedSelection","slateRange","o","handleCopy","result","handlePaste","clipboardData","Promise","resolve","then","catch","handleOnFocus","handleOnBlur","handleOnBeforeInput","handleKeyDown","scrollSelectionIntoViewToSlate","decorate","slateEditable","SlateEditable","autoFocus","onBlur","onDOMBeforeInput","onFocus","onKeyDown"],"mappings":"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"}