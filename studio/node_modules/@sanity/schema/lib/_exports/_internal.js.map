{"version":3,"file":"_internal.js","sources":["../../src/sanity/validation/createValidationResult.ts","../../src/sanity/groupProblems.ts","../../src/sanity/validation/utils/getDupes.ts","../../src/core/traverseSchema.ts","../../src/sanity/coreTypes.ts","../../src/sanity/traverseSchema.ts","../../src/sanity/validation/utils/isComponent.ts","../../src/sanity/validation/utils/validateComponent.ts","../../src/sanity/validation/types/object.ts","../../src/sanity/validation/types/document.ts","../../src/sanity/validation/types/reference.ts","../../src/sanity/validation/types/array.ts","../../src/sanity/validation/types/slug.ts","../../src/sanity/validation/types/file.ts","../../src/sanity/validation/types/image.ts","../../src/sanity/validation/utils/isJSONTypeOf.ts","../../src/sanity/validation/types/block.ts","../../src/sanity/validation/utils/validateNonObjectFieldsProp.ts","../../src/sanity/validation/utils/validateTypeName.ts","../../src/sanity/validation/types/deprecated.ts","../../src/sanity/validation/types/common.ts","../../src/sanity/validation/types/rootType.ts","../../src/sanity/validation/types/crossDatasetReference.ts","../../src/sanity/validateSchema.ts","../../src/legacy/actionUtils.ts"],"sourcesContent":["import type {SchemaValidationResult} from '../typedefs'\n\n// Temporary solution to ensure we have a central registry over used helpIds\nexport const HELP_IDS = {\n  TYPE_INVALID: 'schema-type-invalid',\n  TYPE_IS_ESM_MODULE: 'schema-type-is-esm-module',\n  TYPE_NAME_RESERVED: 'schema-type-name-reserved',\n  TYPE_MISSING_NAME: 'schema-type-missing-name-or-type',\n  TYPE_MISSING_TYPE: 'schema-type-missing-name-or-type',\n  TYPE_TITLE_RECOMMENDED: 'schema-type-title-is-recommended',\n  TYPE_TITLE_INVALID: 'schema-type-title-is-recommended',\n  OBJECT_FIELDS_INVALID: 'schema-object-fields-invalid',\n  OBJECT_FIELD_NOT_UNIQUE: 'schema-object-fields-invalid',\n  OBJECT_FIELD_NAME_INVALID: 'schema-object-fields-invalid',\n  OBJECT_FIELD_DEFINITION_INVALID_TYPE: 'schema-object-fields-invalid',\n  ARRAY_PREDEFINED_CHOICES_INVALID: 'schema-predefined-choices-invalid',\n  ARRAY_OF_ARRAY: 'schema-array-of-array',\n  ARRAY_OF_INVALID: 'schema-array-of-invalid',\n  ARRAY_OF_NOT_UNIQUE: 'schema-array-of-invalid',\n  ARRAY_OF_TYPE_GLOBAL_TYPE_CONFLICT: 'schema-array-of-type-global-type-conflict',\n  ARRAY_OF_TYPE_BUILTIN_TYPE_CONFLICT: 'schema-array-of-type-builtin-type-conflict',\n  REFERENCE_TO_INVALID: 'schema-reference-to-invalid',\n  REFERENCE_TO_NOT_UNIQUE: 'schema-reference-to-invalid',\n  REFERENCE_INVALID_OPTIONS: 'schema-reference-invalid-options',\n  REFERENCE_INVALID_OPTIONS_LOCATION: 'schema-reference-options-nesting',\n  REFERENCE_INVALID_FILTER_PARAMS_COMBINATION: 'schema-reference-filter-params-combination',\n  SLUG_SLUGIFY_FN_RENAMED: 'slug-slugifyfn-renamed',\n  ASSET_METADATA_FIELD_INVALID: 'asset-metadata-field-invalid',\n  CROSS_DATASET_REFERENCE_INVALID: 'cross-dataset-reference-invalid',\n  DEPRECATED_BLOCKEDITOR_KEY: 'schema-deprecated-blockeditor-key',\n}\n\nfunction createValidationResult(\n  severity: SchemaValidationResult['severity'],\n  message: string,\n  helpId: string | null\n): SchemaValidationResult {\n  if (helpId && !Object.keys(HELP_IDS).some((id) => HELP_IDS[id] === helpId)) {\n    throw new Error(\n      `Used the unknown helpId \"${helpId}\", please add it to the array in createValidationResult.js`\n    )\n  }\n  return {\n    severity,\n    message,\n    helpId,\n  }\n}\n\nexport const error = (message: string, helpId?: string | null): SchemaValidationResult =>\n  createValidationResult('error', message, helpId)\n\nexport const warning = (message: string, helpId?: string | null): SchemaValidationResult =>\n  createValidationResult('warning', message, helpId)\n\nexport const info = (message: string, helpId?: string | null): SchemaValidationResult =>\n  createValidationResult('info', message, helpId)\n","import type {SchemaType, SchemaTypeDefinition} from '@sanity/types'\nimport {flatten, get} from 'lodash'\nimport {error} from './validation/createValidationResult'\nimport type {ProblemPath, ProblemPathPropertySegment, TypeWithProblems} from './typedefs'\n\n/**\n * @internal\n */\nexport function groupProblems(types: SchemaTypeDefinition[]): TypeWithProblems[] {\n  return flatten<TypeWithProblems>(types.map((type) => getTypeProblems(type))).filter(\n    (type) => type.problems.length > 0\n  )\n}\n\nfunction createTypeWithMembersProblemsAccessor(\n  memberPropertyName: string,\n  getMembers = (type: SchemaType) => get(type, memberPropertyName)\n) {\n  return function getProblems(type, parentPath: ProblemPath): TypeWithProblems[] {\n    const currentPath: ProblemPath = [\n      ...parentPath,\n      {kind: 'type', type: type.type, name: type.name},\n    ]\n\n    const members = getMembers(type) || []\n\n    const memberProblems: TypeWithProblems[][] = Array.isArray(members)\n      ? members.map((memberType) => {\n          const propertySegment: ProblemPathPropertySegment = {\n            kind: 'property',\n            name: memberPropertyName,\n          }\n          const memberPath: ProblemPath = [...currentPath, propertySegment]\n          return getTypeProblems(memberType, memberPath)\n        })\n      : [\n          [\n            {\n              path: currentPath,\n              problems: [error(`Member declaration (${memberPropertyName}) is not an array`)],\n            },\n          ],\n        ]\n\n    return [\n      {\n        path: currentPath,\n        problems: type._problems || [],\n      },\n      ...flatten(memberProblems),\n    ]\n  }\n}\n\nconst arrify = (val) => (Array.isArray(val) ? val : (typeof val === 'undefined' && []) || [val])\n\nconst getObjectProblems = createTypeWithMembersProblemsAccessor('fields')\nconst getImageProblems = createTypeWithMembersProblemsAccessor('fields')\nconst getFileProblems = createTypeWithMembersProblemsAccessor('fields')\nconst getArrayProblems = createTypeWithMembersProblemsAccessor('of')\nconst getReferenceProblems = createTypeWithMembersProblemsAccessor('to', (type) =>\n  'to' in type ? arrify(type.to) : []\n)\nconst getBlockAnnotationProblems = createTypeWithMembersProblemsAccessor('marks.annotations')\nconst getBlockMemberProblems = createTypeWithMembersProblemsAccessor('of')\nconst getBlockProblems = (type, problems) => [\n  ...getBlockAnnotationProblems(type, problems),\n  ...getBlockMemberProblems(type, problems),\n]\n\nfunction getDefaultProblems(type, path = []): TypeWithProblems[] {\n  return [\n    {\n      path: [...path, {kind: 'type', type: type.type, name: type.name}],\n      problems: type._problems || [],\n    },\n  ]\n}\n\nfunction getTypeProblems(type: SchemaTypeDefinition, path = []): TypeWithProblems[] {\n  switch (type.type) {\n    case 'object': {\n      return getObjectProblems(type, path)\n    }\n    case 'document': {\n      return getObjectProblems(type, path)\n    }\n    case 'array': {\n      return getArrayProblems(type, path)\n    }\n    case 'reference': {\n      return getReferenceProblems(type, path)\n    }\n    case 'block': {\n      return getBlockProblems(type, path)\n    }\n    case 'image': {\n      return getImageProblems(type, path)\n    }\n    case 'file': {\n      return getFileProblems(type, path)\n    }\n    default: {\n      return getDefaultProblems(type, path)\n    }\n  }\n}\n","export function getDupes(array, selector = (v) => v) {\n  const dupes = array.reduce((acc, item) => {\n    const key = selector(item)\n    if (!acc[key]) {\n      acc[key] = []\n    }\n    acc[key].push(item)\n    return acc\n  }, {})\n\n  return Object.keys(dupes)\n    .map((key) => (dupes[key].length > 1 ? dupes[key] : null))\n    .filter(Boolean)\n}\n","import {flatten, uniq} from 'lodash'\nimport {getDupes} from '../sanity/validation/utils/getDupes'\n\ntype SchemaType = Record<string, any>\ntype SchemaTypeDef = Record<string, any>\n\ntype VisitContext = {\n  isRoot: boolean\n  isReserved: (typeName: string) => boolean\n  visit: Visitor\n  index: number\n  isDuplicate: (typeName: string) => boolean\n  getType: (typeName: string) => null | SchemaType\n  getTypeNames: () => Array<string>\n}\n\nexport type Visitor = (typeDef: SchemaTypeDef, arg1: VisitContext) => SchemaType\n\nconst NOOP_VISITOR: Visitor = (typeDef) => typeDef\n\nexport class UnknownType {\n  name: string\n\n  constructor(name: string) {\n    this.name = name\n  }\n}\n\nconst TYPE_TYPE = {name: 'type', type: null}\n\nconst FUTURE_RESERVED = ['any', 'time', 'date']\n\nexport function traverseSchema(\n  types: SchemaTypeDef[] = [],\n  coreTypes: SchemaTypeDef[] = [],\n  visitor: Visitor = NOOP_VISITOR\n) {\n  const coreTypesRegistry = Object.create(null)\n  const registry = Object.create(null)\n\n  const coreTypeNames = coreTypes.map((typeDef) => typeDef.name)\n\n  const reservedTypeNames = FUTURE_RESERVED.concat(coreTypeNames)\n\n  const typeNames = types.map((typeDef) => typeDef && typeDef.name).filter(Boolean)\n\n  coreTypes.forEach((coreType) => {\n    coreTypesRegistry[coreType.name] = coreType\n  })\n\n  types.forEach((type, i) => {\n    // Allocate a placeholder for each type\n    registry[(type && type.name) || `__unnamed_${i}`] = {}\n  })\n\n  function getType(typeName) {\n    return typeName === 'type'\n      ? TYPE_TYPE\n      : coreTypesRegistry[typeName] || registry[typeName] || null\n  }\n\n  const duplicateNames = uniq(flatten(getDupes(typeNames)))\n\n  function isDuplicate(typeName) {\n    return duplicateNames.includes(typeName)\n  }\n  function getTypeNames() {\n    return typeNames.concat(coreTypeNames)\n  }\n  function isReserved(typeName) {\n    return typeName === 'type' || reservedTypeNames.includes(typeName)\n  }\n\n  const visitType = (isRoot) => (typeDef, index) => {\n    return visitor(typeDef, {\n      visit: visitType(false),\n      isRoot,\n      getType,\n      getTypeNames,\n      isReserved,\n      isDuplicate,\n      index,\n    })\n  }\n\n  coreTypes.forEach((coreTypeDef) => {\n    Object.assign(coreTypesRegistry[coreTypeDef.name], visitType(coreTypeDef))\n  })\n\n  types.forEach((typeDef, i) => {\n    Object.assign(\n      registry[(typeDef && typeDef.name) || `__unnamed_${i}`],\n      visitType(true)(typeDef, i)\n    )\n  })\n\n  return {\n    get(typeName: string) {\n      const res = registry[typeName] || coreTypesRegistry[typeName]\n      if (res) {\n        return res\n      }\n      throw new Error(`No such type: ${typeName}`)\n    },\n    has(typeName: string): boolean {\n      return typeName in registry || typeName in coreTypesRegistry\n    },\n    getTypeNames(): string[] {\n      return Object.keys(registry)\n    },\n    getTypes() {\n      return this.getTypeNames().map(this.get)\n    },\n    toJSON() {\n      return this.getTypes()\n    },\n  }\n}\n","const coreTypes = [\n  {name: 'array', jsonType: 'array', type: 'type'},\n  {name: 'block', jsonType: 'object', type: 'type'},\n  {name: 'boolean', jsonType: 'boolean', type: 'type'},\n  {name: 'datetime', jsonType: 'string', type: 'type'},\n  {name: 'date', jsonType: 'string', type: 'type'},\n  {name: 'document', jsonType: 'object', type: 'type'},\n  {name: 'email', jsonType: 'string', type: 'type'},\n  {name: 'file', jsonType: 'object', type: 'type'},\n  {name: 'geopoint', jsonType: 'object', type: 'type'},\n  {name: 'image', jsonType: 'object', type: 'type'},\n  {name: 'number', jsonType: 'number', type: 'type'},\n  {name: 'object', jsonType: 'object', type: 'type'},\n  {name: 'reference', jsonType: 'object', type: 'type'},\n  {name: 'crossDatasetReference', jsonType: 'object', type: 'type'},\n  {name: 'slug', jsonType: 'object', type: 'type'},\n  {name: 'string', jsonType: 'string', type: 'type'},\n  {name: 'telephone', jsonType: 'string', type: 'type'},\n  {name: 'text', jsonType: 'string', type: 'type'},\n  {name: 'url', jsonType: 'string', type: 'type'},\n] as const\n\nexport const coreTypeNames = coreTypes.map((t) => t.name)\nexport default coreTypes\n","import {traverseSchema, type Visitor} from '../core/traverseSchema'\nimport type {_FIXME_} from './typedefs'\nimport coreTypes from './coreTypes'\n\nexport function traverseSanitySchema(schemaTypes: _FIXME_[], visitor: Visitor) {\n  return traverseSchema(schemaTypes, coreTypes as _FIXME_, visitor)\n}\n","const REACT_SYM_RE = /^Symbol\\(react\\..+\\)$/\n\nexport function isComponentLike(value: any) {\n  const type = typeof value\n  // Note: we're not using `isValidElementType` from react-is here since it accepts too much, e.g. any strings.\n  return (\n    type === 'function' ||\n    (typeof value?.$$typeof === 'symbol' && REACT_SYM_RE.test(String(value?.$$typeof)))\n  )\n}\n","import {warning} from '../createValidationResult'\nimport inspect from '../../inspect'\nimport type {SchemaValidationResult} from '../../typedefs'\nimport {isComponentLike} from './isComponent'\n\nexport function validateComponent(typeDef: any): SchemaValidationResult[] {\n  const components = 'components' in typeDef ? typeDef.components : false\n  if (!components) {\n    return []\n  }\n\n  const warnings: SchemaValidationResult[] = []\n\n  if (components.input && !isComponentLike(components.input)) {\n    warnings.push(\n      warning(\n        `The \\`components.input\\` property is set but does not appear to be a valid React component (expected a function, but saw ${inspect(\n          components.input\n        )}). If you have imported a custom input component, please verify that you have imported the correct named/default export.`\n      )\n    )\n  }\n\n  if (components.field && !isComponentLike(components.field)) {\n    warnings.push(\n      warning(\n        `The \\`components.field\\` property is set but does not appear to be a valid React component (expected a function, but saw ${inspect(\n          components.field\n        )}). If you have imported a custom field component, please verify that you have imported the correct named/default export.`\n      )\n    )\n  }\n\n  if (components.item && !isComponentLike(components.item)) {\n    warnings.push(\n      warning(\n        `The \\`components.item\\` property is set but does not appear to be a valid React component (expected a function, but saw ${inspect(\n          components.item\n        )}). If you have imported a custom item component, please verify that you have imported the correct named/default export.`\n      )\n    )\n  }\n\n  if (components.preview && !isComponentLike(components.preview)) {\n    warnings.push(\n      warning(\n        `The \\`components.preview\\` property is set but does not appear to be a valid React component (expected a function, but saw ${inspect(\n          components.preview\n        )}). If you have imported a custom preview component, please verify that you have imported the correct named/default export.`\n      )\n    )\n  }\n\n  return warnings\n}\n","import {isPlainObject} from 'lodash'\nimport {error, HELP_IDS, warning} from '../createValidationResult'\nimport inspect from '../../inspect'\nimport {validateComponent} from '../utils/validateComponent'\n\nconst VALID_FIELD_RE = /^[A-Za-z]+[0-9A-Za-z_]*$/\nconst CONVENTIONAL_FIELD_RE = /^[A-Za-z_]+[0-9A-Za-z_]*$/\ninterface Field {\n  name: string\n}\n\ninterface PreviewConfig {\n  select?: {\n    [key: string]: string\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  prepare?: Function\n}\n\nfunction validateFieldName(name): Array<any> {\n  if (typeof name !== 'string') {\n    return [\n      error(\n        `Field names must be strings. Saw \"${inspect(name)}\"`,\n        HELP_IDS.OBJECT_FIELD_NAME_INVALID\n      ),\n    ]\n  }\n  if (name.startsWith('_')) {\n    return [\n      error(\n        `Invalid field name \"${name}\". Field names cannot start with underscores \"_\" as it's reserved for system fields.`,\n        HELP_IDS.OBJECT_FIELD_NAME_INVALID\n      ),\n    ]\n  }\n\n  if (!VALID_FIELD_RE.test(name)) {\n    return [\n      error(\n        `Invalid field name: \"${name}\". Fields can only contain characters from A-Z, numbers and underscores and should not start with a number (must pass the regular expression ${String(\n          VALID_FIELD_RE\n        )}).`,\n        HELP_IDS.OBJECT_FIELD_NAME_INVALID\n      ),\n    ]\n  }\n  if (!CONVENTIONAL_FIELD_RE.test(name)) {\n    return [\n      warning(\n        'Thats an interesting field name for sure! But it is... how to put it... a bit... unconventional?' +\n          ' It may be wise to keep special characters out of field names for easier access later on.'\n      ),\n      HELP_IDS.OBJECT_FIELD_NAME_INVALID,\n    ]\n  }\n  return []\n}\n\nexport function validateField(field, _visitorContext) {\n  if (!isPlainObject(field)) {\n    return [\n      error(\n        `Incorrect type for field definition - should be an object, saw ${inspect(field)}`,\n        HELP_IDS.OBJECT_FIELD_DEFINITION_INVALID_TYPE\n      ),\n    ]\n  }\n\n  const problems = []\n  problems.push(\n    ...('name' in field\n      ? validateFieldName(field.name)\n      : [error('Missing field name', HELP_IDS.OBJECT_FIELD_NAME_INVALID)])\n  )\n  problems.push(...validateComponent(field))\n  return problems\n}\n\nfunction getDuplicateFields(array: Array<Field>): Array<Array<Field>> {\n  const dupes: {[name: string]: Array<Field>} = {}\n  array.forEach((field) => {\n    if (!dupes[field.name]) {\n      dupes[field.name] = []\n    }\n    dupes[field.name].push(field)\n  })\n  return Object.keys(dupes)\n    .map((fieldName) => (dupes[fieldName].length > 1 ? dupes[fieldName] : null))\n    .filter(Boolean)\n}\n\nexport function validateFields(fields: any, options = {allowEmpty: false}) {\n  const problems = []\n  const fieldsIsArray = Array.isArray(fields)\n  if (!fieldsIsArray) {\n    return [\n      error(\n        `The \"fields\" property must be an array of fields. Instead saw \"${typeof fields}\"`,\n        HELP_IDS.OBJECT_FIELDS_INVALID\n      ),\n    ]\n  }\n\n  const fieldsWithNames = fields.filter((field) => typeof field.name === 'string')\n\n  getDuplicateFields(fieldsWithNames).forEach((dupes) => {\n    problems.push(\n      error(\n        `Found ${dupes.length} fields with name \"${dupes[0].name}\" in object`,\n        HELP_IDS.OBJECT_FIELD_NOT_UNIQUE\n      )\n    )\n  })\n\n  if (fields.length === 0 && !options.allowEmpty) {\n    problems.push(error('Object should have at least one field', HELP_IDS.OBJECT_FIELDS_INVALID))\n  }\n\n  return problems\n}\n\nexport function validatePreview(preview: PreviewConfig) {\n  if (!isPlainObject(preview)) {\n    return [error(`The \"preview\" property must be an object, instead saw \"${typeof preview}\"`)]\n  }\n\n  if (typeof preview.prepare !== 'undefined' && typeof preview.prepare !== 'function') {\n    return [\n      error(\n        `The \"preview.prepare\" property must be a function, instead saw \"${typeof preview.prepare}\"`\n      ),\n    ]\n  }\n\n  if (!preview.select) {\n    return []\n  }\n\n  if (!isPlainObject(preview.select)) {\n    return [\n      error(\n        `The \"preview.select\" property must be an object, instead saw \"${typeof preview.prepare}\"`\n      ),\n    ]\n  }\n\n  return Object.keys(preview.select).reduce((errs, key) => {\n    return typeof preview.select[key] === 'string'\n      ? errs\n      : errs.concat(\n          error(\n            `The key \"${key}\" of \"preview.select\" must be a string, instead saw \"${typeof preview\n              .select[key]}\"`\n          )\n        )\n  }, [])\n}\n\nexport default (typeDef, visitorContext) => {\n  let problems = validateFields(typeDef.fields)\n\n  let preview = typeDef.preview\n  if (preview) {\n    const previewErrors = validatePreview(typeDef.preview)\n    problems = problems.concat(previewErrors)\n    preview = previewErrors.some((err) => err.severity === 'error') ? {} : preview\n  }\n\n  if (\n    typeDef.type !== 'document' &&\n    typeDef.type !== 'object' &&\n    typeof typeDef.initialValue !== 'undefined'\n  ) {\n    problems.push(\n      error(`The \"initialValue\" property is currently only supported for document & object types.`)\n    )\n  }\n\n  return {\n    ...typeDef,\n    preview,\n    fields: (Array.isArray(typeDef.fields) ? typeDef.fields : []).map((field, index) => {\n      const {name, ...fieldTypeDef} = field\n      const {_problems, ...fieldType} = visitorContext.visit(fieldTypeDef, index)\n      return {\n        name,\n        ...fieldType,\n        _problems: validateField(field, visitorContext).concat(_problems || []),\n      }\n    }),\n    _problems: problems,\n  }\n}\n","import {isPlainObject} from 'lodash'\nimport {error} from '../createValidationResult'\nimport object from './object'\n\nexport default (typeDefinition, visitorContext) => {\n  const typeDef = object(typeDefinition, visitorContext)\n  const {initialValue, initialValues} = typeDef\n\n  const hasInitialValue = typeof initialValue !== 'undefined'\n  if (hasInitialValue && !isPlainObject(initialValue) && typeof initialValue !== 'function') {\n    typeDef._problems.push(\n      error(`The \"initialValue\" property must be either a plain object or a function`)\n    )\n  }\n\n  if (typeof initialValues !== 'undefined') {\n    typeDef._problems.push(error(`Found property \"initialValues\" - did you mean \"initialValue\"?`))\n  }\n\n  return typeDef\n}\n","import {error, HELP_IDS} from '../createValidationResult'\nimport {flatten, isPlainObject} from 'lodash'\nimport {getDupes} from '../utils/getDupes'\nimport {SchemaValidationResult} from '../../typedefs'\n\nfunction normalizeToProp(typeDef) {\n  if (Array.isArray(typeDef.to)) {\n    return typeDef.to\n  }\n  return typeDef.to ? [typeDef.to] : typeDef.to\n}\n\nexport default (typeDef, visitorContext) => {\n  const isValidTo = Array.isArray(typeDef.to) || isPlainObject(typeDef.to)\n  const normalizedTo = normalizeToProp(typeDef)\n\n  const problems = flatten([\n    isValidTo\n      ? getDupes(normalizedTo, (t) => `${t.name};${t.type}`).map((dupes) =>\n          error(\n            `Found ${dupes.length} members with same type, but not unique names \"${dupes[0].type}\" in reference. This makes it impossible to tell their values apart and you should consider naming them`,\n            HELP_IDS.REFERENCE_TO_INVALID\n          )\n        )\n      : error(\n          'The reference type is missing or having an invalid value for the required \"to\" property. It should be an array of accepted types.',\n          HELP_IDS.REFERENCE_TO_INVALID\n        ),\n  ])\n\n  if (isValidTo && normalizedTo.length === 0) {\n    problems.push(\n      error(\n        'The reference type should define at least one accepted type. Please check the \"to\" property.',\n        HELP_IDS.REFERENCE_TO_INVALID\n      )\n    )\n  }\n\n  problems.push(...getOptionErrors(typeDef))\n\n  return {\n    ...typeDef,\n    to: (isValidTo ? normalizedTo : []).map(visitorContext.visit),\n    _problems: problems,\n  }\n}\n\nfunction getOptionErrors(typeDef: any): SchemaValidationResult[] {\n  const {options} = typeDef\n  const problems = [] as SchemaValidationResult[]\n\n  problems.push(\n    ...['filter', 'filterParams']\n      .filter((key) => key in typeDef)\n      .map((key) =>\n        error(\n          `\\`${key}\\` is not allowed on a reference type definition - did you mean \\`options.${key}\\`?`,\n          HELP_IDS.REFERENCE_INVALID_OPTIONS_LOCATION\n        )\n      )\n  )\n\n  if (!options) {\n    return problems\n  }\n\n  if (!isPlainObject(options)) {\n    return problems.concat(\n      error(\n        'The reference type expects `options` to be an object',\n        HELP_IDS.REFERENCE_INVALID_OPTIONS\n      )\n    )\n  }\n\n  if (typeof options.filter === 'function' && typeof options.filterParams !== 'undefined') {\n    return problems.concat(\n      error(\n        '`filterParams` cannot be used if `filter` is a function. Either statically define `filter` as a string, or return `params` from the `filter`-function.',\n        HELP_IDS.REFERENCE_INVALID_FILTER_PARAMS_COMBINATION\n      )\n    )\n  }\n\n  if (typeof options.filter === 'function' || (!options.filter && !options.filterParams)) {\n    return problems\n  }\n\n  if (typeof options.filter !== 'string') {\n    return problems.concat(\n      error(`If set, \\`filter\\` must be a string. Got ${typeof options.filter}`)\n    )\n  }\n\n  if (typeof options.filterParams !== 'undefined' && !isPlainObject(options.filterParams)) {\n    return problems.concat(error(`If set, \\`filterParams\\` must be an object.`))\n  }\n\n  if (options.filterParams) {\n    return problems.concat(\n      Object.keys(options.filterParams)\n        .filter((key) => key.startsWith('__') || key.startsWith('$'))\n        .map((key) => error(`Filter parameter cannot be prefixed with \"$\" or \"__\". Got ${key}\".`))\n    )\n  }\n\n  return problems\n}\n","import {flatten, partition} from 'lodash'\nimport humanizeList from 'humanize-list'\nimport {error, HELP_IDS, warning} from '../createValidationResult'\nimport {getDupes} from '../utils/getDupes'\nimport {coreTypeNames} from '../../coreTypes'\n\nfunction isPrimitiveTypeName(typeName) {\n  return typeName === 'string' || typeName === 'number' || typeName === 'boolean'\n}\n\nfunction isAssignable(typeName, type) {\n  return (typeof type.name === 'string' ? type.name : type.type) === typeName\n}\n\nfunction quote(n) {\n  return `\"${n}\"`\n}\n\nfunction pluralize(arr: unknown[], suf = 's') {\n  return arr.length === 1 ? '' : suf\n}\n\nfunction format(value: unknown) {\n  if (Array.isArray(value)) {\n    return `array with ${value.length} entries`\n  }\n  if (typeof value === 'object' && value !== null) {\n    return `object with keys ${humanizeList(Object.keys(value).map(quote))}`\n  }\n  return quote(value)\n}\n\nexport default (typeDef, visitorContext) => {\n  // name should already have been marked\n  const ofIsArray = Array.isArray(typeDef.of)\n\n  if (ofIsArray) {\n    const invalid = typeDef.of.reduce((errs, def, idx) => {\n      if (typeof def.name === 'string') {\n        // If an array member has been given a \"local\" type name, we want to trigger an error if the given member type name\n        // is one of the builtin types\n        //\n        // The following examples should be an error (where book is an existing root level type and reference is a built-in type):\n        //  - (…) of: [{type: 'book', name: 'image'}]\n        //  - (…) of: [{type: 'book', name: 'object'}]\n        //  - (…) of: [{type: 'object', name: 'reference'}]\n        // The following examples are valid (where \"address\" is not defined as a global object type)\n        //  - (…) of: [{type: 'object', name: 'address'}]\n        // The following examples are redundant, but should be allowed (at least for now)\n        //  - (…) of: [{type: 'object', name: 'object'}]\n        //  - (…) of: [{type: 'image', name: 'image'}]\n\n        if (\n          // specifying the same name as the type is redundant, but should not be a hard error at this point\n          // Consider showing a warning for this and deprecate this ability eventually\n          def.name !== def.type &&\n          coreTypeNames.includes(def.name)\n        ) {\n          return errs.concat(\n            error(\n              `Found array member declaration with the same type name as a built-in type (\"${def.name}\"). Array members can not be given the same name as a built-in type.`,\n              HELP_IDS.ARRAY_OF_TYPE_BUILTIN_TYPE_CONFLICT\n            )\n          )\n        }\n      }\n\n      if (def.type === 'object' && def.name && visitorContext.getType(def.name)) {\n        return errs.concat(\n          warning(\n            `Found array member declaration with the same name as the global schema type \"${def.name}\". It's recommended to use a unique name to avoid possibly incompatible data types that shares the same name.`,\n            HELP_IDS.ARRAY_OF_TYPE_GLOBAL_TYPE_CONFLICT\n          )\n        )\n      }\n      if (def.type === 'array') {\n        return errs.concat(\n          error(\n            `Found array member declaration of type \"array\" - multidimensional arrays are not currently supported by Sanity`,\n            HELP_IDS.ARRAY_OF_ARRAY\n          )\n        )\n      }\n\n      if (def) {\n        return errs\n      }\n\n      const err = `Found ${def === null ? 'null' : typeof def}, expected member declaration`\n      return errs.concat(\n        error(\n          `Found invalid type member declaration in array at index ${idx}: ${err}`,\n          HELP_IDS.ARRAY_OF_INVALID\n        )\n      )\n    }, [])\n\n    if (invalid.length > 0) {\n      return {\n        ...typeDef,\n        of: [],\n        _problems: invalid,\n      }\n    }\n  }\n\n  const problems = flatten([\n    ofIsArray\n      ? getDupes(typeDef.of, (t) => `${t.name};${t.type}`).map((dupes) =>\n          error(\n            `Found ${dupes.length} members with same type, but not unique names \"${dupes[0].type}\" in array. This makes it impossible to tell their values apart and you should consider naming them`,\n            HELP_IDS.ARRAY_OF_NOT_UNIQUE\n          )\n        )\n      : error(\n          'The array type is missing or having an invalid value for the required \"of\" property',\n          HELP_IDS.ARRAY_OF_INVALID\n        ),\n  ])\n  const of = ofIsArray ? typeDef.of : []\n\n  // Don't allow object types without a name in block arrays\n  const hasObjectTypesWithoutName = of.some(\n    (type) => type.type === 'object' && typeof type.name === 'undefined'\n  )\n  const hasBlockType = of.some((ofType) => ofType.type === 'block')\n  if (hasBlockType && hasObjectTypesWithoutName) {\n    problems.push(\n      error(\n        \"The array type's 'of' property can't have an object type without a 'name' property as member, when the 'block' type is also a member of that array.\",\n        HELP_IDS.ARRAY_OF_INVALID\n      )\n    )\n  }\n\n  const [primitiveTypes, objectTypes] = partition(\n    of,\n    (ofType) =>\n      isPrimitiveTypeName(ofType.type) ||\n      isPrimitiveTypeName(visitorContext.getType(ofType.type)?.jsonType)\n  )\n\n  const isMixedArray = primitiveTypes.length > 0 && objectTypes.length > 0\n\n  if (isMixedArray) {\n    const primitiveTypeNames = primitiveTypes.map((t) => t.type)\n    const objectTypeNames = objectTypes.map((t) => t.type)\n    problems.push(\n      error(\n        `The array type's 'of' property can't have both object types and primitive types (found primitive type ${pluralize(\n          primitiveTypeNames\n        )} ${humanizeList(primitiveTypeNames.map(quote))} and object type${pluralize(\n          objectTypeNames\n        )} ${humanizeList(objectTypeNames.map(quote))})`,\n        HELP_IDS.ARRAY_OF_INVALID\n      )\n    )\n  }\n\n  const list = typeDef?.options?.list\n  if (!isMixedArray && Array.isArray(list)) {\n    const isArrayOfPrimitives = primitiveTypes.length > 0\n    if (isArrayOfPrimitives) {\n      list.forEach((option) => {\n        const value = option?.value ?? option\n        const isDeclared = primitiveTypes.some((primitiveType) => {\n          return typeof value === visitorContext.getType(primitiveType.type).jsonType\n        })\n        if (!isDeclared) {\n          const formattedTypeList = humanizeList(\n            primitiveTypes.map((t) => t.name || t.type),\n            {conjunction: 'or'}\n          )\n          problems.push(\n            error(\n              `An invalid entry found in options.list: ${format(\n                value\n              )}. Must be either a value of type ${formattedTypeList}, or an object with {title: string, value: ${formattedTypeList}}`,\n              HELP_IDS.ARRAY_PREDEFINED_CHOICES_INVALID\n            )\n          )\n        }\n      })\n    } else {\n      list.forEach((option) => {\n        const optionTypeName = option._type || 'object'\n        const isDeclared = objectTypes.some((validObjectType) =>\n          isAssignable(optionTypeName, validObjectType)\n        )\n        if (!isDeclared) {\n          problems.push(\n            error(\n              `An invalid entry found in options.list: ${format(\n                option\n              )}. Must be an object with \"_type\" set to ${humanizeList(\n                objectTypes\n                  .map((t) => t.name || t.type)\n                  .map((t) => (t === 'object' ? 'undefined' : quote(t))),\n                {conjunction: 'or'}\n              )}`,\n              HELP_IDS.ARRAY_PREDEFINED_CHOICES_INVALID\n            )\n          )\n        }\n      })\n    }\n  }\n\n  if (typeDef?.options?.list && typeDef?.options?.layout === 'tags') {\n    problems.push(\n      warning(\n        'Found array member declaration with both tags layout and a list of predefined values. If you want to display a list of predefined values, remove the tags layout from `options`.'\n      )\n    )\n  }\n\n  return {\n    ...typeDef,\n    of: of.map(visitorContext.visit),\n    _problems: problems,\n  }\n}\n","import {warning, HELP_IDS} from '../createValidationResult'\n\nexport default (typeDef, visitorContext) => {\n  const problems = []\n\n  if (typeDef.options && typeDef.options.slugifyFn) {\n    problems.push(\n      warning(\n        'Heads up! The \"slugifyFn\" option has been renamed to \"slugify\".',\n        HELP_IDS.SLUG_SLUGIFY_FN_RENAMED\n      )\n    )\n\n    typeDef.options.slugify = typeDef.options.slugifyFn\n  }\n\n  return {\n    ...typeDef,\n    _problems: problems,\n  }\n}\n","import {error, HELP_IDS} from '../createValidationResult'\nimport {validateFields, validateField} from './object'\n\nexport default (typeDef, visitorContext) => {\n  const problems = []\n  const fields = typeDef.fields\n\n  if (fields) {\n    problems.push(...validateFields(fields, {allowEmpty: true}))\n  }\n\n  const invalidFieldNames = Array.isArray(fields)\n    ? fields?.filter((field) => field.name === 'asset')\n    : []\n\n  if (\n    typeDef.options &&\n    typeof typeDef.options.metadata !== 'undefined' &&\n    !Array.isArray(typeDef.options.metadata)\n  ) {\n    problems.push(\n      error(\n        `Invalid type for file \\`metadata\\` field - must be an array of strings`,\n        HELP_IDS.ASSET_METADATA_FIELD_INVALID\n      )\n    )\n  } else if (invalidFieldNames.length > 0) {\n    problems.push(error('The name `asset` is not a valid field name for type `file`.'))\n  }\n\n  return {\n    ...typeDef,\n    fields: (Array.isArray(fields) ? fields : []).map((field, index) => {\n      const {name, ...fieldTypeDef} = field\n      const {_problems, ...fieldType} = visitorContext.visit(fieldTypeDef, index)\n      return {\n        name,\n        ...fieldType,\n        _problems: validateField(field, visitorContext).concat(_problems || []),\n      }\n    }),\n    _problems: problems,\n  }\n}\n","import {error, warning, HELP_IDS} from '../createValidationResult'\nimport {validateFields, validateField} from './object'\n\nconst autoMeta = ['dimensions', 'hasAlpha', 'isOpaque']\n\nexport default (typeDef, visitorContext) => {\n  const problems = []\n  const fields = typeDef.fields\n\n  if (fields) {\n    problems.push(...validateFields(fields, {allowEmpty: true}))\n  }\n\n  let options = typeDef.options\n  const metadata = options?.metadata\n  const superfluousMeta = Array.isArray(metadata)\n    ? metadata.filter((meta) => autoMeta.includes(meta))\n    : []\n\n  const invalidFieldNames = ['asset', 'hotspot', 'crop']\n\n  const fieldsWithInvalidName = Array.isArray(fields)\n    ? fields?.filter((field) => invalidFieldNames.includes(field.name))\n    : []\n\n  if (typeof metadata !== 'undefined' && !Array.isArray(metadata)) {\n    problems.push(\n      error(\n        `Invalid type for image \\`metadata\\` field - must be an array of strings`,\n        HELP_IDS.ASSET_METADATA_FIELD_INVALID\n      )\n    )\n  } else if (superfluousMeta.length > 0) {\n    problems.push(\n      warning(\n        `Image \\`metadata\\` field contains superfluous properties (they are always included): ${superfluousMeta.join(\n          ', '\n        )}`\n      )\n    )\n    options = {...options, metadata: metadata.filter((meta) => !autoMeta.includes(meta))}\n  } else if (fieldsWithInvalidName.length > 0) {\n    problems.push(\n      error(\n        `The names \\`${invalidFieldNames.join(\n          '`, `'\n        )}\\` are invalid field names for type \\`image\\`.`\n      )\n    )\n  }\n\n  return {\n    ...typeDef,\n    options,\n    fields: (Array.isArray(fields) ? fields : []).map((field, index) => {\n      const {name, ...fieldTypeDef} = field\n      const {_problems, ...fieldType} = visitorContext.visit(fieldTypeDef, index)\n      return {\n        name,\n        ...fieldType,\n        _problems: validateField(field, visitorContext).concat(_problems || []),\n      }\n    }),\n    _problems: problems,\n  }\n}\n","export function isJSONTypeOf(type, jsonType, visitorContext) {\n  if ('jsonType' in type) {\n    return type.jsonType === jsonType\n  }\n  const parentType = visitorContext.getType(type.type)\n  if (!parentType) {\n    throw new Error(`Could not resolve jsonType of ${type.name}. No parent type found`)\n  }\n  return isJSONTypeOf(parentType, jsonType, visitorContext)\n}\n","import {omit, isPlainObject} from 'lodash'\nimport humanizeList from 'humanize-list'\nimport {error, HELP_IDS, warning} from '../createValidationResult'\nimport {isJSONTypeOf} from '../utils/isJSONTypeOf'\n\nconst getTypeOf = (thing) => (Array.isArray(thing) ? 'array' : typeof thing)\nconst quote = (str) => `\"${str}\"`\nconst allowedKeys = [\n  'components',\n  'lists',\n  'marks',\n  'name',\n  'of',\n  'options',\n  'styles',\n  'title',\n  'type',\n  'validation',\n]\nconst allowedMarkKeys = ['decorators', 'annotations']\nconst allowedStyleKeys = ['blockEditor', 'title', 'value', 'component']\nconst allowedDecoratorKeys = ['blockEditor', 'title', 'value', 'icon', 'component']\nconst allowedListKeys = ['title', 'value', 'icon', 'component']\n\nexport default function validateBlockType(typeDef, visitorContext) {\n  const problems = []\n  let styles = typeDef.styles\n  let lists = typeDef.lists\n  let marks = typeDef.marks\n  let members = typeDef.of\n\n  const disallowedKeys = Object.keys(typeDef).filter(\n    (key) => !allowedKeys.includes(key) && !key.startsWith('_')\n  )\n\n  if (disallowedKeys.length > 0) {\n    problems.push(\n      error(\n        `Found unknown properties for block declaration: ${humanizeList(disallowedKeys.map(quote))}`\n      )\n    )\n  }\n\n  if (marks) {\n    marks = validateMarks(typeDef.marks, visitorContext, problems)\n  }\n\n  if (styles) {\n    styles = validateStyles(styles, visitorContext, problems)\n  }\n\n  if (lists) {\n    lists = validateLists(lists, visitorContext, problems)\n  }\n\n  if (members) {\n    members = validateMembers(members, visitorContext, problems)\n  }\n  return {\n    ...omit(typeDef, disallowedKeys),\n    marks,\n    styles,\n    name: typeDef.name || typeDef.type,\n    of: members,\n    _problems: problems,\n  }\n}\n\nfunction validateMarks(marks, visitorContext, problems) {\n  let decorators = marks.decorators\n  let annotations = marks.annotations\n\n  if (!isPlainObject(marks)) {\n    problems.push(error(`\"marks\" declaration should be an object, got ${getTypeOf(marks)}`))\n    return problems\n  }\n\n  const disallowedMarkKeys = Object.keys(marks).filter(\n    (key) => !allowedMarkKeys.includes(key) && !key.startsWith('_')\n  )\n\n  if (disallowedMarkKeys.length > 0) {\n    problems.push(\n      error(\n        `Found unknown properties for block declaration: ${humanizeList(\n          disallowedMarkKeys.map(quote)\n        )}`\n      )\n    )\n  }\n\n  if (decorators && !Array.isArray(decorators)) {\n    problems.push(\n      error(`\"marks.decorators\" declaration should be an array, got ${getTypeOf(decorators)}`)\n    )\n  } else if (decorators) {\n    decorators\n      .filter((dec) => !!dec.blockEditor)\n      .forEach((dec) => {\n        dec.icon = dec.blockEditor.icon\n        dec.component = dec.blockEditor.render\n      })\n    decorators = validateDecorators(decorators, visitorContext, problems)\n  }\n\n  if (annotations && !Array.isArray(annotations)) {\n    problems.push(\n      error(`\"marks.annotations\" declaration should be an array, got ${getTypeOf(annotations)}`)\n    )\n  } else if (annotations) {\n    annotations = validateAnnotations(annotations, visitorContext, problems)\n  }\n\n  return {...marks, decorators, annotations}\n}\n\nfunction validateLists(lists, visitorContext, problems) {\n  if (!Array.isArray(lists)) {\n    problems.push(error(`\"lists\" declaration should be an array, got ${getTypeOf(lists)}`))\n    return problems\n  }\n\n  lists.forEach((list, index) => {\n    if (!isPlainObject(list)) {\n      problems.push(error(`List must be an object, got ${getTypeOf(list)}`))\n      return\n    }\n\n    const name = list.value || `#${index}`\n    const disallowedKeys = Object.keys(list).filter(\n      (key) => !allowedListKeys.includes(key) && !key.startsWith('_')\n    )\n\n    if (disallowedKeys.length > 0) {\n      problems.push(\n        error(\n          `Found unknown properties for list ${name}: ${humanizeList(disallowedKeys.map(quote))}`\n        )\n      )\n    }\n\n    if (!list.value) {\n      problems.push(error(`List #${index} is missing required \"value\" property`))\n    } else if (typeof list.value !== 'string') {\n      problems.push(\n        error(\n          `List type #${index} has an invalid \"value\" property, expected string, got ${getTypeOf(\n            list.value\n          )}`\n        )\n      )\n    } else if (!list.title) {\n      problems.push(warning(`List type ${name} is missing recommended \"title\" property`))\n    }\n  })\n  return lists\n}\n\nfunction validateStyles(styles, visitorContext, problems) {\n  if (!Array.isArray(styles)) {\n    problems.push(error(`\"styles\" declaration should be an array, got ${getTypeOf(styles)}`))\n    return problems\n  }\n\n  styles.forEach((style, index) => {\n    if (!isPlainObject(style)) {\n      problems.push(error(`Style must be an object, got ${getTypeOf(style)}`))\n      return\n    }\n\n    const name = style.value || `#${index}`\n    const disallowedKeys = Object.keys(style).filter(\n      (key) => !allowedStyleKeys.includes(key) && !key.startsWith('_')\n    )\n\n    if (disallowedKeys.length > 0) {\n      problems.push(\n        error(\n          `Found unknown properties for style ${name}: ${humanizeList(disallowedKeys.map(quote))}`\n        )\n      )\n    }\n\n    if (!style.value) {\n      problems.push(error(`Style #${index} is missing required \"value\" property`))\n    } else if (typeof style.value !== 'string') {\n      problems.push(\n        error(\n          `Style #${index} has an invalid \"value\" property, expected string, got ${getTypeOf(\n            style.value\n          )}`\n        )\n      )\n    } else if (!style.title) {\n      problems.push(warning(`Style ${name} is missing recommended \"title\" property`))\n    }\n    if (typeof style.blockEditor !== 'undefined') {\n      problems.push(\n        warning(\n          `Style has deprecated key \"blockEditor\", please refer to the documentation on how to configure the block type for version 3.`,\n          HELP_IDS.DEPRECATED_BLOCKEDITOR_KEY\n        )\n      )\n      // TODO remove this backward compatibility at some point.\n      style.component = style.component || style.blockEditor.render\n    }\n  })\n  return styles\n}\n\nfunction validateDecorators(decorators, visitorContext, problems) {\n  decorators.forEach((decorator, index) => {\n    if (!isPlainObject(decorator)) {\n      problems.push(error(`Annotation must be an object, got ${getTypeOf(decorator)}`))\n      return\n    }\n\n    const name = decorator.value || `#${index}`\n    const disallowedKeys = Object.keys(decorator).filter(\n      (key) => !allowedDecoratorKeys.includes(key) && !key.startsWith('_')\n    )\n\n    if (disallowedKeys.length > 0) {\n      problems.push(\n        error(\n          `Found unknown properties for decorator ${name}: ${humanizeList(\n            disallowedKeys.map(quote)\n          )}`\n        )\n      )\n    }\n\n    if (!decorator.value) {\n      problems.push(error(`Decorator #${index} is missing required \"value\" property`))\n    } else if (typeof decorator.value !== 'string') {\n      problems.push(\n        error(\n          `Decorator #${index} has an invalid \"value\" property, expected string, got ${getTypeOf(\n            decorator.value\n          )}`\n        )\n      )\n    } else if (!decorator.title) {\n      problems.push(warning(`Decorator ${name} is missing recommended \"title\" property`))\n    }\n    if (typeof decorator.blockEditor !== 'undefined') {\n      problems.push(\n        warning(\n          `Decorator \"${name}\" has deprecated key \"blockEditor\", please refer to the documentation on how to configure the block type for version 3.`,\n          HELP_IDS.DEPRECATED_BLOCKEDITOR_KEY\n        )\n      )\n      // TODO remove this backward compatibility at some point.\n      decorator.icon = decorator.icon || decorator.blockEditor.icon\n      decorator.component = decorator.component || decorator.blockEditor.render\n    }\n  })\n  return decorators\n}\n\nfunction validateAnnotations(annotations, visitorContext, problems) {\n  return annotations.map((annotation) => {\n    if (!isPlainObject(annotation)) {\n      return {\n        ...annotation,\n        _problems: [error(`Annotation must be an object, got ${getTypeOf(annotation)}`)],\n      }\n    }\n\n    const {_problems} = visitorContext.visit(annotation, visitorContext)\n    const targetType = annotation.type && visitorContext.getType(annotation.type)\n    if (targetType && !isJSONTypeOf(targetType, 'object', visitorContext)) {\n      _problems.push(\n        error(\n          `Annotation cannot have type \"${annotation.type}\" - annotation types must inherit from object`\n        )\n      )\n    }\n\n    if (typeof annotation.blockEditor !== 'undefined') {\n      problems.push(\n        warning(\n          `Annotation has deprecated key \"blockEditor\", please refer to the documentation on how to configure the block type for version 3.`,\n          HELP_IDS.DEPRECATED_BLOCKEDITOR_KEY\n        )\n      )\n      // TODO remove this backward compatibility at some point.\n      annotation.icon = annotation.icon || annotation.blockEditor.icon\n      if (annotation.blockEditor?.render && !annotation.components?.annotation) {\n        annotation.components = annotation.components || {}\n        annotation.components.annotation =\n          annotation.components.annotation || annotation.blockEditor.render\n      }\n    }\n\n    return {...annotation, _problems}\n  })\n}\n\nfunction validateMembers(members, visitorContext, problems) {\n  if (!Array.isArray(members)) {\n    problems.push(error(`\"of\" declaration should be an array, got ${getTypeOf(members)}`))\n    return undefined\n  }\n\n  return members.map((member) => {\n    const {_problems} = visitorContext.visit(member, visitorContext)\n    return {...member, _problems}\n  })\n}\n","import type {SchemaType} from '@sanity/types'\nimport type {SchemaValidationResult} from '../../typedefs'\nimport {error} from '../createValidationResult'\n\nexport function validateNonObjectFieldsProp(\n  typeDef: SchemaType,\n  visitorContext\n): SchemaValidationResult[] {\n  if (!('fields' in typeDef)) {\n    return []\n  }\n\n  let type = typeDef\n  while (type && !type.jsonType) {\n    type = visitorContext.getType(type.type)\n  }\n\n  if (type && type.jsonType !== 'object') {\n    return [error(`Type has propery \"fields\", but is not an object/document type.`)]\n  }\n\n  return []\n}\n","import leven from 'leven'\nimport humanize from 'humanize-list'\nimport {error, HELP_IDS} from '../createValidationResult'\n\nconst quote = (str) => `\"${str}\"`\n\nexport function validateTypeName(typeName: string, visitorContext) {\n  const possibleTypeNames = visitorContext.getTypeNames()\n\n  if (!typeName) {\n    return [\n      error(\n        `Type is missing a type. Valid types are: ${humanize(possibleTypeNames)}`,\n        HELP_IDS.TYPE_MISSING_TYPE\n      ),\n    ]\n  }\n\n  if (typeof typeName !== 'string') {\n    return [\n      error(\n        `Type has an invalid \"type\"-property - should be a string. Valid types are: ${humanize(\n          possibleTypeNames\n        )}`,\n        HELP_IDS.TYPE_MISSING_TYPE\n      ),\n    ]\n  }\n\n  const isValid = possibleTypeNames.includes(typeName)\n\n  if (!isValid) {\n    const suggestions = possibleTypeNames\n      .map((possibleTypeName) => {\n        return [leven(typeName, possibleTypeName), possibleTypeName]\n      })\n      .filter(([distance]) => distance < 3)\n      .map(([_, name]) => name)\n\n    const suggestion =\n      suggestions.length > 0\n        ? ` Did you mean ${humanize(suggestions.map(quote), {conjunction: 'or'})}?`\n        : ''\n\n    return [\n      error(\n        `Unknown type: ${typeName}.${suggestion}\\n\\nValid types are: ${humanize(possibleTypeNames)}`\n      ),\n    ]\n  }\n  return []\n}\n","import {SchemaValidationResult} from '../../typedefs'\nimport {warning} from '../createValidationResult'\n\nexport function validateDeprecatedProperties(type): SchemaValidationResult[] {\n  const warnings = []\n\n  if (type?.inputComponent) {\n    warnings.push(\n      warning(`The \"inputComponent\" property is deprecated. Use \"components.input\" instead.`)\n    )\n  }\n\n  if (type?.preview?.component) {\n    warnings.push(\n      warning(`The \"preview.component\" property is deprecated. Use \"components.preview\" instead.`)\n    )\n  }\n\n  if (type?.diffComponent) {\n    warnings.push(\n      warning(`The \"diffComponent\" property is deprecated. Use \"components.diff\" instead.`)\n    )\n  }\n\n  if (type?.options?.editModal) {\n    warnings.push(\n      warning(`The \"options.editModal\" property is deprecated. Use \"options.modal\" instead.`)\n    )\n  }\n\n  if (type?.options?.isHighlighted) {\n    warnings.push(\n      warning(\n        `The \"options.isHighlighted\" property is deprecated. You can put fields behind a collapsed fieldset if you want to hide them from plain sight.`\n      )\n    )\n  }\n\n  return warnings\n}\n","import {validateNonObjectFieldsProp} from '../utils/validateNonObjectFieldsProp'\nimport {validateTypeName} from '../utils/validateTypeName'\nimport {validateDeprecatedProperties} from './deprecated'\n\nexport default (typeDef, visitorContext) => {\n  return {\n    ...typeDef,\n    _problems: [\n      ...validateTypeName(typeDef.type, visitorContext),\n      ...validateNonObjectFieldsProp(typeDef, visitorContext),\n      ...validateDeprecatedProperties(typeDef),\n    ].filter(Boolean),\n  }\n}\n","import {error, HELP_IDS, warning} from '../createValidationResult'\nimport {validateComponent} from '../utils/validateComponent'\n\nexport default (typeDef, visitorContext) => {\n  const hasName = Boolean(typeDef.name)\n  if (!hasName && Object.keys(typeDef).length === 1) {\n    // Short-circuit on obviously invalid types (only key is _problems)\n    return {\n      ...typeDef,\n      _problems: [\n        error(\n          'Invalid/undefined type declaration, check declaration or the import/export of the schema type.',\n          HELP_IDS.TYPE_INVALID\n        ),\n      ],\n    }\n  }\n\n  const problems = []\n  if (looksLikeEsmModule(typeDef)) {\n    problems.push(\n      error(\n        'Type appears to be an ES6 module imported through CommonJS require - use an import statement or access the `.default` property',\n        HELP_IDS.TYPE_IS_ESM_MODULE\n      )\n    )\n  } else if (!hasName) {\n    problems.push(error('Missing type name', HELP_IDS.TYPE_MISSING_NAME))\n  } else if (visitorContext.isReserved(typeDef.name)) {\n    problems.push(\n      error(`Invalid type name: \"${typeDef.name}\" is a reserved name.`, HELP_IDS.TYPE_NAME_RESERVED)\n    )\n  }\n\n  if (visitorContext.isDuplicate(typeDef.name)) {\n    problems.push(\n      error(\n        `Invalid type name: A type with name \"${typeDef.name}\" is already defined in the schema.`\n      )\n    )\n  }\n\n  problems.push(...validateComponent(typeDef))\n\n  if (!('title' in typeDef)) {\n    problems.push(\n      warning(\n        \"Type is missing title. It's recommended to always set a descriptive title.\",\n        HELP_IDS.TYPE_TITLE_RECOMMENDED\n      )\n    )\n  } else if (typeof typeDef.title !== 'string') {\n    problems.push(warning('Type title is not a string.', HELP_IDS.TYPE_TITLE_INVALID))\n  }\n  return {\n    ...typeDef,\n    _problems: problems,\n  }\n}\n\nfunction looksLikeEsmModule(typeDef) {\n  return !typeDef.name && typeDef.default && (typeDef.default.name || typeDef.default.title)\n}\n","import {flatten, isPlainObject} from 'lodash'\nimport {error, HELP_IDS} from '../createValidationResult'\nimport {getDupes} from '../utils/getDupes'\nimport {SchemaValidationResult} from '../../typedefs'\n\nfunction normalizeToProp(typeDef) {\n  if (Array.isArray(typeDef.to)) {\n    return typeDef.to\n  }\n  return typeDef.to ? [typeDef.to] : typeDef.to\n}\n\nconst VALID_DATASET = /^[a-z0-9~][-_a-z0-9]+$/\nexport function isValidDatasetName(name: string): string | true {\n  const isValid = name.length >= 2 && name.toLowerCase() === name && VALID_DATASET.test(name)\n  return (\n    isValid ||\n    `The provided dataset \"${name}\" doesn't look like a valid dataset. Dataset names must be more than 2 characters, can only contain lowercase characters, numbers, underscores and dashes and can not start with a dash or an underscore`\n  )\n}\n\nexport default (typeDef, visitorContext) => {\n  const isValidTo = Array.isArray(typeDef.to) || isPlainObject(typeDef.to)\n  const normalizedTo = normalizeToProp(typeDef)\n\n  const problems = flatten([\n    isValidTo\n      ? getDupes(normalizedTo, (t) => `${t.name};${t.type}`).map((dupes) =>\n          error(\n            `Found ${dupes.length} members with same type, but not unique names \"${dupes[0].type}\" in reference. This makes it impossible to tell their values apart and you should consider naming them`,\n            HELP_IDS.CROSS_DATASET_REFERENCE_INVALID\n          )\n        )\n      : error(\n          'The cross dataset reference type is missing or having an invalid value for the required \"to\" property. It should be an array of accepted types.',\n          HELP_IDS.CROSS_DATASET_REFERENCE_INVALID\n        ),\n  ])\n\n  if (isValidTo && normalizedTo.length === 0) {\n    problems.push(\n      error(\n        'The cross dataset reference type should define at least one referenced type. Please check the \"to\" property.',\n        HELP_IDS.CROSS_DATASET_REFERENCE_INVALID\n      )\n    )\n  }\n\n  normalizedTo.forEach((crossDatasetTypeDef, index) => {\n    if (!crossDatasetTypeDef.type) {\n      problems.push(\n        error(\n          `The referenced type at index ${index} must be named. Specify the name of the type you want to create references to.`,\n          HELP_IDS.CROSS_DATASET_REFERENCE_INVALID\n        )\n      )\n    }\n\n    if (!isPlainObject(crossDatasetTypeDef.preview)) {\n      problems.push(\n        error(\n          `Missing required preview config for the referenced type \"${\n            crossDatasetTypeDef.type || '<unknown type>'\n          }\"`,\n          HELP_IDS.CROSS_DATASET_REFERENCE_INVALID\n        )\n      )\n    }\n  })\n\n  if (typeof typeDef.dataset === 'string') {\n    const datasetValidation = isValidDatasetName(typeDef.dataset)\n    if (datasetValidation !== true) {\n      problems.push(error(datasetValidation, HELP_IDS.CROSS_DATASET_REFERENCE_INVALID))\n    }\n  } else {\n    problems.push(\n      error(\n        'A cross dataset reference must specify a `dataset`',\n        HELP_IDS.CROSS_DATASET_REFERENCE_INVALID\n      )\n    )\n  }\n\n  if (typeDef.studioUrl && typeof typeDef.studioUrl !== 'function') {\n    problems.push(\n      error(\n        'The \"studioUrl\" property on a cross dataset reference must be a function taking \"{id, type}\" as argument and returning a studio url.',\n        HELP_IDS.CROSS_DATASET_REFERENCE_INVALID\n      )\n    )\n  }\n\n  problems.push(...getOptionErrors(typeDef))\n\n  return {\n    ...typeDef,\n    _problems: problems,\n  }\n}\n\nfunction getOptionErrors(typeDef: any): SchemaValidationResult[] {\n  const {options} = typeDef\n  const problems = [] as SchemaValidationResult[]\n\n  problems.push(\n    ...['filter', 'filterParams']\n      .filter((key) => key in typeDef)\n      .map((key) =>\n        error(\n          `\\`${key}\\` is not allowed on a reference type definition - did you mean \\`options.${key}\\`?`,\n          HELP_IDS.REFERENCE_INVALID_OPTIONS_LOCATION\n        )\n      )\n  )\n\n  if (!options) {\n    return problems\n  }\n\n  if (!isPlainObject(options)) {\n    return problems.concat(\n      error(\n        'The reference type expects `options` to be an object',\n        HELP_IDS.REFERENCE_INVALID_OPTIONS\n      )\n    )\n  }\n\n  if (typeof options.filter === 'function' && typeof options.filterParams !== 'undefined') {\n    return problems.concat(\n      error(\n        '`filterParams` cannot be used if `filter` is a function. Either statically define `filter` as a string, or return `params` from the `filter`-function.',\n        HELP_IDS.REFERENCE_INVALID_FILTER_PARAMS_COMBINATION\n      )\n    )\n  }\n\n  if (typeof options.filter === 'function' || (!options.filter && !options.filterParams)) {\n    return problems\n  }\n\n  if (typeof options.filter !== 'string') {\n    return problems.concat(\n      error(`If set, \\`filter\\` must be a string. Got ${typeof options.filter}`)\n    )\n  }\n\n  if (typeof options.filterParams !== 'undefined' && !isPlainObject(options.filterParams)) {\n    return problems.concat(error(`If set, \\`filterParams\\` must be an object.`))\n  }\n\n  if (options.filterParams) {\n    return problems.concat(\n      Object.keys(options.filterParams)\n        .filter((key) => key.startsWith('__') || key.startsWith('$'))\n        .map((key) => error(`Filter parameter cannot be prefixed with \"$\" or \"__\". Got ${key}\".`))\n    )\n  }\n\n  return problems\n}\n","import {traverseSanitySchema} from './traverseSchema'\nimport object from './validation/types/object'\nimport documentVisitor from './validation/types/document'\nimport reference from './validation/types/reference'\nimport array from './validation/types/array'\nimport slug from './validation/types/slug'\nimport file from './validation/types/file'\nimport image from './validation/types/image'\nimport block from './validation/types/block'\nimport common from './validation/types/common'\nimport rootType from './validation/types/rootType'\nimport crossDatasetReference from './validation/types/crossDatasetReference'\nimport {_FIXME_} from './typedefs'\n\nconst typeVisitors = {\n  array,\n  object,\n  slug,\n  file,\n  image,\n  block,\n  document: documentVisitor,\n  reference: reference,\n  crossDatasetReference: crossDatasetReference,\n}\n\nconst getNoopVisitor = (visitorContext) => (schemaDef) => ({\n  name: `<unnamed_type_@_index_${visitorContext.index}>`,\n  ...schemaDef,\n  _problems: [],\n})\n\nfunction combine(...visitors) {\n  return (schemaType, visitorContext) => {\n    return visitors.reduce(\n      (result, visitor) => {\n        const res = visitor(result, visitorContext)\n        return {\n          ...res,\n          _problems: result._problems.concat(res._problems),\n        }\n      },\n      {_problems: [], ...schemaType}\n    )\n  }\n}\n\n/**\n * @internal\n */\nexport function validateSchema(schemaTypes: _FIXME_) {\n  return traverseSanitySchema(schemaTypes, (schemaDef, visitorContext) => {\n    const typeVisitor =\n      (schemaDef && schemaDef.type && typeVisitors[schemaDef.type]) ||\n      getNoopVisitor(visitorContext)\n\n    if (visitorContext.isRoot) {\n      return combine(rootType, common, typeVisitor)(schemaDef, visitorContext)\n    }\n\n    return combine(common, typeVisitor)(schemaDef, visitorContext)\n  })\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {SchemaType} from '@sanity/types'\nimport {difference} from 'lodash'\n\nconst ACTIONS_FLAG = '__experimental_actions'\n\nconst DEFAULT_ACTIONS = ['create', 'update', 'delete', 'publish']\nconst VALID_ACTIONS = DEFAULT_ACTIONS\n\n// todo: enable this when officially deprecating experimental actions\nconst DEPRECATE_EXPERIMENTAL_ACTIONS = false\n\nconst hasWarned = {}\nconst readActions = (schemaType: SchemaType): string[] => {\n  if (DEPRECATE_EXPERIMENTAL_ACTIONS && !(schemaType.name in hasWarned)) {\n    console.warn(`Heads up! Experimental actions is now deprecated and replaced by Document Actions. Read more about how to migrate on ${generateHelpUrl(\n      'experimental-actions-replaced-by-document-actions'\n    )}\".\n`)\n    hasWarned[schemaType.name] = true\n  }\n\n  return ACTIONS_FLAG in schemaType ? (schemaType[ACTIONS_FLAG] as string[]) : DEFAULT_ACTIONS\n}\n\nconst validateActions = (typeName: string, actions: string[]) => {\n  if (!Array.isArray(actions)) {\n    throw new Error(\n      `The value of <type>.${ACTIONS_FLAG} should be an array with any of the actions ${VALID_ACTIONS.join(\n        ', '\n      )}`\n    )\n  }\n\n  const invalid = difference(actions, VALID_ACTIONS)\n\n  if (invalid.length > 0) {\n    throw new Error(\n      `Invalid action${\n        invalid.length > 1 ? 's' : ''\n      } configured for schema type \"${typeName}\": ${invalid.join(\n        ', '\n      )}. Valid actions are: ${VALID_ACTIONS.join(', ')}`\n    )\n  }\n\n  return actions\n}\n\nexport const resolveEnabledActions = (schemaType: SchemaType): string[] =>\n  validateActions(schemaType.name, readActions(schemaType))\n\nexport const isActionEnabled = (schemaType: SchemaType, action: string): boolean =>\n  resolveEnabledActions(schemaType).includes(action)\n"],"names":["HELP_IDS","TYPE_INVALID","TYPE_IS_ESM_MODULE","TYPE_NAME_RESERVED","TYPE_MISSING_NAME","TYPE_MISSING_TYPE","TYPE_TITLE_RECOMMENDED","TYPE_TITLE_INVALID","OBJECT_FIELDS_INVALID","OBJECT_FIELD_NOT_UNIQUE","OBJECT_FIELD_NAME_INVALID","OBJECT_FIELD_DEFINITION_INVALID_TYPE","ARRAY_PREDEFINED_CHOICES_INVALID","ARRAY_OF_ARRAY","ARRAY_OF_INVALID","ARRAY_OF_NOT_UNIQUE","ARRAY_OF_TYPE_GLOBAL_TYPE_CONFLICT","ARRAY_OF_TYPE_BUILTIN_TYPE_CONFLICT","REFERENCE_TO_INVALID","REFERENCE_TO_NOT_UNIQUE","REFERENCE_INVALID_OPTIONS","REFERENCE_INVALID_OPTIONS_LOCATION","REFERENCE_INVALID_FILTER_PARAMS_COMBINATION","SLUG_SLUGIFY_FN_RENAMED","ASSET_METADATA_FIELD_INVALID","CROSS_DATASET_REFERENCE_INVALID","DEPRECATED_BLOCKEDITOR_KEY","createValidationResult","severity","message","helpId","Object","keys","some","id","Error","error","warning","groupProblems","types","flatten","default","map","type","getTypeProblems","filter","problems","length","createTypeWithMembersProblemsAccessor","memberPropertyName","getMembers","get","getProblems","parentPath","currentPath","kind","name","members","memberProblems","Array","isArray","memberType","propertySegment","memberPath","path","_problems","arrify","val","getObjectProblems","getImageProblems","getFileProblems","getArrayProblems","getReferenceProblems","to","getBlockAnnotationProblems","getBlockMemberProblems","getBlockProblems","getDefaultProblems","getDupes","array","selector","v","dupes","reduce","acc","item","key","push","Boolean","NOOP_VISITOR","typeDef","TYPE_TYPE","FUTURE_RESERVED","traverseSchema","coreTypes","visitor","coreTypesRegistry","create","registry","coreTypeNames","reservedTypeNames","concat","typeNames","forEach","coreType","i","getType","typeName","duplicateNames","uniq","isDuplicate","includes","getTypeNames","isReserved","visitType","isRoot","index","visit","coreTypeDef","assign","res","has","getTypes","toJSON","jsonType","t","traverseSanitySchema","schemaTypes","REACT_SYM_RE","isComponentLike","value","$$typeof","test","String","validateComponent","components","warnings","input","inspect","field","preview","VALID_FIELD_RE","CONVENTIONAL_FIELD_RE","validateFieldName","startsWith","validateField","_visitorContext","isPlainObject","getDuplicateFields","fieldName","validateFields","fields","options","allowEmpty","fieldsIsArray","fieldsWithNames","validatePreview","prepare","select","errs","object","visitorContext","previewErrors","err","initialValue","fieldTypeDef","fieldType","documentVisitor","typeDefinition","initialValues","hasInitialValue","normalizeToProp","reference","isValidTo","normalizedTo","getOptionErrors","filterParams","isPrimitiveTypeName","isAssignable","quote","n","pluralize","arr","suf","format","humanizeList","_a","_b","_c","ofIsArray","of","invalid","def","idx","hasObjectTypesWithoutName","hasBlockType","ofType","primitiveTypes","objectTypes","partition","isMixedArray","primitiveTypeNames","objectTypeNames","list","isArrayOfPrimitives","option","isDeclared","primitiveType","formattedTypeList","conjunction","optionTypeName","_type","validObjectType","layout","slug","slugifyFn","slugify","file","invalidFieldNames","metadata","autoMeta","image","superfluousMeta","meta","fieldsWithInvalidName","join","isJSONTypeOf","parentType","getTypeOf","thing","str","allowedKeys","allowedMarkKeys","allowedStyleKeys","allowedDecoratorKeys","allowedListKeys","validateBlockType","styles","lists","marks","disallowedKeys","validateMarks","validateStyles","validateLists","validateMembers","omit","decorators","annotations","disallowedMarkKeys","dec","blockEditor","icon","component","render","validateDecorators","validateAnnotations","title","style","decorator","annotation","targetType","member","validateNonObjectFieldsProp","validateTypeName","possibleTypeNames","humanize","isValid","suggestions","possibleTypeName","leven","distance","_","suggestion","validateDeprecatedProperties","inputComponent","diffComponent","editModal","isHighlighted","common","rootType","hasName","looksLikeEsmModule","VALID_DATASET","isValidDatasetName","toLowerCase","crossDatasetReference","crossDatasetTypeDef","dataset","datasetValidation","studioUrl","typeVisitors","block","document","getNoopVisitor","schemaDef","combine","visitors","schemaType","result","validateSchema","typeVisitor","ACTIONS_FLAG","DEFAULT_ACTIONS","VALID_ACTIONS","readActions","validateActions","actions","difference","resolveEnabledActions","isActionEnabled","action"],"mappings":"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"}