{
  "version": 3,
  "sources": ["../../../sanity/src/desk/panes/documentList/constants.ts", "../../../sanity/src/desk/panes/documentList/helpers.ts", "../../../sanity/src/desk/panes/documentList/DocumentListPaneContent.tsx", "../../../sanity/src/desk/panes/documentList/DocumentListPaneHeader.tsx", "../../../sanity/src/desk/panes/documentList/getQueryResults.ts", "../../../sanity/src/desk/panes/documentList/useDocumentList.ts", "../../../sanity/src/desk/panes/documentList/DocumentListPane.tsx"],
  "sourcesContent": ["import {SortOrder} from './types'\n\nexport const PARTIAL_PAGE_LIMIT = 100\nexport const FULL_LIST_LIMIT = 2000\nexport const DEFAULT_ORDERING: SortOrder = {by: [{field: '_updatedAt', direction: 'desc'}]}\nexport const EMPTY_RECORD: Record<string, unknown> = {}\n", "import * as PathUtils from '@sanity/util/paths'\nimport {\n  isIndexSegment,\n  isKeySegment,\n  isReferenceSchemaType,\n  ObjectField,\n  ObjectFieldType,\n  ObjectSchemaType,\n  SanityDocument,\n  SchemaType,\n} from '@sanity/types'\nimport {DocumentListPaneItem, SortOrder, SortOrderBy} from './types'\nimport {getPublishedId, collate} from 'sanity'\n\nexport function getDocumentKey(value: DocumentListPaneItem, index: number): string {\n  return value._id ? getPublishedId(value._id) : `item-${index}`\n}\n\nexport function removePublishedWithDrafts(documents: SanityDocument[]): DocumentListPaneItem[] {\n  return collate(documents).map((entry) => {\n    const doc = entry.draft || entry.published\n    return {\n      ...doc,\n      hasPublished: !!entry.published,\n      hasDraft: !!entry.draft,\n    }\n  }) as any\n}\n\nconst RE_TYPE_NAME_IN_FILTER =\n  /\\b_type\\s*==\\s*(['\"].*?['\"]|\\$.*?(?:\\s|$))|\\B(['\"].*?['\"]|\\$.*?(?:\\s|$))\\s*==\\s*_type\\b/\nexport function getTypeNameFromSingleTypeFilter(\n  filter: string,\n  params: Record<string, unknown> = {}\n): string | null {\n  const matches = filter.match(RE_TYPE_NAME_IN_FILTER)\n\n  if (!matches) {\n    return null\n  }\n\n  const match = (matches[1] || matches[2]).trim().replace(/^[\"']|[\"']$/g, '')\n\n  if (match[0] === '$') {\n    const k = match.slice(1)\n    const v = params[k]\n\n    return typeof v === 'string' ? v : null\n  }\n\n  return match\n}\n\nexport function isSimpleTypeFilter(filter: string): boolean {\n  return /^_type\\s*==\\s*['\"$]\\w+['\"]?\\s*$/.test(filter.trim())\n}\n\nexport function toOrderClause(orderBy: SortOrderBy[]): string {\n  return orderBy\n    .map((ordering) =>\n      [wrapFieldWithFn(ordering), (ordering.direction || '').toLowerCase()]\n        .map((str) => str.trim())\n        .filter(Boolean)\n        .join(' ')\n    )\n    .join(',')\n}\n\nfunction wrapFieldWithFn(ordering: SortOrderBy): string {\n  return ordering.mapWith ? `${ordering.mapWith}(${ordering.field})` : ordering.field\n}\n\nexport function applyOrderingFunctions(order: SortOrder, schemaType: ObjectSchemaType): SortOrder {\n  const orderBy = order.by.map((by) => {\n    // Skip those that already have a mapper\n    if (by.mapWith) {\n      return by\n    }\n\n    const fieldType = tryResolveSchemaTypeForPath(schemaType, by.field)\n    if (!fieldType) {\n      return by\n    }\n\n    // Note: order matters here, since the jsonType of a date field is `string`,\n    // but we want to apply `datetime()`, not `lower()`\n    if (fieldExtendsType(fieldType, 'datetime')) {\n      return {...by, mapWith: 'dateTime'}\n    }\n\n    if (fieldType.jsonType === 'string') {\n      return {...by, mapWith: 'lower'}\n    }\n\n    return by\n  })\n\n  return orderBy.every((item, index) => item === order.by[index]) ? order : {...order, by: orderBy}\n}\n\nfunction tryResolveSchemaTypeForPath(baseType: SchemaType, path: string): SchemaType | undefined {\n  const pathSegments = PathUtils.fromString(path)\n\n  let current: SchemaType | undefined = baseType\n  for (const segment of pathSegments) {\n    if (!current) {\n      return undefined\n    }\n\n    if (typeof segment === 'string') {\n      current = getFieldTypeByName(current, segment)\n      continue\n    }\n\n    const isArrayAccessor = isKeySegment(segment) || isIndexSegment(segment)\n    if (!isArrayAccessor || current.jsonType !== 'array') {\n      return undefined\n    }\n\n    const [memberType, otherType] = current.of || []\n    if (otherType || !memberType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    if (!isReferenceSchemaType(memberType)) {\n      current = memberType\n      continue\n    }\n\n    const [refType, otherRefType] = memberType.to || []\n    if (otherRefType || !refType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    current = refType\n  }\n\n  return current\n}\n\nfunction getFieldTypeByName(type: SchemaType, fieldName: string): SchemaType | undefined {\n  if (!('fields' in type)) {\n    return undefined\n  }\n\n  const fieldType = type.fields.find((field) => field.name === fieldName)\n  return fieldType ? fieldType.type : undefined\n}\n\nexport function fieldExtendsType(field: ObjectField | ObjectFieldType, ofType: string): boolean {\n  let current: SchemaType | undefined = field.type\n  while (current) {\n    if (current.name === ofType) {\n      return true\n    }\n\n    if (!current.type && current.jsonType === ofType) {\n      return true\n    }\n\n    current = current.type\n  }\n\n  return false\n}\n", "import {SyncIcon} from '@sanity/icons'\nimport {\n  Box,\n  Button,\n  Card,\n  Container,\n  Flex,\n  Heading,\n  Spinner,\n  Stack,\n  Text,\n  VirtualList,\n  VirtualListChangeOpts,\n} from '@sanity/ui'\nimport React, {useCallback, useEffect, useMemo, useState} from 'react'\nimport {SanityDocument} from '@sanity/types'\nimport {Delay, PaneContent, usePane, usePaneLayout, PaneItem} from '../../components'\nimport {DocumentListPaneItem} from './types'\nimport {getDocumentKey} from './helpers'\nimport {FULL_LIST_LIMIT} from './constants'\nimport {GeneralPreviewLayoutKey, getPublishedId, useSchema} from 'sanity'\n\ninterface DocumentListPaneContentProps {\n  childItemId?: string\n  error: {message: string} | null\n  filterIsSimpleTypeContraint: boolean\n  fullList: boolean\n  isActive?: boolean\n  isLoading: boolean\n  items: DocumentListPaneItem[] | null\n  layout?: GeneralPreviewLayoutKey\n  onListChange: (opts: VirtualListChangeOpts) => void\n  onRetry?: (event: unknown) => void\n  showIcons: boolean\n}\n\nexport function DocumentListPaneContent(props: DocumentListPaneContentProps) {\n  const {\n    childItemId,\n    error,\n    filterIsSimpleTypeContraint,\n    fullList,\n    isActive,\n    isLoading,\n    items,\n    layout,\n    onListChange,\n    onRetry,\n    showIcons,\n  } = props\n\n  const schema = useSchema()\n\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed, index} = usePane()\n  const [shouldRender, setShouldRender] = useState(false)\n\n  useEffect(() => {\n    if (collapsed) return undefined\n\n    const timer = setTimeout(() => {\n      setShouldRender(true)\n    }, 0)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [collapsed])\n\n  const renderItem = useCallback(\n    (item: SanityDocument) => {\n      const publishedId = getPublishedId(item._id)\n      const isSelected = childItemId === publishedId\n      const pressed = !isActive && isSelected\n      const selected = isActive && isSelected\n\n      return (\n        <PaneItem\n          icon={showIcons === false ? false : undefined}\n          id={publishedId}\n          pressed={pressed}\n          selected={selected}\n          layout={layout}\n          schemaType={schema.get(item._type)}\n          value={item}\n        />\n      )\n    },\n    [childItemId, isActive, layout, schema, showIcons]\n  )\n\n  const content = useMemo(() => {\n    if (!shouldRender) {\n      return null\n    }\n\n    if (error) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Stack paddingX={4} paddingY={5} space={4}>\n              <Heading as=\"h3\">Could not fetch list items</Heading>\n              <Text as=\"p\">\n                Error: <code>{error.message}</code>\n              </Text>\n              {onRetry && (\n                <Box>\n                  {/* eslint-disable-next-line react/jsx-handler-names */}\n                  <Button icon={SyncIcon} onClick={onRetry} text=\"Retry\" tone=\"primary\" />\n                </Box>\n              )}\n            </Stack>\n          </Container>\n        </Flex>\n      )\n    }\n\n    if (items === null) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Delay ms={300}>\n            <>\n              <Spinner muted />\n              <Box marginTop={3}>\n                <Text align=\"center\" muted size={1}>\n                  Loading documentsâ€¦\n                </Text>\n              </Box>\n            </>\n          </Delay>\n        </Flex>\n      )\n    }\n\n    if (!isLoading && items.length === 0) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Box paddingX={4} paddingY={5}>\n              <Text align=\"center\" muted size={2}>\n                {filterIsSimpleTypeContraint\n                  ? 'No documents of this type'\n                  : 'No matching documents'}\n              </Text>\n            </Box>\n          </Container>\n        </Flex>\n      )\n    }\n\n    const hasMoreItems = fullList && items.length === FULL_LIST_LIMIT\n\n    return (\n      <Box padding={2}>\n        {items.length > 0 && (\n          <VirtualList\n            gap={1}\n            getItemKey={getDocumentKey}\n            items={items}\n            renderItem={renderItem}\n            onChange={onListChange}\n            // prevents bug when panes won't render if first rendered while collapsed\n            key={`${index}-${collapsed}`}\n          />\n        )}\n\n        {isLoading && (\n          <Card borderTop marginTop={1} paddingX={3} paddingY={4}>\n            <Text align=\"center\" muted size={1}>\n              Loadingâ€¦\n            </Text>\n          </Card>\n        )}\n\n        {hasMoreItems && (\n          <Card marginTop={1} paddingX={3} paddingY={4} radius={2} tone=\"transparent\">\n            <Text align=\"center\" muted size={1}>\n              Displaying a maximum of {FULL_LIST_LIMIT} documents\n            </Text>\n          </Card>\n        )}\n      </Box>\n    )\n  }, [\n    error,\n    filterIsSimpleTypeContraint,\n    fullList,\n    onListChange,\n    isLoading,\n    items,\n    onRetry,\n    renderItem,\n    shouldRender,\n    collapsed,\n    index,\n  ])\n\n  return <PaneContent overflow={layoutCollapsed ? undefined : 'auto'}>{content}</PaneContent>\n}\n", "import {ArrowLeftIcon} from '@sanity/icons'\nimport {Button} from '@sanity/ui'\nimport React, {memo, useMemo} from 'react'\nimport {PaneMenuItem, PaneMenuItemGroup, DeskToolPaneActionHandler} from '../../types'\nimport {BackLink, PaneHeader, PaneHeaderActions} from '../../components'\nimport {useDeskTool} from '../../useDeskTool'\nimport {SortOrder} from './types'\nimport {GeneralPreviewLayoutKey, InitialValueTemplateItem} from 'sanity'\n\ninterface DocumentListPaneHeaderProps {\n  index: number\n  initialValueTemplates?: InitialValueTemplateItem[]\n  menuItems?: PaneMenuItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  setLayout: (layout: GeneralPreviewLayoutKey) => void\n  setSortOrder: (sortOrder: SortOrder) => void\n  title: string\n}\n\nexport const DocumentListPaneHeader = memo(\n  ({\n    index,\n    initialValueTemplates = [],\n    menuItems = [],\n    menuItemGroups = [],\n    setLayout,\n    setSortOrder,\n    title,\n  }: DocumentListPaneHeaderProps) => {\n    const {features} = useDeskTool()\n\n    const actionHandlers = useMemo((): Record<string, DeskToolPaneActionHandler> => {\n      return {\n        setLayout: ({layout: value}: {layout: GeneralPreviewLayoutKey}) => {\n          setLayout(value)\n        },\n        setSortOrder: (sort: SortOrder) => {\n          setSortOrder(sort)\n        },\n      }\n    }, [setLayout, setSortOrder])\n\n    return (\n      <PaneHeader\n        backButton={\n          features.backButton &&\n          index > 0 && <Button as={BackLink} data-as=\"a\" icon={ArrowLeftIcon} mode=\"bleed\" />\n        }\n        title={title}\n        actions={\n          <PaneHeaderActions\n            initialValueTemplateItems={initialValueTemplates}\n            actionHandlers={actionHandlers}\n            menuItemGroups={menuItemGroups}\n            menuItems={menuItems}\n          />\n        }\n      />\n    )\n  }\n)\n\nDocumentListPaneHeader.displayName = 'DocumentListPaneHeader'\n", "import {SanityClient} from '@sanity/client'\nimport deepEquals from 'react-fast-compare'\nimport {\n  catchError,\n  distinctUntilChanged,\n  map,\n  mergeMapTo,\n  startWith,\n  switchMap,\n  take,\n  scan,\n  delay,\n  takeUntil,\n  share,\n  publishReplay,\n  refCount,\n} from 'rxjs/operators'\nimport {concat, merge, of, fromEvent, Observable, Subject} from 'rxjs'\nimport {SanityDocument} from '@sanity/types'\nimport {listenQuery} from 'sanity'\n\nconst INITIAL_CHILD_PROPS = {\n  result: null,\n  error: false,\n}\n\nconst createResultChildProps = (documents: SanityDocument[]) => ({\n  result: {documents},\n  loading: false,\n  error: false,\n})\n\nconst createErrorChildProps = (error: Error) => ({\n  result: null,\n  loading: false,\n  error,\n})\n\nexport const getQueryResults = (\n  receivedProps$: Observable<{client: SanityClient; query: string; params: Record<string, any>}>,\n  options = {}\n) => {\n  const onRetry$ = new Subject()\n  const onRetry = onRetry$.next.bind(onRetry$)\n\n  const queryProps$ = receivedProps$.pipe(\n    map((props) => ({client: props.client, query: props.query, params: props.params})),\n    distinctUntilChanged(deepEquals),\n    publishReplay(1),\n    refCount()\n  )\n\n  const queryResults$ = queryProps$.pipe(\n    switchMap((queryProps) => {\n      const query$ = listenQuery(\n        queryProps.client,\n        queryProps.query,\n        queryProps.params,\n        options\n      ).pipe(map(createResultChildProps), share())\n      return merge(of({loading: true}).pipe(delay(400), takeUntil(query$)), query$)\n    })\n  )\n\n  return queryResults$.pipe(\n    startWith(INITIAL_CHILD_PROPS),\n    catchError((err, caught$) =>\n      concat(\n        of(createErrorChildProps(err)),\n        merge(fromEvent(window, 'online'), onRetry$).pipe(take(1), mergeMapTo(caught$))\n      )\n    ),\n    scan((prev, next) => ({...prev, ...next, onRetry}))\n  )\n}\n", "import {VirtualListChangeOpts} from '@sanity/ui'\nimport {useEffect, useState, useCallback, useMemo, useRef} from 'react'\nimport {of} from 'rxjs'\nimport {filter as filterEvents} from 'rxjs/operators'\nimport {DocumentListPaneItem, QueryResult, SortOrder} from './types'\nimport {removePublishedWithDrafts, toOrderClause} from './helpers'\nimport {DEFAULT_ORDERING, FULL_LIST_LIMIT, PARTIAL_PAGE_LIMIT} from './constants'\nimport {getQueryResults} from './getQueryResults'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, useClient} from 'sanity'\n\ninterface UseDocumentListOpts {\n  filter: string\n  params: Record<string, unknown>\n  sortOrder?: SortOrder\n  apiVersion?: string\n}\n\ninterface DocumentListState {\n  error: {message: string} | null\n  fullList: boolean\n  handleListChange: ({toIndex}: VirtualListChangeOpts) => void\n  isLoading: boolean\n  items: DocumentListPaneItem[] | null\n  onRetry?: (event: unknown) => void\n}\n\n/**\n * @internal\n */\nexport function useDocumentList(opts: UseDocumentListOpts): DocumentListState {\n  const {apiVersion, filter, params, sortOrder} = opts\n  const client = useClient(DEFAULT_STUDIO_CLIENT_OPTIONS)\n  const [fullList, setFullList] = useState(false)\n  const fullListRef = useRef(fullList)\n  const [result, setResult] = useState<QueryResult | null>(null)\n  const error = result?.error || null\n  const isLoading = result?.loading || result === null\n  const onRetry = result?.onRetry\n  const documents = result?.result?.documents\n  const items = useMemo(\n    () => (documents ? removePublishedWithDrafts(documents) : null),\n    [documents]\n  )\n\n  const query = useMemo(() => {\n    const extendedProjection = sortOrder?.extendedProjection\n    const projectionFields = ['_id', '_type']\n    const finalProjection = projectionFields.join(',')\n    const sortBy = sortOrder?.by || []\n    const limit = fullList ? FULL_LIST_LIMIT : PARTIAL_PAGE_LIMIT\n    const sort = sortBy.length > 0 ? sortBy : DEFAULT_ORDERING.by\n    const order = toOrderClause(sort)\n\n    if (extendedProjection) {\n      const firstProjection = projectionFields.concat(extendedProjection).join(',')\n      return [\n        `*[${filter}] {${firstProjection}}`,\n        `order(${order}) [0...${limit}]`,\n        `{${finalProjection}}`,\n      ].join('|')\n    }\n\n    return `*[${filter}]|order(${order})[0...${limit}]{${finalProjection}}`\n  }, [filter, fullList, sortOrder])\n\n  const handleListChange = useCallback(\n    ({toIndex}: VirtualListChangeOpts) => {\n      if (isLoading || fullListRef.current) {\n        return\n      }\n\n      if (toIndex >= PARTIAL_PAGE_LIMIT / 2) {\n        setFullList(true)\n\n        // Prevent change handler from firing again before setState kicks in\n        fullListRef.current = true\n      }\n    },\n    [isLoading]\n  )\n\n  // Set up the document list listener\n  useEffect(() => {\n    // @todo: explain what this does\n    const filterFn = fullList\n      ? (queryResult: {result: QueryResult | null}) => Boolean(queryResult.result)\n      : () => true\n\n    // Set loading state\n    setResult((r) => (r ? {...r, loading: true} : null))\n\n    const queryResults$ = getQueryResults(of({client, query, params}), {\n      apiVersion,\n      tag: 'desk.document-list',\n    }).pipe(filterEvents(filterFn) as any)\n\n    const sub = queryResults$.subscribe(setResult as any)\n\n    return () => sub.unsubscribe()\n  }, [apiVersion, client, fullList, query, params])\n\n  // If `filter` or `params` changed, set up a new query from scratch.\n  // If `sortOrder` changed, set up a new query from scratch as well.\n  useEffect(() => {\n    setResult(null)\n    setFullList(false)\n    fullListRef.current = false\n  }, [filter, params, sortOrder, apiVersion])\n\n  return {error, fullList, handleListChange, isLoading, items, onRetry}\n}\n", "import React, {memo, useMemo, useRef} from 'react'\nimport {Card, Code} from '@sanity/ui'\nimport shallowEquals from 'shallow-equals'\nimport {Pane} from '../../components/pane'\nimport {_DEBUG} from '../../constants'\nimport {useDeskToolSetting} from '../../useDeskToolSetting'\nimport {BaseDeskToolPaneProps} from '../types'\nimport {DEFAULT_ORDERING, EMPTY_RECORD} from './constants'\nimport {\n  applyOrderingFunctions,\n  getTypeNameFromSingleTypeFilter,\n  isSimpleTypeFilter,\n} from './helpers'\nimport {DocumentListPaneContent} from './DocumentListPaneContent'\nimport {DocumentListPaneHeader} from './DocumentListPaneHeader'\nimport {SortOrder} from './types'\nimport {useDocumentList} from './useDocumentList'\nimport {GeneralPreviewLayoutKey, SourceProvider, useSchema, useSource, useUnique} from 'sanity'\n\ntype DocumentListPaneProps = BaseDeskToolPaneProps<'documentList'>\n\nconst emptyArray: never[] = []\n\nfunction useShallowUnique<ValueType>(value: ValueType): ValueType {\n  const valueRef = useRef<ValueType>(value)\n  if (!shallowEquals(valueRef.current, value)) {\n    valueRef.current = value\n  }\n  return valueRef.current\n}\n\n/**\n * @internal\n */\nexport const DocumentListPane = memo(function DocumentListPane(props: DocumentListPaneProps) {\n  const {childItemId, index, isActive, isSelected, pane, paneKey} = props\n  const schema = useSchema()\n  const {name: parentSourceName} = useSource()\n  const {\n    defaultLayout = 'default',\n    displayOptions,\n    initialValueTemplates = emptyArray,\n    menuItems,\n    menuItemGroups,\n    options,\n    title,\n  } = pane\n  const {apiVersion, defaultOrdering = emptyArray, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const sourceName = pane.source\n  const typeName = useMemo(() => getTypeNameFromSingleTypeFilter(filter, params), [filter, params])\n  const showIcons = displayOptions?.showIcons !== false\n  const [layout, setLayout] = useDeskToolSetting<GeneralPreviewLayoutKey>(\n    typeName,\n    'layout',\n    defaultLayout\n  )\n\n  // Ensure that we use the defaultOrdering value from structure builder if any as the default\n  const defaultSortOrder = useMemo(() => {\n    return defaultOrdering?.length > 0 ? {by: defaultOrdering} : DEFAULT_ORDERING\n  }, [defaultOrdering])\n\n  const [sortOrderRaw, setSortOrder] = useDeskToolSetting<SortOrder>(\n    typeName,\n    'sortOrder',\n    defaultSortOrder\n  )\n\n  const sortWithOrderingFn =\n    typeName && sortOrderRaw\n      ? applyOrderingFunctions(sortOrderRaw, schema.get(typeName) as any)\n      : sortOrderRaw\n\n  const sortOrder = useUnique(sortWithOrderingFn)\n  const filterIsSimpleTypeContraint = isSimpleTypeFilter(filter)\n\n  const {error, fullList, handleListChange, isLoading, items, onRetry} = useDocumentList({\n    filter,\n    params,\n    sortOrder,\n    apiVersion,\n  })\n\n  return (\n    <SourceProvider name={sourceName || parentSourceName}>\n      <Pane currentMaxWidth={350} id={paneKey} maxWidth={640} minWidth={320} selected={isSelected}>\n        {_DEBUG && (\n          <Card padding={4} tone=\"transparent\">\n            <Code>{pane.source || '(none)'}</Code>\n          </Card>\n        )}\n\n        <DocumentListPaneHeader\n          index={index}\n          initialValueTemplates={initialValueTemplates}\n          menuItems={menuItems}\n          menuItemGroups={menuItemGroups}\n          setLayout={setLayout}\n          setSortOrder={setSortOrder}\n          title={title}\n        />\n\n        <DocumentListPaneContent\n          childItemId={childItemId}\n          error={error}\n          filterIsSimpleTypeContraint={filterIsSimpleTypeContraint}\n          fullList={fullList}\n          isActive={isActive}\n          isLoading={isLoading}\n          items={items}\n          layout={layout}\n          onListChange={handleListChange}\n          onRetry={onRetry}\n          showIcons={showIcons}\n        />\n      </Pane>\n    </SourceProvider>\n  )\n})\n"],
  "mappings": "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",
  "names": ["PARTIAL_PAGE_LIMIT", "FULL_LIST_LIMIT", "DEFAULT_ORDERING", "by", "field", "direction", "EMPTY_RECORD", "getDocumentKey", "value", "index", "_id", "getPublishedId", "removePublishedWithDrafts", "documents", "collate", "map", "entry", "doc", "draft", "published", "hasPublished", "hasDraft", "RE_TYPE_NAME_IN_FILTER", "getTypeNameFromSingleTypeFilter", "filter", "params", "matches", "match", "trim", "replace", "k", "slice", "v", "isSimpleTypeFilter", "test", "toOrderClause", "orderBy", "ordering", "wrapFieldWithFn", "toLowerCase", "str", "Boolean", "join", "mapWith", "applyOrderingFunctions", "order", "schemaType", "fieldType", "tryResolveSchemaTypeForPath", "fieldExtendsType", "jsonType", "every", "item", "baseType", "path", "pathSegments", "fromString", "current", "segment", "getFieldTypeByName", "isArrayAccessor", "isKeySegment", "isIndexSegment", "memberType", "otherType", "of", "isReferenceSchemaType", "refType", "otherRefType", "to", "type", "fieldName", "fields", "find", "name", "ofType", "DocumentListPaneContent", "props", "childItemId", "error", "filterIsSimpleTypeContraint", "fullList", "isActive", "isLoading", "items", "layout", "onListChange", "onRetry", "showIcons", "schema", "useSchema", "collapsed", "layoutCollapsed", "usePaneLayout", "usePane", "shouldRender", "setShouldRender", "useState", "useEffect", "timer", "setTimeout", "clearTimeout", "renderItem", "useCallback", "publishedId", "isSelected", "pressed", "selected", "jsx", "PaneItem", "icon", "id", "get", "_type", "content", "useMemo", "Flex", "align", "height", "justify", "children", "Container", "width", "jsxs", "Stack", "paddingX", "paddingY", "space", "Heading", "as", "Text", "message", "Box", "Button", "SyncIcon", "onClick", "text", "tone", "Delay", "ms", "Fragment", "Spinner", "muted", "marginTop", "size", "length", "hasMoreItems", "padding", "VirtualList", "gap", "getItemKey", "onChange", "Card", "borderTop", "radius", "PaneContent", "overflow", "DocumentListPaneHeader", "memo", "initialValueTemplates", "menuItems", "menuItemGroups", "setLayout", "setSortOrder", "title", "features", "useDeskTool", "actionHandlers", "sort", "PaneHeader", "backButton", "BackLink", "ArrowLeftIcon", "mode", "actions", "PaneHeaderActions", "initialValueTemplateItems", "displayName", "INITIAL_CHILD_PROPS", "result", "createResultChildProps", "loading", "createErrorChildProps", "getQueryResults", "receivedProps$", "options", "onRetry$", "Subject", "next", "bind", "queryProps$", "pipe", "client", "query", "distinctUntilChanged", "deepEquals", "publishReplay", "refCount", "queryResults$", "switchMap", "queryProps", "query$", "listenQuery", "share", "merge", "delay", "takeUntil", "startWith", "catchError", "err", "caught$", "concat", "fromEvent", "window", "take", "mergeMapTo", "scan", "prev", "useDocumentList", "opts", "_a", "apiVersion", "sortOrder", "useClient", "DEFAULT_STUDIO_CLIENT_OPTIONS", "setFullList", "fullListRef", "useRef", "setResult", "extendedProjection", "projectionFields", "finalProjection", "sortBy", "limit", "firstProjection", "handleListChange", "toIndex", "filterFn", "queryResult", "r", "tag", "filterEvents", "sub", "subscribe", "unsubscribe", "emptyArray", "useShallowUnique", "valueRef", "shallowEquals", "DocumentListPane", "pane", "paneKey", "parentSourceName", "useSource", "defaultLayout", "displayOptions", "defaultOrdering", "sourceName", "source", "typeName", "useDeskToolSetting", "defaultSortOrder", "sortOrderRaw", "sortWithOrderingFn", "useUnique", "SourceProvider", "Pane", "currentMaxWidth", "maxWidth", "minWidth", "_DEBUG"]
}
