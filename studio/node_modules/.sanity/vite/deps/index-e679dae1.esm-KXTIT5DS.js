import {
  PaneItem
} from "./chunk-EXSZH2WM.js";
import {
  useDeskTool
} from "./chunk-UWD4REGL.js";
import {
  BackLink,
  Pane,
  PaneContent,
  PaneHeader,
  PaneHeaderActions,
  _DEBUG,
  require_camelCase,
  require_isNumber,
  require_kebabCase,
  require_lib as require_lib2,
  usePaneLayout
} from "./chunk-43N6LBI4.js";
import {
  require_hashlru,
  require_json_inspector
} from "./chunk-6D7JOVKQ.js";
import {
  ArrowLeftIcon,
  Box,
  Button,
  Stack,
  require_find,
  require_isEqual,
  require_isString,
  require_lib,
  require_negate,
  require_omit,
  require_partition,
  require_pickBy,
  require_react_is,
  require_startCase,
  require_uniq,
  require_uniqBy,
  require_uniqueId,
  require_upperFirst,
  styled_components_browser_esm_default
} from "./chunk-XVQUQQRN.js";
import {
  require_jsx_runtime
} from "./chunk-S62HUBL3.js";
import {
  require_react
} from "./chunk-HAQZRA24.js";
import {
  __toESM
} from "./chunk-S5KM4IGW.js";

// node_modules/sanity/lib/_chunks/index-e679dae1.esm.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react = __toESM(require_react());
var import_omit = __toESM(require_omit());
var import_react_copy_to_clipboard = __toESM(require_lib2());
var import_isNumber = __toESM(require_isNumber());
var import_isString = __toESM(require_isString());
var import_partition = __toESM(require_partition());
var import_uniqBy = __toESM(require_uniqBy());
var import_camelCase = __toESM(require_camelCase());
var import_uniq = __toESM(require_uniq());
var import_kebabCase = __toESM(require_kebabCase());
var import_pickBy = __toESM(require_pickBy());
var import_find = __toESM(require_find());
var import_uniqueId = __toESM(require_uniqueId());
var import_react_is = __toESM(require_react_is());
var import_startCase = __toESM(require_startCase());
var import_isEqual = __toESM(require_isEqual());
var import_is_hotkey = __toESM(require_lib());
var import_upperFirst = __toESM(require_upperFirst());
var import_react_json_inspector = __toESM(require_json_inspector());
var import_hashlru = __toESM(require_hashlru());
var import_negate = __toESM(require_negate());
var _templateObject;
function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
var Divider = styled_components_browser_esm_default.hr(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  background-color: var(--card-border-color);\n  height: 1px;\n  margin: 0;\n  border: none;\n"])));
function ListPane(props) {
  const {
    childItemId,
    index,
    isActive,
    isSelected,
    pane,
    paneKey
  } = props;
  const {
    features
  } = useDeskTool();
  const {
    collapsed: layoutCollapsed
  } = usePaneLayout();
  const {
    defaultLayout,
    displayOptions,
    items,
    menuItems,
    menuItemGroups,
    title
  } = pane;
  const paneShowIcons = displayOptions == null ? void 0 : displayOptions.showIcons;
  const shouldShowIconForItem = (item) => {
    var _a;
    const itemShowIcon = (_a = item.displayOptions) == null ? void 0 : _a.showIcon;
    if (typeof itemShowIcon !== "undefined") {
      return itemShowIcon !== false;
    }
    return paneShowIcons !== false;
  };
  return (0, import_jsx_runtime.jsxs)(Pane, {
    currentMaxWidth: 350,
    "data-testid": "desk-tool-list-pane",
    id: paneKey,
    maxWidth: 640,
    minWidth: 320,
    selected: isSelected,
    children: [_DEBUG, (0, import_jsx_runtime.jsx)(PaneHeader, {
      actions: (0, import_jsx_runtime.jsx)(PaneHeaderActions, {
        menuItems,
        menuItemGroups
      }),
      backButton: features.backButton && index > 0 && (0, import_jsx_runtime.jsx)(Button, {
        as: BackLink,
        "data-as": "a",
        icon: ArrowLeftIcon,
        mode: "bleed"
      }),
      title
    }), (0, import_jsx_runtime.jsx)(PaneContent, {
      overflow: layoutCollapsed ? void 0 : "auto",
      children: (0, import_jsx_runtime.jsx)(Stack, {
        padding: 2,
        space: 1,
        children: items && items.map((item, itemIndex) => {
          if (item.type === "divider") {
            return (0, import_jsx_runtime.jsx)(Box, {
              paddingY: 1,
              children: (0, import_jsx_runtime.jsx)(Divider, {})
            }, "divider-".concat(itemIndex));
          }
          const pressed = !isActive && childItemId === item.id;
          const selected = isActive && childItemId === item.id;
          return (0, import_jsx_runtime.jsx)(PaneItem, {
            icon: shouldShowIconForItem(item) ? item.icon : false,
            id: item.id,
            layout: defaultLayout,
            pressed,
            schemaType: item.schemaType,
            selected,
            title: item.title,
            value: item._id && item.schemaType ? {
              _id: item._id,
              _type: item.schemaType.name,
              title: item.title
            } : void 0
          }, item.id);
        })
      })
    })]
  });
}
export {
  ListPane as default
};
//# sourceMappingURL=index-e679dae1.esm-KXTIT5DS.js.map
