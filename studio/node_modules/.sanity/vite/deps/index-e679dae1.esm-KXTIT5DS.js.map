{
  "version": 3,
  "sources": ["../../../sanity/src/desk/panes/list/ListPane.tsx"],
  "sourcesContent": ["import React from 'react'\nimport {Box, Button, Card, Code, Stack} from '@sanity/ui'\nimport styled from 'styled-components'\nimport {ArrowLeftIcon} from '@sanity/icons'\nimport {PaneListItem} from '../../types'\nimport {\n  Pane,\n  PaneContent,\n  PaneHeader,\n  usePaneLayout,\n  PaneHeaderActions,\n  BackLink,\n  PaneItem,\n} from '../../components'\nimport {BaseDeskToolPaneProps} from '../types'\nimport {_DEBUG} from '../../constants'\nimport {useDeskTool} from '../../useDeskTool'\n\ntype ListPaneProps = BaseDeskToolPaneProps<'list'>\n\nconst Divider = styled.hr`\n  background-color: var(--card-border-color);\n  height: 1px;\n  margin: 0;\n  border: none;\n`\n\n/**\n * @internal\n */\nexport function ListPane(props: ListPaneProps) {\n  const {childItemId, index, isActive, isSelected, pane, paneKey} = props\n  const {features} = useDeskTool()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {defaultLayout, displayOptions, items, menuItems, menuItemGroups, title} = pane\n  const paneShowIcons = displayOptions?.showIcons\n\n  const shouldShowIconForItem = (item: PaneListItem): boolean => {\n    const itemShowIcon = item.displayOptions?.showIcon\n\n    // Specific true/false on item should have precedence over list setting\n    if (typeof itemShowIcon !== 'undefined') {\n      return itemShowIcon !== false // Boolean(item.icon)\n    }\n\n    // If no item setting is defined, defer to the pane settings\n    return paneShowIcons !== false // Boolean(item.icon)\n  }\n\n  return (\n    <Pane\n      currentMaxWidth={350}\n      data-testid=\"desk-tool-list-pane\"\n      id={paneKey}\n      maxWidth={640}\n      minWidth={320}\n      selected={isSelected}\n    >\n      {_DEBUG && (\n        <Card padding={4} tone=\"transparent\">\n          <Code>{pane.source || '(none)'}</Code>\n        </Card>\n      )}\n\n      <PaneHeader\n        actions={<PaneHeaderActions menuItems={menuItems} menuItemGroups={menuItemGroups} />}\n        backButton={\n          features.backButton &&\n          index > 0 && <Button as={BackLink} data-as=\"a\" icon={ArrowLeftIcon} mode=\"bleed\" />\n        }\n        title={title}\n      />\n\n      <PaneContent overflow={layoutCollapsed ? undefined : 'auto'}>\n        <Stack padding={2} space={1}>\n          {items &&\n            items.map((item, itemIndex) => {\n              if (item.type === 'divider') {\n                return (\n                  // eslint-disable-next-line react/no-array-index-key\n                  <Box key={`divider-${itemIndex}`} paddingY={1}>\n                    <Divider />\n                  </Box>\n                )\n              }\n\n              const pressed = !isActive && childItemId === item.id\n              const selected = isActive && childItemId === item.id\n\n              return (\n                <PaneItem\n                  icon={shouldShowIconForItem(item) ? item.icon : false}\n                  id={item.id}\n                  key={item.id}\n                  layout={defaultLayout}\n                  pressed={pressed}\n                  schemaType={item.schemaType}\n                  selected={selected}\n                  title={item.title}\n                  value={\n                    // If this is a document list item, pass on the ID and type,\n                    // otherwise leave it undefined to use the passed title and gang\n                    item._id && item.schemaType\n                      ? {_id: item._id, _type: item.schemaType.name, title: item.title}\n                      : undefined\n                  }\n                />\n              )\n            })}\n        </Stack>\n      </PaneContent>\n    </Pane>\n  )\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,IAAMA,UAAUC,sCAAOC,GAAA,oBAAA,kBAAA,uBAAA,CAAA,kGAAA,CAAA,EAAA;AAUhB,SAASC,SAASC,OAAsB;AAC7C,QAAM;IAACC;IAAaC;IAAOC;IAAUC;IAAYC;IAAMC;EAAW,IAAAN;AAC5D,QAAA;IAACO;MAAYC,YAAY;AAC/B,QAAM;IAACC,WAAWC;EAAe,IAAIC,cAAc;AACnD,QAAM;IAACC;IAAeC;IAAgBC;IAAOC;IAAWC;IAAgBC;EAAS,IAAAZ;AACjF,QAAMa,gBAAgBL,kBAAgB,OAAA,SAAAA,eAAAM;AAEhC,QAAAC,wBAAyBC,UAAgC;AArCjE,QAAAC;AAsCU,UAAAC,gBAAeD,KAAKD,KAAAR,mBAAL,OAAqB,SAAAS,GAAAE;AAGtC,QAAA,OAAOD,iBAAiB,aAAa;AACvC,aAAOA,iBAAiB;IAC1B;AAGA,WAAOL,kBAAkB;EAAA;AAG3B,aACGO,yBAAAC,MAAA;IACCC,iBAAiB;IACjB,eAAY;IACZC,IAAItB;IACJuB,UAAU;IACVC,UAAU;IACVC,UAAU3B;IAET4B,UAAA,CAAAC,YAMAC,wBAAAC,YAAA;MACCC,aAAUF,wBAAAG,mBAAA;QAAkBtB;QAAsBC;MAAA,CAAgC;MAClFsB,YACE/B,SAAS+B,cACTpC,QAAQ,SAAMgC,wBAAAK,QAAA;QAAOC,IAAIC;QAAU,WAAQ;QAAIC,MAAMC;QAAeC,MAAK;MAAA,CAAQ;MAEnF3B;IAAA,CACF,OAECiB,wBAAAW,aAAA;MAAYC,UAAUpC,kBAAkB,SAAY;MACnDsB,cAACE,wBAAAa,OAAA;QAAMC,SAAS;QAAGC,OAAO;QACvBjB,UACClB,SAAAA,MAAMoC,IAAI,CAAC7B,MAAM8B,cAAc;AACzB,cAAA9B,KAAK+B,SAAS,WAAW;AAC3B,uBAEGlB,wBAAAmB,KAAA;cAAiCC,UAAU;cAC1CtB,cAAAA,wBAACpC,SAAQ,CAAA,CAAA;YAAA,GAAA,WAAA,OADUuD,SAErB,CAAA;UAEJ;AAEA,gBAAMI,UAAU,CAACpD,YAAYF,gBAAgBoB,KAAKO;AAC5C,gBAAAG,WAAW5B,YAAYF,gBAAgBoB,KAAKO;AAElD,qBACGM,wBAAAsB,UAAA;YACCd,MAAMtB,sBAAsBC,IAAI,IAAIA,KAAKqB,OAAO;YAChDd,IAAIP,KAAKO;YAET6B,QAAQ7C;YACR2C;YACAG,YAAYrC,KAAKqC;YACjB3B;YACAd,OAAOI,KAAKJ;YACZ0C,OAGEtC,KAAKuC,OAAOvC,KAAKqC,aACb;cAACE,KAAKvC,KAAKuC;cAAKC,OAAOxC,KAAKqC,WAAWI;cAAM7C,OAAOI,KAAKJ;YACzD,IAAA;UAAA,GAXDI,KAAKO,EAaZ;QAAA,CAEH;MAAA,CACL;IAAA,CACF,CAAA;EAAA,CACF;AAEJ;",
  "names": ["Divider", "styled", "hr", "ListPane", "props", "childItemId", "index", "isActive", "isSelected", "pane", "paneKey", "features", "useDeskTool", "collapsed", "layoutCollapsed", "usePaneLayout", "defaultLayout", "displayOptions", "items", "menuItems", "menuItemGroups", "title", "paneShowIcons", "showIcons", "shouldShowIconForItem", "item", "_a", "itemShowIcon", "showIcon", "jsxs", "Pane", "currentMaxWidth", "id", "maxWidth", "minWidth", "selected", "children", "_DEBUG", "jsx", "PaneHeader", "actions", "PaneHeaderActions", "backButton", "Button", "as", "BackLink", "icon", "ArrowLeftIcon", "mode", "PaneContent", "overflow", "Stack", "padding", "space", "map", "itemIndex", "type", "Box", "paddingY", "pressed", "PaneItem", "layout", "schemaType", "value", "_id", "_type", "name"]
}
