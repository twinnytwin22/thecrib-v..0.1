{
  "version": 3,
  "sources": ["../../../sanity/src/desk/components/MissingSchemaType.tsx", "../../../sanity/src/desk/components/paneItem/PaneItem.tsx"],
  "sourcesContent": ["import {WarningOutlineIcon} from '@sanity/icons'\nimport {SanityDocument} from '@sanity/types'\nimport React from 'react'\nimport {GeneralPreviewLayoutKey, SanityDefaultPreview} from 'sanity'\n\nexport interface MissingSchemaTypeProps {\n  layout?: GeneralPreviewLayoutKey\n  value: SanityDocument\n}\n\nconst getUnknownTypeFallback = (id: string, typeName: string) => ({\n  title: (\n    <em>\n      No schema found for type <code>{typeName}</code>\n    </em>\n  ),\n  subtitle: (\n    <em>\n      Document: <code>{id}</code>\n    </em>\n  ),\n  media: () => <WarningOutlineIcon />,\n})\n\nexport function MissingSchemaType(props: MissingSchemaTypeProps) {\n  const {layout, value} = props\n\n  return (\n    <SanityDefaultPreview {...getUnknownTypeFallback(value._id, value._type)} layout={layout} />\n  )\n}\n", "import {FolderIcon, ChevronRightIcon, DocumentIcon} from '@sanity/icons'\nimport {isSanityDocument, PreviewValue, SanityDocument, SchemaType} from '@sanity/types'\nimport {Text} from '@sanity/ui'\nimport React, {ReactNode, useCallback, useEffect, useMemo, useState} from 'react'\nimport {MissingSchemaType} from '../MissingSchemaType'\nimport {usePaneRouter} from '../paneRouter'\nimport {PaneItemPreview} from './PaneItemPreview'\nimport {\n  FIXME,\n  GeneralPreviewLayoutKey,\n  PreviewCard,\n  SanityDefaultPreview,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n  useSchema,\n} from 'sanity'\n\ninterface PaneItemProps {\n  id: string\n  layout?: GeneralPreviewLayoutKey\n  icon?: React.ComponentType<any> | false\n  pressed?: boolean\n  selected?: boolean\n  title?: string\n  value?: PreviewValue | SanityDocument\n  schemaType?: SchemaType\n}\n\n/**\n * Return `false` if we explicitly disable the icon.\n * Otherwise return the passed icon or the schema type icon as a backup.\n */\nexport function getIconWithFallback(\n  icon: React.ComponentType<any> | false | undefined,\n  schemaType: SchemaType | undefined,\n  defaultIcon: React.ComponentType<any>\n): React.ComponentType<any> | false {\n  if (icon === false) {\n    return false\n  }\n\n  return icon || (schemaType && schemaType.icon) || defaultIcon || false\n}\n\nexport function PaneItem(props: PaneItemProps) {\n  const {icon, id, layout = 'default', pressed, schemaType, selected, title, value} = props\n  const schema = useSchema()\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ChildLink} = usePaneRouter()\n  const documentPresence = useDocumentPresence(id)\n  const hasSchemaType = Boolean(schemaType && schemaType.name && schema.get(schemaType.name))\n  const [clicked, setClicked] = useState<boolean>(false)\n\n  const preview = useMemo(() => {\n    if (value && isSanityDocument(value)) {\n      if (!schemaType || !hasSchemaType) {\n        return <MissingSchemaType value={value} />\n      }\n\n      return (\n        <PaneItemPreview\n          documentPreviewStore={documentPreviewStore}\n          icon={getIconWithFallback(icon, schemaType, DocumentIcon)}\n          layout={layout}\n          schemaType={schemaType}\n          value={value}\n          presence={documentPresence}\n        />\n      )\n    }\n\n    return (\n      <SanityDefaultPreview\n        status={\n          <Text muted>\n            <ChevronRightIcon />\n          </Text>\n        }\n        icon={getIconWithFallback(icon, schemaType, FolderIcon)}\n        layout={layout}\n        title={title}\n      />\n    )\n  }, [\n    documentPreviewStore,\n    hasSchemaType,\n    icon,\n    layout,\n    schemaType,\n    title,\n    value,\n    documentPresence,\n  ])\n\n  const Link = useMemo(\n    () =>\n      function LinkComponent(linkProps: {children: ReactNode}) {\n        return <ChildLink {...linkProps} childId={id} />\n      },\n    [ChildLink, id]\n  )\n\n  const handleClick = useCallback(() => setClicked(true), [])\n\n  // Reset `clicked` state when `selected` prop changes\n  useEffect(() => setClicked(false), [selected])\n\n  return (\n    <PreviewCard\n      __unstable_focusRing\n      as={Link as FIXME}\n      data-as=\"a\"\n      data-ui=\"PaneItem\"\n      padding={2}\n      radius={2}\n      onClick={handleClick}\n      pressed={pressed}\n      selected={selected || clicked}\n      tone=\"inherit\"\n    >\n      {preview}\n    </PreviewCard>\n  )\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,IAAMA,yBAAyB,CAACC,IAAYC,cAAsB;EAChEC,WACGC,yBAAA,MAAA;IAAGC,UAAA,CAAA,iCACwBC,wBAAA,QAAA;MAAMD,UAAAH;IAAA,CAAS,CAAA;EAAA,CAC3C;EAEFK,cACGH,yBAAA,MAAA;IAAGC,UAAA,CAAA,kBACSC,wBAAA,QAAA;MAAMD,UAAAJ;IAAA,CAAG,CAAA;EAAA,CACtB;EAEFO,OAAO,UAAMF,wBAACG,oBAAmB,CAAA,CAAA;AACnC;AAEO,SAASC,kBAAkBC,OAA+B;AACzD,QAAA;IAACC;IAAQC;EAAS,IAAAF;AAExB,aACGL,wBAAAQ,sBAAA,cAAA,cAAA,CAAA,GAAyBd,uBAAuBa,MAAME,KAAKF,MAAMG,KAAK,CAAA,GAAA,CAAA,GAAA;IAAGJ;EAAA,CAAA,CAAA;AAE9E;ACEgB,SAAAK,oBACdC,MACAC,YACAC,aACkC;AAClC,MAAIF,SAAS,OAAO;AACX,WAAA;EACT;AAEA,SAAOA,QAASC,cAAcA,WAAWD,QAASE,eAAe;AACnE;AAEO,SAASC,SAASV,OAAsB;AACvC,QAAA;IAACO;IAAMjB;IAAIW,SAAS;IAAWU;IAASH;IAAYI;IAAUpB;IAAOU;EAAA,IAASF;AACpF,QAAMa,SAASC,UAAU;AACzB,QAAMC,uBAAuBC,wBAAwB;AAC/C,QAAA;IAACC;MAAaC,cAAc;AAC5B,QAAAC,mBAAmBC,oBAAoB9B,EAAE;AACzC,QAAA+B,gBAAgBC,QAAQd,cAAcA,WAAWe,QAAQV,OAAOW,IAAIhB,WAAWe,IAAI,CAAC;AAC1F,QAAM,CAACE,SAASC,UAAU,QAAIC,uBAAkB,KAAK;AAE/C,QAAAC,cAAUC,sBAAQ,MAAM;AACxB,QAAA3B,SAAS4B,iBAAiB5B,KAAK,GAAG;AAChC,UAAA,CAACM,cAAc,CAACa,eAAe;AACjC,mBAAQ1B,wBAAAI,mBAAA;UAAkBG;QAAA,CAAc;MAC1C;AAEA,iBACGP,wBAAAoC,iBAAA;QACChB;QACAR,MAAMD,oBAAoBC,MAAMC,YAAYwB,YAAY;QACxD/B;QACAO;QACAN;QACA+B,UAAUd;MAAA,CACZ;IAEJ;AAEA,eACGxB,wBAAAQ,sBAAA;MACC+B,YACGvC,wBAAAwC,MAAA;QAAKC,OAAK;QACT1C,cAAAA,wBAAC2C,kBAAiB,CAAA,CAAA;MAAA,CACpB;MAEF9B,MAAMD,oBAAoBC,MAAMC,YAAY8B,UAAU;MACtDrC;MACAT;IAAA,CACF;EAAA,GAED,CACDuB,sBACAM,eACAd,MACAN,QACAO,YACAhB,OACAU,OACAiB,gBAAA,CACD;AAED,QAAMoB,WAAOV,sBACX,MACE,SAASW,cAAcC,WAAkC;AACvD,eAAQ9C,wBAAAsB,WAAA,cAAA,cAAA,CAAA,GAAcwB,SAAA,GAAA,CAAA,GAAA;MAAWC,SAASpD;IAAA,CAAA,CAAA;EAC5C,GACF,CAAC2B,WAAW3B,EAAE,CAAA;AAGhB,QAAMqD,kBAAcC,0BAAY,MAAMlB,WAAW,IAAI,GAAG,CAAA,CAAE;AAG1DmB,8BAAU,MAAMnB,WAAW,KAAK,GAAG,CAACd,QAAQ,CAAC;AAE7C,aACGjB,wBAAAmD,eAAA;IACCC,sBAAoB;IACpBC,IAAIT;IACJ,WAAQ;IACR,WAAQ;IACRU,SAAS;IACTC,QAAQ;IACRC,SAASR;IACThC;IACAC,UAAUA,YAAYa;IACtB2B,MAAK;IAEJ1D,UAAAkC;EAAA,CACH;AAEJ;",
  "names": ["getUnknownTypeFallback", "id", "typeName", "title", "jsxs", "children", "jsx", "subtitle", "media", "WarningOutlineIcon", "MissingSchemaType", "props", "layout", "value", "SanityDefaultPreview", "_id", "_type", "getIconWithFallback", "icon", "schemaType", "defaultIcon", "PaneItem", "pressed", "selected", "schema", "useSchema", "documentPreviewStore", "useDocumentPreviewStore", "ChildLink", "usePaneRouter", "documentPresence", "useDocumentPresence", "hasSchemaType", "Boolean", "name", "get", "clicked", "setClicked", "useState", "preview", "useMemo", "isSanityDocument", "PaneItemPreview", "DocumentIcon", "presence", "status", "Text", "muted", "ChevronRightIcon", "FolderIcon", "Link", "LinkComponent", "linkProps", "childId", "handleClick", "useCallback", "useEffect", "PreviewCard", "__unstable_focusRing", "as", "padding", "radius", "onClick", "tone"]
}
