import path from 'path';
import chalk from 'chalk';
import { createServer } from 'vite';
import { debug, writeSanityRuntime, getViteConfig } from './runtime-061fef02.js';
import { checkStudioDependencyVersions, checkRequiredDependencies, getTimer } from './timing-fa50f1a6.js';
import { gracefulServerDeath, getSharedServerConfig } from './servers-8bb12e62.js';
async function startDevServer(options) {
  const {
    cwd,
    httpPort,
    httpHost,
    basePath: base,
    reactStrictMode,
    vite: extendViteConfig
  } = options;
  const startTime = Date.now();
  debug("Writing Sanity runtime files");
  await writeSanityRuntime({
    cwd,
    reactStrictMode,
    watch: true
  });
  debug("Resolving vite config");
  let viteConfig = await getViteConfig({
    basePath: base || "/",
    mode: "development",
    server: {
      port: httpPort,
      host: httpHost
    },
    cwd
  });
  if (extendViteConfig) {
    debug("Extending vite config using user-specified function");
    viteConfig = extendViteConfig(viteConfig);
  }
  debug("Creating vite server");
  const server = await createServer(viteConfig);
  const info = server.config.logger.info;
  debug("Listening on specified port");
  await server.listen();
  const startupDuration = Date.now() - startTime;
  const url = "http://".concat(httpHost || "localhost", ":").concat(httpPort || "3333");
  info("Sanity Studio using ".concat(chalk.cyan("vite@".concat(require("vite/package.json").version)), " ready in ").concat(chalk.cyan("".concat(Math.ceil(startupDuration), "ms")), " and running at ").concat(chalk.cyan(url)));
  return {
    close: () => server.close()
  };
}
async function startSanityDevServer(args, context) {
  const timers = getTimer();
  const flags = args.extOptions;
  const {
    output,
    workDir,
    cliConfig
  } = context;
  timers.start("checkStudioDependencyVersions");
  checkStudioDependencyVersions(workDir);
  timers.end("checkStudioDependencyVersions");
  if ((await checkRequiredDependencies(context)).didInstall) {
    return;
  }
  const configSpinner = output.spinner("Checking configuration files...");
  const config = getDevServerConfig({
    flags,
    workDir,
    cliConfig
  });
  configSpinner.succeed();
  try {
    await startDevServer(config);
  } catch (err) {
    gracefulServerDeath("dev", config.httpHost, config.httpPort, err);
  }
}
function getDevServerConfig(_ref) {
  let {
    flags,
    workDir,
    cliConfig
  } = _ref;
  const baseConfig = getSharedServerConfig({
    flags,
    workDir,
    cliConfig
  });
  const env = process.env;
  const reactStrictMode = env.SANITY_STUDIO_REACT_STRICT_MODE ? env.SANITY_STUDIO_REACT_STRICT_MODE === "true" : Boolean(cliConfig == null ? void 0 : cliConfig.reactStrictMode);
  return {
    ...baseConfig,
    staticPath: path.join(workDir, "static"),
    reactStrictMode
  };
}
export { startSanityDevServer as default };
//# sourceMappingURL=devAction-bcce7002.js.map
