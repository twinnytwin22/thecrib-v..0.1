{"version":3,"file":"devAction-bcce7002.js","sources":["../../src/_internal/cli/server/devServer.ts","../../src/_internal/cli/actions/dev/devAction.ts"],"sourcesContent":["import chalk from 'chalk'\nimport {createServer, InlineConfig} from 'vite'\nimport {getViteConfig} from './getViteConfig'\nimport {debug} from './debug'\nimport {writeSanityRuntime} from './runtime'\n\nexport interface DevServerOptions {\n  cwd: string\n  basePath: string\n  staticPath: string\n\n  httpPort: number\n  httpHost?: string\n  projectName?: string\n\n  reactStrictMode: boolean\n  vite?: (config: InlineConfig) => InlineConfig\n}\n\nexport interface DevServer {\n  close(): Promise<void>\n}\n\nexport async function startDevServer(options: DevServerOptions): Promise<DevServer> {\n  const {cwd, httpPort, httpHost, basePath: base, reactStrictMode, vite: extendViteConfig} = options\n\n  const startTime = Date.now()\n  debug('Writing Sanity runtime files')\n  await writeSanityRuntime({cwd, reactStrictMode, watch: true})\n\n  debug('Resolving vite config')\n  let viteConfig = await getViteConfig({\n    basePath: base || '/',\n    mode: 'development',\n    server: {port: httpPort, host: httpHost},\n    cwd,\n  })\n\n  if (extendViteConfig) {\n    debug('Extending vite config using user-specified function')\n    viteConfig = extendViteConfig(viteConfig)\n  }\n\n  debug('Creating vite server')\n  const server = await createServer(viteConfig)\n  const info = server.config.logger.info\n\n  debug('Listening on specified port')\n  await server.listen()\n\n  const startupDuration = Date.now() - startTime\n  const url = `http://${httpHost || 'localhost'}:${httpPort || '3333'}`\n  info(\n    `Sanity Studio ` +\n      `using ${chalk.cyan(`vite@${require('vite/package.json').version}`)} ` +\n      `ready in ${chalk.cyan(`${Math.ceil(startupDuration)}ms`)} ` +\n      `and running at ${chalk.cyan(url)}`\n  )\n\n  return {close: () => server.close()}\n}\n","import path from 'path'\nimport type {CliConfig, CliCommandArguments, CliCommandContext} from '@sanity/cli'\nimport {DevServerOptions, startDevServer} from '../../server/devServer'\nimport {getTimer} from '../../util/timing'\nimport {checkStudioDependencyVersions} from '../../util/checkStudioDependencyVersions'\nimport {checkRequiredDependencies} from '../../util/checkRequiredDependencies'\nimport {getSharedServerConfig, gracefulServerDeath} from '../../util/servers'\n\nexport interface StartDevServerCommandFlags {\n  host?: string\n  port?: string\n}\n\nexport default async function startSanityDevServer(\n  args: CliCommandArguments<StartDevServerCommandFlags>,\n  context: CliCommandContext\n): Promise<void> {\n  const timers = getTimer()\n  const flags = args.extOptions\n  const {output, workDir, cliConfig} = context\n\n  timers.start('checkStudioDependencyVersions')\n  checkStudioDependencyVersions(workDir)\n  timers.end('checkStudioDependencyVersions')\n\n  // If the check resulted in a dependency install, the CLI command will be re-run,\n  // thus we want to exit early\n  if ((await checkRequiredDependencies(context)).didInstall) {\n    return\n  }\n\n  // Try to load CLI configuration from sanity.cli.(js|ts)\n  const configSpinner = output.spinner('Checking configuration files...')\n  const config = getDevServerConfig({flags, workDir, cliConfig})\n  configSpinner.succeed()\n\n  try {\n    await startDevServer(config)\n  } catch (err) {\n    gracefulServerDeath('dev', config.httpHost, config.httpPort, err)\n  }\n}\n\nfunction getDevServerConfig({\n  flags,\n  workDir,\n  cliConfig,\n}: {\n  flags: StartDevServerCommandFlags\n  workDir: string\n  cliConfig?: CliConfig\n}): DevServerOptions {\n  const baseConfig = getSharedServerConfig({flags, workDir, cliConfig})\n  const env = process.env // eslint-disable-line no-process-env\n  const reactStrictMode = env.SANITY_STUDIO_REACT_STRICT_MODE\n    ? env.SANITY_STUDIO_REACT_STRICT_MODE === 'true'\n    : Boolean(cliConfig?.reactStrictMode)\n\n  return {\n    ...baseConfig,\n    staticPath: path.join(workDir, 'static'),\n    reactStrictMode,\n  }\n}\n"],"names":["startDevServer","options","cwd","httpPort","httpHost","basePath","base","reactStrictMode","vite","extendViteConfig","startTime","Date","now","debug","writeSanityRuntime","watch","viteConfig","getViteConfig","mode","server","port","host","createServer","info","config","logger","listen","startupDuration","url","chalk","cyan","require","version","Math","ceil","close","startSanityDevServer","args","context","timers","getTimer","flags","extOptions","output","workDir","cliConfig","start","checkStudioDependencyVersions","end","checkRequiredDependencies","didInstall","configSpinner","spinner","getDevServerConfig","succeed","err","gracefulServerDeath","baseConfig","getSharedServerConfig","env","process","SANITY_STUDIO_REACT_STRICT_MODE","Boolean","staticPath","path","join"],"mappings":"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"}