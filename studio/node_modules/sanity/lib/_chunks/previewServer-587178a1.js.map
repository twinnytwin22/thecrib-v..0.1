{"version":3,"file":"previewServer-587178a1.js","sources":["../../src/_internal/cli/server/buildStaticFiles.ts","../../src/_internal/cli/server/previewServer.ts"],"sourcesContent":["import path from 'path'\nimport fs from 'fs/promises'\nimport {constants as fsConstants} from 'fs'\nimport {build, InlineConfig} from 'vite'\nimport readPkgUp from 'read-pkg-up'\nimport {finalizeViteConfig, getViteConfig} from './getViteConfig'\nimport {generateWebManifest} from './webManifest'\nimport {writeSanityRuntime} from './runtime'\nimport {debug as serverDebug} from './debug'\n\nconst debug = serverDebug.extend('static')\n\nexport interface ChunkModule {\n  name: string\n  originalLength: number\n  renderedLength: number\n}\n\nexport interface ChunkStats {\n  name: string\n  modules: ChunkModule[]\n}\n\nexport interface StaticBuildOptions {\n  cwd: string\n  basePath: string\n  outputDir: string\n  minify?: boolean\n  profile?: boolean\n  sourceMap?: boolean\n\n  vite?: (config: InlineConfig) => InlineConfig\n}\n\nexport async function buildStaticFiles(\n  options: StaticBuildOptions\n): Promise<{chunks: ChunkStats[]}> {\n  const {\n    cwd,\n    outputDir,\n    sourceMap = false,\n    minify = true,\n    basePath,\n    vite: extendViteConfig,\n  } = options\n\n  debug('Writing Sanity runtime files')\n  await writeSanityRuntime({cwd, reactStrictMode: false, watch: false})\n\n  debug('Resolving vite config')\n  let viteConfig = await getViteConfig({\n    cwd,\n    basePath,\n    outputDir,\n    minify,\n    sourceMap,\n    mode: 'production',\n  })\n\n  if (extendViteConfig) {\n    debug('Extending vite config with user-specified config')\n    viteConfig = finalizeViteConfig(extendViteConfig(viteConfig))\n  }\n\n  // Copy files placed in /static to the built /static\n  debug('Copying static files from /static to output dir')\n  const staticPath = path.join(outputDir, 'static')\n  await copyDir(path.join(cwd, 'static'), staticPath)\n\n  // Write favicons, not overwriting ones that already exist, to static folder\n  debug('Writing favicons to output dir')\n  const faviconBasePath = `${basePath.replace(/\\/+$/, '')}/static`\n  await writeFavicons(faviconBasePath, staticPath)\n\n  debug('Bundling using vite')\n  const bundle = await build(viteConfig)\n  debug('Bundling complete')\n\n  // For typescript only - this shouldn't ever be the case given we're not watching\n  if (Array.isArray(bundle) || !('output' in bundle)) {\n    return {chunks: []}\n  }\n\n  const stats: ChunkStats[] = []\n  bundle.output.forEach((chunk) => {\n    if (chunk.type !== 'chunk') {\n      return\n    }\n\n    stats.push({\n      name: chunk.name,\n      modules: Object.entries(chunk.modules).map(([rawFilePath, chunkModule]) => {\n        const filePath = rawFilePath.startsWith('\\x00')\n          ? rawFilePath.slice('\\x00'.length)\n          : rawFilePath\n\n        return {\n          name: path.isAbsolute(filePath) ? path.relative(cwd, filePath) : filePath,\n          originalLength: chunkModule.originalLength,\n          renderedLength: chunkModule.renderedLength,\n        }\n      }),\n    })\n  })\n\n  return {chunks: stats}\n}\n\nasync function copyDir(srcDir: string, destDir: string, skipExisting?: boolean): Promise<void> {\n  await fs.mkdir(destDir, {recursive: true})\n\n  for (const file of await tryReadDir(srcDir)) {\n    const srcFile = path.resolve(srcDir, file)\n    if (srcFile === destDir) {\n      continue\n    }\n\n    const destFile = path.resolve(destDir, file)\n    const stat = await fs.stat(srcFile)\n\n    if (stat.isDirectory()) {\n      await copyDir(srcFile, destFile, skipExisting)\n    } else if (skipExisting) {\n      await fs.copyFile(srcFile, destFile, fsConstants.COPYFILE_EXCL).catch(skipIfExistsError)\n    } else {\n      await fs.copyFile(srcFile, destFile)\n    }\n  }\n}\n\nasync function tryReadDir(dir: string): Promise<string[]> {\n  try {\n    const content = await fs.readdir(dir)\n    return content\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      return []\n    }\n\n    throw err\n  }\n}\n\nfunction skipIfExistsError(err: Error & {code: string}) {\n  if (err.code === 'EEXIST') {\n    return\n  }\n\n  throw err\n}\n\nasync function writeFavicons(basePath: string, destDir: string): Promise<void> {\n  const sanityPkgPath = (await readPkgUp({cwd: __dirname}))?.path\n  const faviconsPath = sanityPkgPath\n    ? path.join(path.dirname(sanityPkgPath), 'static', 'favicons')\n    : undefined\n\n  if (!faviconsPath) {\n    throw new Error('Unable to resolve `sanity` module root')\n  }\n\n  await fs.mkdir(destDir, {recursive: true})\n  await copyDir(faviconsPath, destDir, true)\n  await writeWebManifest(basePath, destDir)\n}\n\nasync function writeWebManifest(basePath: string, destDir: string): Promise<void> {\n  const content = JSON.stringify(generateWebManifest(basePath), null, 2)\n  await fs\n    .writeFile(path.join(destDir, 'manifest.webmanifest'), content, 'utf8')\n    .catch(skipIfExistsError)\n}\n","import fs from 'fs'\nimport path from 'path'\nimport chalk from 'chalk'\nimport {InlineConfig, preview} from 'vite'\nimport {debug as serverDebug} from './debug'\n\nconst debug = serverDebug.extend('preview')\n\nexport interface PreviewServer {\n  urls: {local: string[]; network: string[]}\n  close(): Promise<void>\n}\n\nexport interface PreviewServerOptions {\n  root: string\n  cwd: string\n  basePath: string\n\n  httpPort: number\n  httpHost?: string\n\n  vite?: (config: InlineConfig) => InlineConfig\n}\n\nexport async function startPreviewServer(options: PreviewServerOptions): Promise<PreviewServer> {\n  const {httpPort, httpHost, basePath: base, root} = options\n  const startTime = Date.now()\n\n  // eslint-disable-next-line no-sync\n  if (!fs.existsSync(path.join(root, 'index.html'))) {\n    const err = new Error(\n      `Could not find a production build in the '${root}' directory. Try building your studio app with 'sanity build' before starting the preview server.`\n    )\n    err.name = 'BUILD_NOT_FOUND'\n    throw err\n  }\n\n  const previewConfig: InlineConfig = {\n    root,\n    base: base || '/',\n    configFile: false,\n    preview: {\n      port: httpPort,\n      host: httpHost,\n      strictPort: true,\n    },\n    // Needed for vite to not serve `root/dist`\n    build: {\n      outDir: root,\n    },\n  }\n\n  debug('Creating vite server')\n  const server = await preview(previewConfig)\n  const info = server.config.logger.info\n  const url = server.resolvedUrls.local[0]\n\n  const startupDuration = Date.now() - startTime\n\n  info(\n    `Sanity Studio ` +\n      `using ${chalk.cyan(`vite@${require('vite/package.json').version}`)} ` +\n      `ready in ${chalk.cyan(`${Math.ceil(startupDuration)}ms`)} ` +\n      `and running at ${chalk.cyan(url)} (production preview mode)`\n  )\n\n  return {\n    urls: server.resolvedUrls,\n    close: () =>\n      new Promise((resolve, reject) =>\n        server.httpServer.close((err) => (err ? reject(err) : resolve()))\n      ),\n  }\n}\n"],"names":["debug","serverDebug","extend","buildStaticFiles","options","cwd","outputDir","sourceMap","minify","basePath","vite","extendViteConfig","writeSanityRuntime","reactStrictMode","watch","viteConfig","getViteConfig","mode","finalizeViteConfig","staticPath","path","default","join","copyDir","faviconBasePath","replace","writeFavicons","bundle","build","Array","isArray","chunks","stats","output","forEach","chunk","type","push","name","modules","Object","entries","map","rawFilePath","chunkModule","filePath","startsWith","slice","length","isAbsolute","relative","originalLength","renderedLength","srcDir","destDir","skipExisting","fs","mkdir","recursive","file","tryReadDir","srcFile","resolve","destFile","stat","isDirectory","copyFile","fsConstants","COPYFILE_EXCL","catch","skipIfExistsError","dir","content","readdir","err","code","_a","sanityPkgPath","readPkgUp","__dirname","faviconsPath","dirname","Error","writeWebManifest","JSON","stringify","generateWebManifest","writeFile","startPreviewServer","httpPort","httpHost","base","root","startTime","Date","now","existsSync","previewConfig","configFile","preview","port","host","strictPort","outDir","server","info","config","logger","url","resolvedUrls","local","startupDuration","chalk","cyan","require","version","Math","ceil","urls","close","Promise","reject","httpServer"],"mappings":"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"}