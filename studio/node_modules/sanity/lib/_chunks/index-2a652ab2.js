var _templateObject;
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
import { jsxs, jsx } from 'react/jsx-runtime';
import { Button, Stack, Box } from '@sanity/ui';
import styled from 'styled-components';
import { ArrowLeftIcon } from '@sanity/icons';
import 'react';
import 'sanity';
import { usePaneLayout, Pane, _DEBUG, PaneHeader, PaneHeaderActions, BackLink, PaneContent } from './desk-eb7b3548.js';
import 'sanity/router';
import { PaneItem } from './PaneItem-59fdbcf0.js';
import 'lodash/omit.js';
import '@sanity/util/paths';
import { useDeskTool } from './index-66ec8894.js';
const Divider = styled.hr(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  background-color: var(--card-border-color);\n  height: 1px;\n  margin: 0;\n  border: none;\n"])));
function ListPane(props) {
  const {
    childItemId,
    index,
    isActive,
    isSelected,
    pane,
    paneKey
  } = props;
  const {
    features
  } = useDeskTool();
  const {
    collapsed: layoutCollapsed
  } = usePaneLayout();
  const {
    defaultLayout,
    displayOptions,
    items,
    menuItems,
    menuItemGroups,
    title
  } = pane;
  const paneShowIcons = displayOptions == null ? void 0 : displayOptions.showIcons;
  const shouldShowIconForItem = item => {
    var _a;
    const itemShowIcon = (_a = item.displayOptions) == null ? void 0 : _a.showIcon;
    if (typeof itemShowIcon !== "undefined") {
      return itemShowIcon !== false;
    }
    return paneShowIcons !== false;
  };
  return /* @__PURE__ */jsxs(Pane, {
    currentMaxWidth: 350,
    "data-testid": "desk-tool-list-pane",
    id: paneKey,
    maxWidth: 640,
    minWidth: 320,
    selected: isSelected,
    children: [_DEBUG, /* @__PURE__ */jsx(PaneHeader, {
      actions: /* @__PURE__ */jsx(PaneHeaderActions, {
        menuItems,
        menuItemGroups
      }),
      backButton: features.backButton && index > 0 && /* @__PURE__ */jsx(Button, {
        as: BackLink,
        "data-as": "a",
        icon: ArrowLeftIcon,
        mode: "bleed"
      }),
      title
    }), /* @__PURE__ */jsx(PaneContent, {
      overflow: layoutCollapsed ? void 0 : "auto",
      children: /* @__PURE__ */jsx(Stack, {
        padding: 2,
        space: 1,
        children: items && items.map((item, itemIndex) => {
          if (item.type === "divider") {
            return (
              // eslint-disable-next-line react/no-array-index-key
              /* @__PURE__ */
              jsx(Box, {
                paddingY: 1,
                children: /* @__PURE__ */jsx(Divider, {})
              }, "divider-".concat(itemIndex))
            );
          }
          const pressed = !isActive && childItemId === item.id;
          const selected = isActive && childItemId === item.id;
          return /* @__PURE__ */jsx(PaneItem, {
            icon: shouldShowIconForItem(item) ? item.icon : false,
            id: item.id,
            layout: defaultLayout,
            pressed,
            schemaType: item.schemaType,
            selected,
            title: item.title,
            value:
            // If this is a document list item, pass on the ID and type,
            // otherwise leave it undefined to use the passed title and gang
            item._id && item.schemaType ? {
              _id: item._id,
              _type: item.schemaType.name,
              title: item.title
            } : void 0
          }, item.id);
        })
      })
    })]
  });
}
export { ListPane as default };
//# sourceMappingURL=index-2a652ab2.js.map
