{"version":3,"file":"runtime-87e16971.js","sources":["../../src/_internal/cli/server/aliases.ts","../../src/_internal/cli/server/helpers.ts","../../src/_internal/cli/server/sanityMonorepo.ts","../../src/_internal/cli/server/debug.ts","../../src/_internal/cli/server/renderDocument.ts","../../src/_internal/cli/server/vite/plugin-sanity-build-entries.ts","../../src/_internal/cli/server/vite/plugin-sanity-dot-workaround.ts","../../src/_internal/cli/server/vite/plugin-sanity-runtime-rewrite.ts","../../src/_internal/cli/server/webManifest.ts","../../src/_internal/cli/server/vite/plugin-sanity-favicons.ts","../../src/_internal/cli/server/getViteConfig.ts","../../src/_internal/cli/server/getEntryModule.ts","../../src/_internal/cli/server/sanityConfig.ts","../../src/_internal/cli/server/runtime.ts"],"sourcesContent":["import path from 'path'\nimport type {SanityMonorepo} from './sanityMonorepo'\n\n/**\n * Returns an object of aliases for vite to use\n *\n * @internal\n */\nexport function getAliases(opts: {monorepo?: SanityMonorepo}): Record<string, string> {\n  const {monorepo} = opts\n\n  if (!monorepo?.path) {\n    return {}\n  }\n\n  // Load monorepo aliases (if the current Studio is located within the sanity monorepo)\n  // This is done in order for the Vite server to use the source files instead of\n  // the compiled output, allowing for a better dev experience.\n  const aliasesPath = path.resolve(monorepo.path, 'dev/aliases.cjs')\n\n  // eslint-disable-next-line import/no-dynamic-require\n  const devAliases: Record<string, string> = require(aliasesPath)\n\n  const monorepoAliases = Object.fromEntries(\n    Object.entries(devAliases).map(([key, modulePath]) => {\n      return [key, path.resolve(monorepo.path, modulePath)]\n    })\n  )\n\n  return monorepoAliases\n}\n","import path from 'path'\nimport readPkgUp from 'read-pkg-up'\nimport resolveFrom from 'resolve-from'\n\n/**\n * Given a module name such as \"styled-components\", will resolve the _module path_,\n * eg if require.resolve(`styled-components`) resolves to:\n *   `/some/node_modules/styled-components/lib/cjs/styled.js`\n * this function will instead return\n *   `/some/node_modules/styled-components`\n *\n * This is done in order for aliases to be pointing to the right module in terms of\n * _file-system location_, without pointing to a specific commonjs/browser/module variant\n *\n * @internal\n */\nexport async function getModulePath(mod: string, fromDir: string): Promise<string> {\n  const modulePath = resolveFrom(fromDir, mod)\n  const pkg = await readPkgUp({cwd: path.dirname(modulePath)})\n\n  return pkg ? path.dirname(pkg.path) : modulePath\n}\n\n/**\n * @internal\n */\nexport function isRecord(value: unknown): value is Record<string, unknown> {\n  return Boolean(value) && typeof value === 'object' && !Array.isArray(value)\n}\n\n/**\n * Ensures that the given path both starts and ends with a single slash\n *\n * @internal\n */\nexport function normalizeBasePath(pathName: string): string {\n  return `/${pathName}/`.replace(/^\\/+/, '/').replace(/\\/+$/, '/')\n}\n","import path from 'path'\nimport readPkgUp from 'read-pkg-up'\n\n/**\n * @internal\n */\nexport interface SanityMonorepo {\n  path: string\n}\n\n/**\n * Load information about the `sanity-io/sanity` monorepo (if applicable)\n *\n * @internal\n */\nexport async function loadSanityMonorepo(cwd: string): Promise<SanityMonorepo | undefined> {\n  let p = cwd\n\n  while (p !== '/') {\n    const readResult = await readPkgUp({cwd: p})\n\n    if (!readResult) {\n      return undefined\n    }\n\n    if (readResult.packageJson.isSanityMonorepo) {\n      return {path: path.dirname(readResult.path)}\n    }\n\n    p = path.dirname(path.dirname(readResult.path))\n  }\n\n  return undefined\n}\n","import debugIt from 'debug'\n\nexport const debug = debugIt('sanity:server')\n","/**\n * Looks for and imports (in preferred order):\n *   - src/_document.js\n *   - src/_document.tsx\n *\n * Then renders using ReactDOM to a string, which is sent back to the parent\n * process over the worker `postMessage` channel.\n */\nimport fs from 'fs'\nimport path from 'path'\nimport {Worker, parentPort, workerData, isMainThread} from 'worker_threads'\nimport chalk from 'chalk'\nimport importFresh from 'import-fresh'\nimport {generateHelpUrl} from '@sanity/generate-help-url'\nimport {createElement} from 'react'\nimport {renderToStaticMarkup} from 'react-dom/server'\nimport {getAliases} from './aliases'\nimport {SanityMonorepo} from './sanityMonorepo'\nimport {debug as serverDebug} from './debug'\n\nconst debug = serverDebug.extend('renderDocument')\n\n// Don't use threads in the jest world\n// eslint-disable-next-line no-process-env\nconst useThreads = typeof process.env.JEST_WORKER_ID === 'undefined'\nconst hasWarnedAbout = new Set<string>()\n\nconst defaultProps = {\n  entryPath: './.sanity/runtime/app.js',\n}\n\nconst autoGeneratedWarning = `\nThis file is auto-generated from \"sanity dev\".\nModifications to this file is automatically discarded.\n\nTo customize the rendering of this file, see\n${generateHelpUrl('custom-document-component')}\n`.trim()\n\ninterface DocumentProps {\n  entryPath?: string\n  css?: string[]\n}\n\nexport function renderDocument(options: {\n  monorepo?: SanityMonorepo\n  studioRootPath: string\n  props?: DocumentProps\n}): Promise<string> {\n  return new Promise((resolve, reject) => {\n    if (!useThreads) {\n      resolve(getDocumentHtml(options.studioRootPath, options.props))\n      return\n    }\n\n    debug('Starting worker thread for %s', __filename)\n    const worker = new Worker(__filename, {\n      execArgv: __DEV__ ? ['-r', 'esbuild-register'] : undefined,\n      workerData: {...options, dev: __DEV__, shouldWarn: true},\n    })\n\n    worker.on('message', (msg) => {\n      if (msg.type === 'warning') {\n        if (hasWarnedAbout.has(msg.warnKey)) {\n          return\n        }\n\n        if (Array.isArray(msg.message)) {\n          msg.message.forEach((warning: string) =>\n            console.warn(`${chalk.yellow('[warn]')} ${warning}`)\n          )\n        } else {\n          console.warn(`${chalk.yellow('[warn]')} ${msg.message}`)\n        }\n\n        hasWarnedAbout.add(msg.warnKey)\n        return\n      }\n\n      if (msg.type === 'error') {\n        debug('Error from worker: %s', msg.error || 'Unknown error')\n        reject(new Error(msg.error || 'Document rendering worker stopped with an unknown error'))\n        return\n      }\n\n      if (msg.type === 'result') {\n        debug('Document HTML rendered, %d bytes', msg.html.length)\n        resolve(msg.html)\n      }\n    })\n    worker.on('error', (err) => {\n      debug('Worker errored: %s', err.message)\n      reject(err)\n    })\n    worker.on('exit', (code) => {\n      if (code !== 0) {\n        debug('Worker stopped with code %d', code)\n        reject(new Error(`Document rendering worker stopped with exit code ${code}`))\n      }\n    })\n  })\n}\n\nexport function decorateIndexWithAutoGeneratedWarning(template: string): string {\n  return template.replace(/<head/, `\\n<!--\\n${autoGeneratedWarning}\\n-->\\n<head`)\n}\n\nexport function getPossibleDocumentComponentLocations(studioRootPath: string): string[] {\n  return [path.join(studioRootPath, '_document.js'), path.join(studioRootPath, '_document.tsx')]\n}\n\nif (!isMainThread) {\n  renderDocumentFromWorkerData()\n}\n\nfunction renderDocumentFromWorkerData() {\n  if (!parentPort || !workerData) {\n    throw new Error('Must be used as a Worker with a valid options object in worker data')\n  }\n\n  const {monorepo, studioRootPath, props} = workerData || {}\n\n  if (workerData?.dev) {\n    // Define `__DEV__` in the worker thread as well\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ;(global as any).__DEV__ = true\n  }\n\n  if (typeof studioRootPath !== 'string') {\n    parentPort.postMessage({type: 'error', message: 'Missing/invalid `studioRootPath` option'})\n    return\n  }\n\n  if (props && typeof props !== 'object') {\n    parentPort.postMessage({type: 'error', message: '`props` must be an object if provided'})\n    return\n  }\n\n  // Require hook #1\n  // Alias monorepo modules\n  debug('Registering potential aliases')\n  require('module-alias').addAliases(getAliases({monorepo}))\n\n  // Require hook #2\n  // Use `esbuild` to allow JSX/TypeScript and modern JS features\n  debug('Registering esbuild for node %s', process.version)\n  const {unregister} = __DEV__\n    ? {unregister: () => undefined}\n    : require('esbuild-register/dist/node').register({\n        target: `node${process.version.slice(1)}`,\n        extensions: ['.jsx', '.ts', '.tsx', '.mjs'],\n      })\n\n  // Require hook #3\n  // Same as above, but we don't want to enforce a .jsx extension for anything with JSX\n  debug('Registering esbuild for .js files using jsx loader')\n  const {unregister: unregisterJs} = __DEV__\n    ? () => undefined\n    : require('esbuild-register/dist/node').register({\n        target: `node${process.version.slice(1)}`,\n        extensions: ['.js'],\n        loader: 'jsx',\n      })\n\n  const html = getDocumentHtml(studioRootPath, props)\n\n  parentPort.postMessage({type: 'result', html})\n\n  // Be polite and clean up after esbuild-register\n  unregister()\n  unregisterJs()\n}\n\nfunction getDocumentHtml(studioRootPath: string, props?: DocumentProps): string {\n  const Document = getDocumentComponent(studioRootPath)\n\n  // NOTE: Validate the list of CSS paths so implementers of `_document.tsx` don't have to\n  // - If the path is not a full URL, check if it starts with `/`\n  //   - If not, then prepend a `/` to the string\n  const css = props?.css?.map((url) => {\n    try {\n      // If the URL is absolute, we don't need to prefix it\n      return new URL(url).toString()\n    } catch {\n      return url.startsWith('/') ? url : `/${url}`\n    }\n  })\n\n  debug('Rendering document component using React')\n  const result = renderToStaticMarkup(createElement(Document, {...defaultProps, ...props, css}))\n  return `<!DOCTYPE html>${result}`\n}\n\nfunction getDocumentComponent(studioRootPath: string) {\n  debug('Loading default document component from `sanity` module')\n  const {DefaultDocument} = require('sanity')\n\n  debug('Attempting to load user-defined document component from %s', studioRootPath)\n  const userDefined = tryLoadDocumentComponent(studioRootPath)\n\n  if (!userDefined) {\n    debug('Using default document component')\n    return DefaultDocument\n  }\n\n  debug('Found user defined document component at %s', userDefined.path)\n\n  const DocumentComp = userDefined.component.default\n  if (typeof DocumentComp === 'function') {\n    debug('User defined document component is a function, assuming valid')\n    return DocumentComp\n  }\n\n  debug('User defined document component did not have a default export')\n  const userExports = Object.keys(userDefined.component).join(', ') || 'None'\n  const relativePath = path.relative(process.cwd(), userDefined.path)\n  const typeHint =\n    typeof userDefined.component.default === 'undefined'\n      ? ''\n      : ` (type was ${typeof userDefined.component.default})`\n\n  const warnKey = `${relativePath}/${userDefined.modified}`\n\n  parentPort?.postMessage({\n    type: 'warning',\n    message: [\n      `${relativePath} did not have a default export that is a React component${typeHint}`,\n      `Found named exports/properties: ${userExports}`.trim(),\n      `Using default document component from \"sanity\".`,\n    ],\n    warnKey,\n  })\n\n  return DefaultDocument\n}\n\nfunction tryLoadDocumentComponent(studioRootPath: string) {\n  const locations = getPossibleDocumentComponentLocations(studioRootPath)\n\n  for (const componentPath of locations) {\n    debug('Trying to load document component from %s', componentPath)\n    try {\n      return {\n        // eslint-disable-next-line import/no-dynamic-require\n        component: importFresh<any>(componentPath),\n        path: componentPath,\n        // eslint-disable-next-line no-sync\n        modified: Math.floor(fs.statSync(componentPath)?.mtimeMs),\n      }\n    } catch (err) {\n      // Allow \"not found\" errors\n      if (err.code !== 'MODULE_NOT_FOUND') {\n        debug('Failed to load document component: %s', err.message)\n        throw err\n      }\n\n      debug('Document component not found at %s', componentPath)\n    }\n  }\n\n  return null\n}\n","import type {ChunkMetadata, Plugin} from 'vite'\nimport type {SanityMonorepo} from '../sanityMonorepo'\nimport {renderDocument} from '../renderDocument'\n\ninterface ViteOutputBundle {\n  [fileName: string]: ViteRenderedChunk | ViteRenderedAsset\n}\n\ninterface ViteRenderedAsset {\n  type: 'asset'\n}\n\ninterface ViteRenderedChunk {\n  type: 'chunk'\n  name: string\n  fileName: string\n  facadeModuleId: string | null\n  code: string\n  imports: string[]\n  viteMetadata: ChunkMetadata\n}\n\nconst entryChunkId = '.sanity/runtime/app.js'\n\nexport function sanityBuildEntries(options: {\n  cwd: string\n  monorepo: SanityMonorepo | undefined\n  basePath: string\n}): Plugin {\n  const {cwd, monorepo, basePath} = options\n\n  return {\n    name: 'sanity/server/build-entries',\n    apply: 'build',\n\n    buildStart() {\n      this.emitFile({\n        type: 'chunk',\n        id: entryChunkId,\n        name: 'sanity',\n      })\n    },\n\n    async generateBundle(_options, outputBundle) {\n      const bundle = outputBundle as unknown as ViteOutputBundle\n      const entryFile = Object.values(bundle).find(\n        (file) =>\n          file.type === 'chunk' &&\n          file.name === 'sanity' &&\n          file.facadeModuleId?.endsWith(entryChunkId)\n      )\n\n      if (!entryFile) {\n        throw new Error(`Failed to find entry file in bundle (${entryChunkId})`)\n      }\n\n      if (entryFile.type !== 'chunk') {\n        throw new Error('Entry file is not a chunk')\n      }\n\n      const entryFileName = entryFile.fileName\n      const entryPath = [basePath.replace(/\\/+$/, ''), entryFileName].join('/')\n\n      let css: string[] = []\n      if (entryFile.viteMetadata?.importedCss) {\n        // Check all the top-level imports of the entryPoint to see if they have\n        // static CSS assets that need loading\n        css = [...entryFile.viteMetadata.importedCss]\n        for (const key of entryFile.imports) {\n          // Traverse all CSS assets that isn't loaded by the runtime and\n          // need <link> tags in the HTML template\n          const entry = bundle[key]\n          const importedCss =\n            entry && entry.type === 'chunk' ? entry.viteMetadata.importedCss : undefined\n\n          if (importedCss) {\n            css.push(...importedCss)\n          }\n        }\n      }\n\n      this.emitFile({\n        type: 'asset',\n        fileName: 'index.html',\n        source: await renderDocument({\n          monorepo,\n          studioRootPath: cwd,\n          props: {\n            entryPath,\n            css,\n          },\n        }),\n      })\n    },\n  }\n}\n","import fs from 'fs'\nimport path from 'path'\nimport {Plugin} from 'vite'\nimport history from 'connect-history-api-fallback'\n\n/**\n * This is a Vite plugin for supporting locations containing `.` in their pathname.\n *\n * @see https://github.com/vitejs/vite/issues/2245\n */\nexport function sanityDotWorkaroundPlugin(): Plugin {\n  return {\n    name: 'sanity/server/dot-workaround',\n    configureServer(server) {\n      const {root} = server.config\n\n      return () => {\n        const handler = history({\n          disableDotRule: true,\n          rewrites: [\n            {\n              from: /\\/index.html$/,\n              to: ({parsedUrl}) => {\n                const pathname = parsedUrl.pathname\n\n                if (pathname && fs.existsSync(path.join(root, pathname))) {\n                  return pathname\n                }\n\n                return `/index.html`\n              },\n            },\n          ],\n        })\n\n        server.middlewares.use((req, res, next) => {\n          handler(req as any, res as any, next)\n        })\n      }\n    },\n  }\n}\n","import type {Plugin} from 'vite'\n\nexport function sanityRuntimeRewritePlugin(): Plugin {\n  return {\n    name: 'sanity/server/sanity-runtime-rewrite',\n    apply: 'serve',\n    configureServer(viteDevServer) {\n      return () => {\n        viteDevServer.middlewares.use((req, res, next) => {\n          if (req.url === '/index.html') {\n            req.url = '/.sanity/runtime/index.html'\n          }\n\n          next()\n        })\n      }\n    },\n  }\n}\n","export interface WebManifest {\n  icons: {\n    src: string\n    type: string\n    sizes: string\n  }[]\n}\n\nexport function generateWebManifest(basePath: string): WebManifest {\n  return {\n    icons: [\n      {src: `${basePath}/favicon-192.png`, type: 'image/png', sizes: '192x192'},\n      {src: `${basePath}/favicon-512.png`, type: 'image/png', sizes: '512x512'},\n    ],\n  }\n}\n","import path from 'path'\nimport fs from 'fs/promises'\nimport type {Plugin} from 'vite'\nimport {generateWebManifest} from '../webManifest'\n\nconst mimeTypes: Record<string, string | undefined> = {\n  '.ico': 'image/x-icon',\n  '.svg': 'image/svg+xml',\n  '.png': 'image/png',\n}\n\nexport function sanityFaviconsPlugin({\n  faviconsPath,\n  staticUrlPath,\n}: {\n  faviconsPath: string\n  staticUrlPath: string\n}): Plugin {\n  const cache: {favicons?: string[]} = {}\n\n  async function getFavicons(): Promise<string[]> {\n    if (cache.favicons) {\n      return cache.favicons\n    }\n\n    cache.favicons = await fs.readdir(faviconsPath)\n    return cache.favicons\n  }\n\n  return {\n    name: 'sanity/server/sanity-favicons',\n    apply: 'serve',\n    configureServer(viteDevServer) {\n      const webManifest = JSON.stringify(generateWebManifest(staticUrlPath), null, 2)\n      const webManifestPath = `${staticUrlPath}/manifest.webmanifest`\n\n      return () => {\n        viteDevServer.middlewares.use(async (req, res, next) => {\n          if (req.url?.endsWith(webManifestPath)) {\n            res.writeHead(200, 'OK', {'content-type': 'application/manifest+json'})\n            res.write(webManifest)\n            res.end()\n            return\n          }\n\n          const parsedUrl =\n            (req as any)._parsedUrl || new URL(req.url || '/', 'http://localhost:3333')\n\n          const icons = await getFavicons()\n          const fileName = path.basename(parsedUrl.pathname || '')\n          if (!icons.includes(fileName)) {\n            next()\n            return\n          }\n\n          const mimeType = mimeTypes[path.extname(fileName)] || 'application/octet-stream'\n          res.writeHead(200, 'OK', {'content-type': mimeType})\n          res.write(await fs.readFile(path.join(faviconsPath, fileName)))\n          res.end()\n        })\n      }\n    },\n  }\n}\n","import path from 'path'\nimport type {InlineConfig} from 'vite'\nimport viteReact from '@vitejs/plugin-react'\nimport readPkgUp from 'read-pkg-up'\nimport {getAliases} from './aliases'\nimport {normalizeBasePath} from './helpers'\nimport {loadSanityMonorepo} from './sanityMonorepo'\nimport {sanityBuildEntries} from './vite/plugin-sanity-build-entries'\nimport {sanityDotWorkaroundPlugin} from './vite/plugin-sanity-dot-workaround'\nimport {sanityRuntimeRewritePlugin} from './vite/plugin-sanity-runtime-rewrite'\nimport {sanityFaviconsPlugin} from './vite/plugin-sanity-favicons'\n\nexport interface ViteOptions {\n  /**\n   * Root path of the studio/sanity app\n   */\n  cwd: string\n\n  /**\n   * Base path (eg under where to serve the app - `/studio` or similar)\n   * Will be normalized by `getViteConfig` to ensure it starts and end with a `/`\n   */\n  basePath?: string\n\n  /**\n   * Output directory (eg where to place the built files, if any)\n   */\n  outputDir?: string\n\n  /**\n   * Whether or not to enable source maps\n   */\n  sourceMap?: boolean\n\n  /**\n   * Whether or not to minify the output (only used in `mode: 'production'`)\n   */\n  minify?: boolean\n\n  /**\n   * HTTP development server configuration\n   */\n  server?: {port?: number; host?: string}\n\n  /**\n   * Mode to run vite in - eg development or production\n   */\n  mode: 'development' | 'production'\n}\n\n/**\n * Get a configuration object for Vite based on the passed options\n *\n * @internal Only meant for consumption inside of Sanity modules, do not depend on this externally\n */\nexport async function getViteConfig(options: ViteOptions): Promise<InlineConfig> {\n  const {\n    cwd,\n    mode,\n    outputDir,\n    // default to `true` when `mode=development`\n    sourceMap = options.mode === 'development',\n    server,\n    minify,\n    basePath: rawBasePath = '/',\n  } = options\n\n  const monorepo = await loadSanityMonorepo(cwd)\n  const basePath = normalizeBasePath(rawBasePath)\n\n  const sanityPkgPath = (await readPkgUp({cwd: __dirname}))?.path\n  if (!sanityPkgPath) {\n    throw new Error('Unable to resolve `sanity` module root')\n  }\n\n  const faviconsPath = path.join(path.dirname(sanityPkgPath), 'static', 'favicons')\n  const staticPath = `${basePath}static`\n\n  const viteConfig: InlineConfig = {\n    // Define a custom cache directory so that sanity's vite cache\n    // does not conflict with any potential local vite projects\n    cacheDir: 'node_modules/.sanity/vite',\n    root: cwd,\n    base: basePath,\n    build: {\n      outDir: outputDir || path.resolve(cwd, 'dist'),\n      sourcemap: sourceMap,\n    },\n    server: {\n      base: basePath,\n      host: server?.host,\n      port: server?.port || 3333,\n      strictPort: true,\n    },\n    configFile: false,\n    mode,\n    plugins: [\n      viteReact(),\n      sanityFaviconsPlugin({faviconsPath, staticUrlPath: staticPath}),\n      sanityDotWorkaroundPlugin(),\n      sanityRuntimeRewritePlugin(),\n      sanityBuildEntries({basePath, cwd, monorepo}),\n    ],\n    envPrefix: 'SANITY_STUDIO_',\n    logLevel: mode === 'production' ? 'silent' : 'info',\n    resolve: {\n      alias: getAliases({monorepo}),\n    },\n    define: {\n      __SANITY_STAGING__: process.env.SANITY_INTERNAL_ENV === 'staging',\n    },\n  }\n\n  if (mode === 'production') {\n    viteConfig.build = {\n      ...viteConfig.build,\n\n      assetsDir: 'static',\n      minify: minify ? 'esbuild' : false,\n      emptyOutDir: false, // Rely on CLI to do this\n\n      rollupOptions: {\n        input: {\n          sanity: path.join(cwd, '.sanity', 'runtime', 'app.js'),\n        },\n      },\n    }\n  }\n\n  return viteConfig\n}\n\n/**\n * Ensure Sanity entry chunk is always loaded\n *\n * @param config - User-modified configuration\n * @returns Merged configuration\n * @internal\n */\nexport function finalizeViteConfig(config: InlineConfig): InlineConfig {\n  if (typeof config.build?.rollupOptions?.input !== 'object') {\n    throw new Error(\n      'Vite config must contain `build.rollupOptions.input`, and it must be an object'\n    )\n  }\n\n  if (!config.root) {\n    throw new Error(\n      'Vite config must contain `root` property, and must point to the Sanity root directory'\n    )\n  }\n\n  return {\n    ...config,\n    build: {\n      ...config.build,\n      rollupOptions: {\n        ...config.build.rollupOptions,\n        input: {\n          ...config.build.rollupOptions.input,\n          sanity: path.join(config.root, '.sanity', 'runtime', 'app.js'),\n        },\n      },\n    },\n  }\n}\n","const entryModule = `\n// This file is auto-generated on 'sanity dev'\n// Modifications to this file is automatically discarded\nimport {renderStudio} from \"sanity\"\nimport studioConfig from %STUDIO_CONFIG_LOCATION%\n\nrenderStudio(\n  document.getElementById(\"sanity\"),\n  studioConfig,\n  %STUDIO_REACT_STRICT_MODE%\n)\n`\n\nconst noConfigEntryModule = `\n// This file is auto-generated on 'sanity dev'\n// Modifications to this file is automatically discarded\nimport {renderStudio} from \"sanity\"\n\nconst studioConfig = {missingConfigFile: true}\n\nrenderStudio(\n  document.getElementById(\"sanity\"),\n  studioConfig,\n  %STUDIO_REACT_STRICT_MODE%\n)\n`\n\nexport function getEntryModule(options: {\n  reactStrictMode: boolean\n  relativeConfigLocation: string | null\n}): string {\n  const {reactStrictMode, relativeConfigLocation} = options\n  const sourceModule = relativeConfigLocation ? entryModule : noConfigEntryModule\n\n  return sourceModule\n    .replace(/%STUDIO_REACT_STRICT_MODE%/, JSON.stringify(Boolean(reactStrictMode)))\n    .replace(/%STUDIO_CONFIG_LOCATION%/, JSON.stringify(relativeConfigLocation))\n}\n","import path from 'path'\nimport fs from 'fs/promises'\nimport {debug as serverDebug} from './debug'\n\nconst debug = serverDebug.extend('config')\n\n/**\n * Resolves the path to the studio configuration file with the following extensions,\n * in preferred order: '.mjs', '.js', '.ts', '.jsx', '.tsx' (aligns with vite)\n *\n * Falls back to the default studio configuration exported by `sanity` if none is found\n *\n * @internal\n */\nexport async function getSanityStudioConfigPath(studioRootPath: string): Promise<string | null> {\n  const configPaths = [\n    path.join(studioRootPath, 'sanity.config.mjs'),\n    path.join(studioRootPath, 'sanity.config.js'),\n    path.join(studioRootPath, 'sanity.config.ts'),\n    path.join(studioRootPath, 'sanity.config.jsx'),\n    path.join(studioRootPath, 'sanity.config.tsx'),\n  ]\n\n  debug('Looking for configuration file in %d possible locations', configPaths.length)\n  const configs = await Promise.all(\n    configPaths.map(async (configPath) => ({\n      path: configPath,\n      exists: await fileExists(configPath),\n    }))\n  )\n\n  const availableConfigs = configs.filter((config) => config.exists)\n  debug('Found %d available configuration files', availableConfigs.length)\n\n  // No config file exists?\n  if (availableConfigs.length === 0) {\n    console.warn('No `sanity.config.js`/`sanity.config.ts` found - using default studio config')\n    return null\n  }\n\n  if (availableConfigs.length > 1) {\n    console.warn('Found multiple potential studio configs:')\n    availableConfigs.forEach((config) => console.warn(` - ${config.path}`))\n    console.warn(`Using ${availableConfigs[0].path}`)\n  }\n\n  return availableConfigs[0].path\n}\n\n/**\n * Asynchronously checks if a file exists. This is prone to race conditions,\n * as the file can exist/not exist by the time this resolves, but in this\n * case this is an acceptable trade-off. Best effort, and all that.\n */\nfunction fileExists(filePath: string): Promise<boolean> {\n  return fs.stat(filePath).then(\n    () => true,\n    () => false\n  )\n}\n","import fs from 'fs/promises'\nimport path from 'path'\nimport chokidar from 'chokidar'\nimport {debug as serverDebug} from './debug'\nimport {getEntryModule} from './getEntryModule'\nimport {getSanityStudioConfigPath} from './sanityConfig'\nimport {loadSanityMonorepo} from './sanityMonorepo'\nimport {\n  decorateIndexWithAutoGeneratedWarning,\n  getPossibleDocumentComponentLocations,\n  renderDocument,\n} from './renderDocument'\n\nconst debug = serverDebug.extend('runtime')\n\nexport interface RuntimeOptions {\n  cwd: string\n  reactStrictMode: boolean\n  watch: boolean\n}\n\n/**\n * Generates the `.sanity/runtime` directory, and optionally watches for custom\n * document files, rebuilding when they change\n *\n * @param options - Current working directory (Sanity root dir), and whether or not to watch\n * @internal\n */\nexport async function writeSanityRuntime({\n  cwd,\n  reactStrictMode,\n  watch,\n}: RuntimeOptions): Promise<void> {\n  debug('Resolving Sanity monorepo information')\n  const monorepo = await loadSanityMonorepo(cwd)\n  const runtimeDir = path.join(cwd, '.sanity', 'runtime')\n\n  debug('Making runtime directory')\n  await fs.mkdir(runtimeDir, {recursive: true})\n\n  async function renderAndWriteDocument() {\n    debug('Rendering document template')\n    const indexHtml = decorateIndexWithAutoGeneratedWarning(\n      await renderDocument({\n        studioRootPath: cwd,\n        monorepo,\n        props: {entryPath: `/${path.relative(cwd, path.join(runtimeDir, 'app.js'))}`},\n      })\n    )\n\n    debug('Writing index.html to runtime directory')\n    await fs.writeFile(path.join(runtimeDir, 'index.html'), indexHtml)\n  }\n\n  if (watch) {\n    chokidar\n      .watch(getPossibleDocumentComponentLocations(cwd))\n      .on('all', () => renderAndWriteDocument())\n  }\n\n  await renderAndWriteDocument()\n\n  debug('Writing app.js to runtime directory')\n  const studioConfigPath = await getSanityStudioConfigPath(cwd)\n  const relativeConfigLocation = studioConfigPath\n    ? path.relative(runtimeDir, studioConfigPath)\n    : null\n\n  await fs.writeFile(\n    path.join(runtimeDir, 'app.js'),\n    getEntryModule({reactStrictMode, relativeConfigLocation})\n  )\n}\n"],"names":["getAliases","opts","monorepo","path","aliasesPath","resolve","devAliases","require","monorepoAliases","Object","fromEntries","entries","map","key","modulePath","normalizeBasePath","pathName","replace","loadSanityMonorepo","cwd","p","readResult","readPkgUp","default","packageJson","isSanityMonorepo","dirname","debug","debugIt","serverDebug","extend","useThreads","process","env","JEST_WORKER_ID","hasWarnedAbout","Set","defaultProps","entryPath","autoGeneratedWarning","generateHelpUrl","trim","renderDocument","options","Promise","reject","getDocumentHtml","studioRootPath","props","__filename","worker","Worker","execArgv","workerData","dev","shouldWarn","on","msg","type","has","warnKey","Array","isArray","message","forEach","warning","console","warn","chalk","yellow","add","error","Error","html","length","err","code","decorateIndexWithAutoGeneratedWarning","template","getPossibleDocumentComponentLocations","join","isMainThread","renderDocumentFromWorkerData","_a","parentPort","global","__DEV__","postMessage","addAliases","version","unregister","register","target","slice","extensions","unregisterJs","loader","Document","getDocumentComponent","css","url","URL","toString","startsWith","result","renderToStaticMarkup","createElement","DefaultDocument","userDefined","tryLoadDocumentComponent","DocumentComp","component","userExports","keys","relativePath","relative","typeHint","modified","locations","componentPath","importFresh","Math","floor","fs","statSync","mtimeMs","entryChunkId","sanityBuildEntries","basePath","name","apply","buildStart","emitFile","id","generateBundle","_options","outputBundle","bundle","entryFile","values","find","file","facadeModuleId","endsWith","entryFileName","fileName","viteMetadata","importedCss","imports","entry","push","source","sanityDotWorkaroundPlugin","configureServer","server","root","config","handler","history","disableDotRule","rewrites","from","to","parsedUrl","pathname","existsSync","middlewares","use","req","res","next","sanityRuntimeRewritePlugin","viteDevServer","generateWebManifest","icons","src","sizes","mimeTypes","sanityFaviconsPlugin","faviconsPath","staticUrlPath","cache","getFavicons","favicons","readdir","webManifest","JSON","stringify","webManifestPath","writeHead","write","end","_parsedUrl","basename","includes","mimeType","extname","readFile","getViteConfig","mode","outputDir","sourceMap","minify","rawBasePath","sanityPkgPath","__dirname","staticPath","viteConfig","cacheDir","base","build","outDir","sourcemap","host","port","strictPort","configFile","plugins","viteReact","envPrefix","logLevel","alias","define","__SANITY_STAGING__","SANITY_INTERNAL_ENV","assetsDir","emptyOutDir","rollupOptions","input","sanity","finalizeViteConfig","_b","entryModule","noConfigEntryModule","getEntryModule","reactStrictMode","relativeConfigLocation","sourceModule","Boolean","getSanityStudioConfigPath","configPaths","configs","all","configPath","exists","fileExists","availableConfigs","filter","filePath","stat","then","writeSanityRuntime","watch","runtimeDir","mkdir","recursive","renderAndWriteDocument","indexHtml","writeFile","chokidar","studioConfigPath"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQO,SAASA,WAAWC,IAA2D,EAAA;EAC9E,MAAA;IAACC;EAAY,CAAA,GAAAD,IAAA;EAEf,IAAA,EAACC,qCAAUC,IAAM,CAAA,EAAA;IACnB,OAAO,EAAC;EACV;EAKA,MAAMC,WAAc,GAAAD,aAAAA,CAAAA,OAAA,CAAKE,OAAQ,CAAAH,QAAA,CAASC,MAAM,iBAAiB,CAAA;EAG3D,MAAAG,UAAA,GAAqCC,QAAQH,WAAW,CAAA;EAE9D,MAAMI,kBAAkBC,MAAO,CAAAC,WAAA,CAC7BD,MAAA,CAAOE,QAAQL,UAAU,CAAA,CAAEM,IAAI,QAAuB;IAAA,IAAtB,CAACC,GAAK,EAAAC,UAAU,CAAM;IACpD,OAAO,CAACD,GAAK,EAAAV,qBAAA,CAAKE,QAAQH,QAAS,CAAAC,IAAA,EAAMW,UAAU,CAAC,CAAA;EAAA,CACrD,CAAA,CACH;EAEO,OAAAN,eAAA;AACT;ACKO,SAASO,kBAAkBC,QAA0B,EAAA;EACnD,OAAA,WAAIA,eAAYC,OAAQ,CAAA,MAAA,EAAQ,GAAG,CAAE,CAAAA,OAAA,CAAQ,QAAQ,GAAG,CAAA;AACjE;ACtBA,eAAsBC,mBAAmBC,GAAkD,EAAA;EACzF,IAAIC,CAAI,GAAAD,GAAA;EAER,OAAOC,MAAM,GAAK,EAAA;IAChB,MAAMC,aAAa,MAAMC,kBAAA,CAAAC,OAAA,CAAU;MAACJ,GAAA,EAAKC;IAAE,CAAA,CAAA;IAE3C,IAAI,CAACC,UAAY,EAAA;MACR,OAAA,KAAA,CAAA;IACT;IAEI,IAAAA,UAAA,CAAWG,YAAYC,gBAAkB,EAAA;MAC3C,OAAO;QAACtB,IAAM,EAAAA,aAAA,CAAAoB,OAAA,CAAKG,OAAQ,CAAAL,UAAA,CAAWlB,IAAI;OAAC;IAC7C;IAEAiB,CAAA,GAAIjB,sBAAKuB,OAAQ,CAAAvB,aAAAA,CAAAA,OAAA,CAAKuB,OAAQ,CAAAL,UAAA,CAAWlB,IAAI,CAAC,CAAA;EAChD;EAEO,OAAA,KAAA,CAAA;AACT;AC/Ba,MAAAwB,OAAA,GAAQC,uBAAQ,eAAe,CAAA;ACkB5C,MAAMD,OAAA,GAAQE,OAAY,CAAAC,MAAA,CAAO,gBAAgB,CAAA;AAIjD,MAAMC,UAAa,GAAA,OAAOC,OAAQ,CAAAC,GAAA,CAAIC,cAAmB,KAAA,WAAA;AACzD,MAAMC,cAAA,GAAA,mBAAqBC,GAAY,EAAA;AAEvC,MAAMC,YAAe,GAAA;EACnBC,SAAW,EAAA;AACb,CAAA;AAEA,MAAMC,oBAAuB,GAAA,sKAK3BC,gCAAgB,2BAA2B,CAAA,QAC3CC,IAAK,EAAA;AAOA,SAASC,eAAeC,OAIX,EAAA;EAClB,OAAO,IAAIC,OAAA,CAAQ,CAACvC,OAAA,EAASwC,MAAW,KAAA;IACtC,IAAI,CAACd,UAAY,EAAA;MACf1B,OAAA,CAAQyC,eAAgB,CAAAH,OAAA,CAAQI,cAAgB,EAAAJ,OAAA,CAAQK,KAAK,CAAC,CAAA;MAC9D;IACF;IAEArB,OAAA,CAAM,iCAAiCsB,UAAU,CAAA;IAC3C,MAAAC,MAAA,GAAS,IAAIC,cAAA,CAAAA,MAAA,CAAOF,UAAY,EAAA;MACpCG,QAAU,EAAuC,KAAA,CAAA;MACjDC,YAAY;QAAC,GAAGV;QAASW,GAAK,EAAA,KAAA;QAASC,YAAY;MAAI;IAAA,CACxD,CAAA;IAEML,MAAA,CAAAM,EAAA,CAAG,SAAW,EAACC,GAAQ,IAAA;MACxB,IAAAA,GAAA,CAAIC,SAAS,SAAW,EAAA;QAC1B,IAAIvB,cAAe,CAAAwB,GAAA,CAAIF,GAAI,CAAAG,OAAO,CAAG,EAAA;UACnC;QACF;QAEA,IAAIC,KAAM,CAAAC,OAAA,CAAQL,GAAI,CAAAM,OAAO,CAAG,EAAA;UAC9BN,GAAA,CAAIM,OAAQ,CAAAC,OAAA,CAASC,WACnBC,OAAQ,CAAAC,IAAA,WAAQC,cAAAA,CAAAA,OAAM,CAAAC,MAAA,CAAO,QAAQ,CAAA,cAAKJ,OAAS,EAAA,CACrD;QAAA,CACK,MAAA;UACLC,OAAA,CAAQC,eAAQC,cAAAA,CAAAA,OAAA,CAAMC,OAAO,QAAQ,CAAA,cAAKZ,IAAIM,OAAS,EAAA;QACzD;QAEe5B,cAAA,CAAAmC,GAAA,CAAIb,IAAIG,OAAO,CAAA;QAC9B;MACF;MAEI,IAAAH,GAAA,CAAIC,SAAS,OAAS,EAAA;QAClB/B,OAAA,CAAA,uBAAA,EAAyB8B,GAAI,CAAAc,KAAA,IAAS,eAAe,CAAA;QAC3D1B,MAAA,CAAO,IAAI2B,KAAA,CAAMf,GAAI,CAAAc,KAAA,IAAS,yDAAyD,CAAC,CAAA;QACxF;MACF;MAEI,IAAAd,GAAA,CAAIC,SAAS,QAAU,EAAA;QACnB/B,OAAA,CAAA,kCAAA,EAAoC8B,GAAI,CAAAgB,IAAA,CAAKC,MAAM,CAAA;QACzDrE,OAAA,CAAQoD,IAAIgB,IAAI,CAAA;MAClB;IAAA,CACD,CAAA;IACMvB,MAAA,CAAAM,EAAA,CAAG,OAAS,EAACmB,GAAQ,IAAA;MACpBhD,OAAA,CAAA,oBAAA,EAAsBgD,IAAIZ,OAAO,CAAA;MACvClB,MAAA,CAAO8B,GAAG,CAAA;IAAA,CACX,CAAA;IACMzB,MAAA,CAAAM,EAAA,CAAG,MAAQ,EAACoB,IAAS,IAAA;MAC1B,IAAIA,SAAS,CAAG,EAAA;QACdjD,OAAA,CAAM,+BAA+BiD,IAAI,CAAA;QACzC/B,MAAA,CAAO,IAAI2B,KAAA,4DAA0DI,IAAA,EAAO,CAAA;MAC9E;IAAA,CACD,CAAA;EAAA,CACF,CAAA;AACH;AAEO,SAASC,sCAAsCC,QAA0B,EAAA;EACvE,OAAAA,QAAA,CAAS7D,QAAQ,OAAS,oBAAWsB,oBAAA,kBAAkC;AAChF;AAEO,SAASwC,sCAAsChC,cAAkC,EAAA;EAC/E,OAAA,CAAC5C,aAAK,CAAAoB,OAAA,CAAAyD,IAAA,CAAKjC,cAAgB,EAAA,cAAc,GAAG5C,aAAK,CAAAoB,OAAA,CAAAyD,IAAA,CAAKjC,cAAgB,EAAA,eAAe,CAAC,CAAA;AAC/F;AAEA,IAAI,CAACkC,2BAAc,EAAA;EACYC,4BAAA,EAAA;AAC/B;AAEA,SAASA,4BAA+B,GAAA;EAnHxC,IAAAC,EAAA;EAoHM,IAAA,CAACC,cAAAA,CAAAA,UAAc,IAAA,CAAC/B,yBAAY,EAAA;IACxB,MAAA,IAAImB,MAAM,qEAAqE,CAAA;EACvF;EAEA,MAAM;IAACtE,QAAU;IAAA6C,cAAA;IAAgBC;EAAK,CAAA,GAAIK,cAAAA,CAAAA,cAAc,CAAA,CAAC;EAEzD,IAAA,CAAI8B,sDAAY7B,GAAK,EAAA;IAGjB+B,OAAeC,OAAU,GAAA,IAAA;EAC7B;EAEI,IAAA,OAAOvC,mBAAmB,QAAU,EAAA;IACtCqC,cAAA,CAAAA,UAAA,CAAWG,YAAY;MAAC7B,IAAA,EAAM,OAAS;MAAAK,OAAA,EAAS;KAA0C,CAAA;IAC1F;EACF;EAEI,IAAAf,KAAA,IAAS,OAAOA,KAAA,KAAU,QAAU,EAAA;IACtCoC,cAAA,CAAAA,UAAA,CAAWG,YAAY;MAAC7B,IAAA,EAAM,OAAS;MAAAK,OAAA,EAAS;KAAwC,CAAA;IACxF;EACF;EAIApC,OAAA,CAAM,+BAA+B,CAAA;EACrCpB,OAAA,CAAQ,cAAc,CAAE,CAAAiF,UAAA,CAAWxF,WAAW;IAACE;EAAS,CAAA,CAAC,CAAA;EAInDyB,OAAA,CAAA,iCAAA,EAAmCK,QAAQyD,OAAO,CAAA;EACxD,MAAM;IAACC;EAAc,CAAA,GAEjBnF,OAAA,CAAQ,4BAA4B,CAAA,CAAEoF,QAAS,CAAA;IAC7CC,MAAQ,gBAAO5D,OAAQ,CAAAyD,OAAA,CAAQI,MAAM,CAAC,CAAA,CAAA;IACtCC,UAAY,EAAA,CAAC,MAAQ,EAAA,KAAA,EAAO,QAAQ,MAAM;EAAA,CAC3C,CAAA;EAILnE,OAAA,CAAM,oDAAoD,CAAA;EACpD,MAAA;IAAC+D,UAAY,EAAAK;EAAA,CAAgB,GAE/BxF,OAAA,CAAQ,4BAA4B,CAAA,CAAEoF,QAAS,CAAA;IAC7CC,MAAQ,gBAAO5D,OAAQ,CAAAyD,OAAA,CAAQI,MAAM,CAAC,CAAA,CAAA;IACtCC,UAAA,EAAY,CAAC,KAAK,CAAA;IAClBE,MAAQ,EAAA;EAAA,CACT,CAAA;EAEC,MAAAvB,IAAA,GAAO3B,eAAgB,CAAAC,cAAA,EAAgBC,KAAK,CAAA;EAElDoC,cAAA,CAAAA,UAAA,CAAWG,WAAY,CAAA;IAAC7B,IAAM,EAAA,QAAA;IAAUe;EAAK,CAAA,CAAA;EAGlCiB,UAAA,EAAA;EACEK,YAAA,EAAA;AACf;AAEA,SAASjD,eAAA,CAAgBC,gBAAwBC,KAA+B,EAAA;EA7KhF,IAAAmC,EAAA;EA8KQ,MAAAc,QAAA,GAAWC,qBAAqBnD,cAAc,CAAA;EAKpD,MAAMoD,OAAMhB,EAAO,GAAAnC,KAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,KAAA,CAAAmD,GAAA,KAAP,IAAY,GAAA,KAAA,CAAA,GAAAhB,EAAA,CAAAvE,GAAA,CAAKwF,GAAQ,IAAA;IAC/B,IAAA;MAEF,OAAO,IAAIC,GAAA,CAAID,GAAG,CAAA,CAAEE,QAAS,EAAA;IAAA,CAC7B,CAAA,MAAA;MACA,OAAOF,GAAI,CAAAG,UAAA,CAAW,GAAG,CAAA,GAAIH,iBAAUA,GAAA,CAAA;IACzC;EAAA,CACF,CAAA;EAEAzE,OAAA,CAAM,0CAA0C,CAAA;EAC1C,MAAA6E,MAAA,GAASC,MAAAA,CAAAA,oBAAqB,CAAAC,KAAA,CAAAA,aAAA,CAAcT,QAAU,EAAA;IAAC,GAAG5D,YAAA;IAAc,GAAGW,KAAA;IAAOmD;EAAI,CAAA,CAAC,CAAA;EAC7F,gCAAyBK,MAAA;AAC3B;AAEA,SAASN,qBAAqBnD,cAAwB,EAAA;EAjMtD,IAAAoC,EAAA;EAkMExD,OAAA,CAAM,yDAAyD,CAAA;EAC/D,MAAM;IAACgF;EAAA,CAAmB,GAAApG,OAAA,CAAQ,QAAQ,CAAA;EAE1CoB,OAAA,CAAM,8DAA8DoB,cAAc,CAAA;EAC5E,MAAA6D,WAAA,GAAcC,yBAAyB9D,cAAc,CAAA;EAE3D,IAAI,CAAC6D,WAAa,EAAA;IAChBjF,OAAA,CAAM,kCAAkC,CAAA;IACjC,OAAAgF,eAAA;EACT;EAEMhF,OAAA,CAAA,6CAAA,EAA+CiF,YAAYzG,IAAI,CAAA;EAE/D,MAAA2G,YAAA,GAAeF,YAAYG,SAAU,CAAAxF,OAAA;EACvC,IAAA,OAAOuF,iBAAiB,UAAY,EAAA;IACtCnF,OAAA,CAAM,+DAA+D,CAAA;IAC9D,OAAAmF,YAAA;EACT;EAEAnF,OAAA,CAAM,+DAA+D,CAAA;EAC/D,MAAAqF,WAAA,GAAcvG,OAAOwG,IAAK,CAAAL,WAAA,CAAYG,SAAS,CAAE,CAAA/B,IAAA,CAAK,IAAI,CAAK,IAAA,MAAA;EACrE,MAAMkC,eAAe/G,aAAK,CAAAoB,OAAA,CAAA4F,QAAA,CAASnF,QAAQb,GAAI,EAAA,EAAGyF,YAAYzG,IAAI,CAAA;EAC5D,MAAAiH,QAAA,GACJ,OAAOR,WAAA,CAAYG,SAAU,CAAAxF,OAAA,KAAY,cACrC,EACA,wBAAc,OAAOqF,WAAA,CAAYG,SAAU,CAAAxF,OAAA,MAAA;EAE3C,MAAAqC,OAAA,aAAasD,YAAA,cAAgBN,WAAY,CAAAS,QAAA,CAAA;EAE/C,CAAAlC,EAAA,GAAAC,cAAAA,CAAAA,UAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAAD,EAAA,CAAYI,WAAY,CAAA;IACtB7B,IAAM,EAAA,SAAA;IACNK,OAAS,EAAA,WACJmD,YAAuE,qEAAAE,QAAA,GAC1E,0CAAmCJ,aAAcvE,IAAK,EAAA,sDAExD;IACAmB;EAAA,CACF,CAAA;EAEO,OAAA+C,eAAA;AACT;AAEA,SAASE,yBAAyB9D,cAAwB,EAAA;EA5O1D,IAAAoC,EAAA;EA6OQ,MAAAmC,SAAA,GAAYvC,sCAAsChC,cAAc,CAAA;EAEtE,KAAA,MAAWwE,iBAAiBD,SAAW,EAAA;IACrC3F,OAAA,CAAM,6CAA6C4F,aAAa,CAAA;IAC5D,IAAA;MACK,OAAA;QAAA;QAELR,SAAA,EAAWS,6BAAiBD,aAAa,CAAA;QACzCpH,IAAM,EAAAoH,aAAA;QAAA;QAENF,QAAA,EAAUI,KAAKC,KAAM,CAAA,CAAAvC,EAAA,GAAAwC,WAAAA,CAAAA,OAAA,CAAGC,SAASL,aAAa,CAAA,KAAzB,mBAA4BM,OAAO;MAAA,CAC1D;aACOlD,GAAP,EAAA;MAEI,IAAAA,GAAA,CAAIC,SAAS,kBAAoB,EAAA;QAC7BjD,OAAA,CAAA,uCAAA,EAAyCgD,IAAIZ,OAAO,CAAA;QACpD,MAAAY,GAAA;MACR;MAEAhD,OAAA,CAAM,sCAAsC4F,aAAa,CAAA;IAC3D;EACF;EAEO,OAAA,IAAA;AACT;AC/OA,MAAMO,YAAe,GAAA,wBAAA;AAEd,SAASC,mBAAmBpF,OAIxB,EAAA;EACT,MAAM;IAACxB,GAAA;IAAKjB,QAAU;IAAA8H;EAAA,CAAY,GAAArF,OAAA;EAE3B,OAAA;IACLsF,IAAM,EAAA,6BAAA;IACNC,KAAO,EAAA,OAAA;IAEPC,UAAa,GAAA;MACX,IAAA,CAAKC,QAAS,CAAA;QACZ1E,IAAM,EAAA,OAAA;QACN2E,EAAI,EAAAP,YAAA;QACJG,IAAM,EAAA;MAAA,CACP,CAAA;IACH,CAAA;IAEA,MAAMK,cAAe,CAAAC,QAAA,EAAUC,YAAc,EAAA;MA3CjD,IAAArD,EAAA;MA4CM,MAAMsD,MAAS,GAAAD,YAAA;MACf,MAAME,SAAY,GAAAjI,MAAA,CAAOkI,MAAO,CAAAF,MAAM,CAAE,CAAAG,IAAA,CACrCC,IAAM,IAAA;QA9Cf1D,IAAAA,GAAAA;QA+Ce,OAAA0D,IAAA,CAAAnF,IAAA,KAAS,OACd,IAAAmF,IAAA,CAAKZ,IAAS,KAAA,QAAA,KAAA,CACd9C,MAAA0D,IAAK,CAAAC,cAAA,KAAL,IAAA3D,GAAAA,KAAAA,CAAAA,GAAAA,GAAAA,CAAqB4D,QAAS,CAAAjB,YAAA,CAAA,CAAA;MAAA,CAAA,CAClC;MAEA,IAAI,CAACY,SAAW,EAAA;QACR,MAAA,IAAIlE,KAAM,gDAAwCsD,YAAe,OAAA;MACzE;MAEI,IAAAY,SAAA,CAAUhF,SAAS,OAAS,EAAA;QACxB,MAAA,IAAIc,MAAM,2BAA2B,CAAA;MAC7C;MAEA,MAAMwE,gBAAgBN,SAAU,CAAAO,QAAA;MAC1B,MAAA3G,SAAA,GAAY,CAAC0F,QAAA,CAAS/G,OAAQ,CAAA,MAAA,EAAQ,EAAE,CAAG,EAAA+H,aAAa,CAAE,CAAAhE,IAAA,CAAK,GAAG,CAAA;MAExE,IAAImB,MAAgB,EAAC;MACjB,IAAA,CAAAhB,EAAA,GAAAuD,SAAA,CAAUQ,YAAV,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA/D,EAAA,CAAwBgE,WAAa,EAAA;QAGvChD,GAAA,GAAM,CAAC,GAAGuC,SAAU,CAAAQ,YAAA,CAAaC,WAAW,CAAA;QACjC,KAAA,MAAAtI,GAAA,IAAO6H,UAAUU,OAAS,EAAA;UAG7B,MAAAC,KAAA,GAAQZ,OAAO5H,GAAG,CAAA;UACxB,MAAMsI,cACJE,KAAS,IAAAA,KAAA,CAAM3F,SAAS,OAAU,GAAA2F,KAAA,CAAMH,aAAaC,WAAc,GAAA,KAAA,CAAA;UAErE,IAAIA,WAAa,EAAA;YACXhD,GAAA,CAAAmD,IAAA,CAAK,GAAGH,WAAW,CAAA;UACzB;QACF;MACF;MAEA,IAAA,CAAKf,QAAS,CAAA;QACZ1E,IAAM,EAAA,OAAA;QACNuF,QAAU,EAAA,YAAA;QACVM,MAAA,EAAQ,MAAM7G,cAAe,CAAA;UAC3BxC,QAAA;UACA6C,cAAgB,EAAA5B,GAAA;UAChB6B,KAAO,EAAA;YACLV,SAAA;YACA6D;UACF;QAAA,CACD;MAAA,CACF,CAAA;IACH;EAAA,CACF;AACF;ACrFO,SAASqD,yBAAoC,GAAA;EAC3C,OAAA;IACLvB,IAAM,EAAA,8BAAA;IACNwB,gBAAgBC,MAAQ,EAAA;MAChB,MAAA;QAACC;MAAI,CAAA,GAAID,MAAO,CAAAE,MAAA;MAEtB,OAAO,MAAM;QACX,MAAMC,UAAUC,gBAAAA,CAAAA,OAAQ,CAAA;UACtBC,cAAgB,EAAA,IAAA;UAChBC,QAAU,EAAA,CACR;YACEC,IAAM,EAAA,eAAA;YACNC,EAAI,EAAA,SAAiB;cAAA,IAAhB;gBAACC;eAAe;cACnB,MAAMC,WAAWD,SAAU,CAAAC,QAAA;cAEvB,IAAAA,QAAA,IAAYzC,oBAAG0C,UAAW,CAAAlK,aAAAA,CAAAA,OAAA,CAAK6E,KAAK2E,IAAM,EAAAS,QAAQ,CAAC,CAAG,EAAA;gBACjD,OAAAA,QAAA;cACT;cAEO;YACT;UACF,CAAA;QACF,CACD,CAAA;QAEDV,MAAA,CAAOY,WAAY,CAAAC,GAAA,CAAI,CAACC,GAAA,EAAKC,KAAKC,IAAS,KAAA;UACjCb,OAAA,CAAAW,GAAA,EAAYC,KAAYC,IAAI,CAAA;QAAA,CACrC,CAAA;MAAA,CACH;IACF;EAAA,CACF;AACF;ACvCO,SAASC,0BAAqC,GAAA;EAC5C,OAAA;IACL1C,IAAM,EAAA,sCAAA;IACNC,KAAO,EAAA,OAAA;IACPuB,gBAAgBmB,aAAe,EAAA;MAC7B,OAAO,MAAM;QACXA,aAAA,CAAcN,WAAY,CAAAC,GAAA,CAAI,CAACC,GAAA,EAAKC,KAAKC,IAAS,KAAA;UAC5C,IAAAF,GAAA,CAAIpE,QAAQ,aAAe,EAAA;YAC7BoE,GAAA,CAAIpE,GAAM,GAAA,6BAAA;UACZ;UAEKsE,IAAA,EAAA;QAAA,CACN,CAAA;MAAA,CACH;IACF;EAAA,CACF;AACF;ACVO,SAASG,oBAAoB7C,QAA+B,EAAA;EAC1D,OAAA;IACL8C,KAAO,EAAA,CACL;MAACC,GAAK,YAAG/C;MAA4BtE,IAAM,EAAA,WAAA;MAAasH,OAAO;IAAS,CAAA,EACxE;MAACD,GAAK,YAAG/C;MAA4BtE,IAAM,EAAA,WAAA;MAAasH,OAAO;IAAS,CAAA;EAC1E,CACF;AACF;ACVA,MAAMC,SAAgD,GAAA;EACpD,MAAQ,EAAA,cAAA;EACR,MAAQ,EAAA,eAAA;EACR,MAAQ,EAAA;AACV,CAAA;AAEO,SAASC,oBAAqB,QAM1B;EAAA,IAN0B;IACnCC,YAAA;IACAC;EACF,CAGW;EACT,MAAMC,QAA+B,CAAA,CAAC;EAEtC,eAAeC,WAAiC,GAAA;IAC9C,IAAID,MAAME,QAAU,EAAA;MAClB,OAAOF,KAAM,CAAAE,QAAA;IACf;IAEAF,KAAA,CAAME,QAAW,GAAA,MAAM5D,aAAG,CAAApG,OAAA,CAAAiK,OAAA,CAAQL,YAAY,CAAA;IAC9C,OAAOE,KAAM,CAAAE,QAAA;EACf;EAEO,OAAA;IACLtD,IAAM,EAAA,+BAAA;IACNC,KAAO,EAAA,OAAA;IACPuB,gBAAgBmB,aAAe,EAAA;MAC7B,MAAMa,cAAcC,IAAK,CAAAC,SAAA,CAAUd,oBAAoBO,aAAa,CAAA,EAAG,MAAM,CAAC,CAAA;MAC9E,MAAMQ,4BAAqBR,aAAA,0BAAA;MAE3B,OAAO,MAAM;QACXR,aAAA,CAAcN,WAAY,CAAAC,GAAA,CAAI,OAAOC,GAAA,EAAKC,KAAKC,IAAS,KAAA;UArChE,IAAAvF,EAAA;UAsCU,IAAA,CAAIA,EAAI,GAAAqF,GAAA,CAAApE,GAAA,KAAJ,IAAS,GAAA,KAAA,CAAA,GAAAjB,EAAA,CAAA4D,QAAA,CAAS6C,eAAkB,CAAA,EAAA;YACtCnB,GAAA,CAAIoB,UAAU,GAAK,EAAA,IAAA,EAAM;cAAC,cAAA,EAAgB;aAA4B,CAAA;YACtEpB,GAAA,CAAIqB,MAAML,WAAW,CAAA;YACrBhB,GAAA,CAAIsB,GAAI,EAAA;YACR;UACF;UAEM,MAAA5B,SAAA,GACHK,IAAYwB,UAAc,IAAA,IAAI3F,IAAImE,GAAI,CAAApE,GAAA,IAAO,KAAK,uBAAuB,CAAA;UAEtE,MAAA0E,KAAA,GAAQ,MAAMQ,WAAY,EAAA;UAChC,MAAMrC,QAAW,GAAA9I,aAAAA,CAAAA,OAAA,CAAK8L,QAAS,CAAA9B,SAAA,CAAUC,YAAY,EAAE,CAAA;UACvD,IAAI,CAACU,KAAA,CAAMoB,QAAS,CAAAjD,QAAQ,CAAG,EAAA;YACxByB,IAAA,EAAA;YACL;UACF;UAEA,MAAMyB,WAAWlB,SAAU,CAAA9K,aAAA,CAAAoB,OAAA,CAAK6K,OAAQ,CAAAnD,QAAQ,CAAC,CAAK,IAAA,0BAAA;UACtDwB,GAAA,CAAIoB,UAAU,GAAK,EAAA,IAAA,EAAM;YAAC,cAAA,EAAgBM;WAAS,CAAA;UAC/C1B,GAAA,CAAAqB,KAAA,CAAM,MAAMnE,aAAAA,CAAAA,OAAG,CAAA0E,QAAA,CAASlM,sBAAK6E,IAAK,CAAAmG,YAAA,EAAclC,QAAQ,CAAC,CAAC,CAAA;UAC9DwB,GAAA,CAAIsB,GAAI,EAAA;QAAA,CACT,CAAA;MAAA,CACH;IACF;EAAA,CACF;AACF;ACRA,eAAsBO,cAAc3J,OAA6C,EAAA;EAvDjF,IAAAwC,EAAA;EAwDQ,MAAA;IACJhE,GAAA;IACAoL,IAAA;IACAC,SAAA;IAAA;IAEAC,SAAA,GAAY9J,QAAQ4J,IAAS,KAAA,aAAA;IAC7B7C,MAAA;IACAgD,MAAA;IACA1E,UAAU2E,WAAc,GAAA;EACtB,CAAA,GAAAhK,OAAA;EAEE,MAAAzC,QAAA,GAAW,MAAMgB,kBAAA,CAAmBC,GAAG,CAAA;EACvC,MAAA6G,QAAA,GAAWjH,kBAAkB4L,WAAW,CAAA;EAExC,MAAAC,aAAA,GAAA,CAAiBzH,WAAM7D,kBAAAA,CAAAA,OAAU,CAAA;IAACH,KAAK0L;EAAU,CAAA,MAAhC,IAAoC,GAAA,KAAA,CAAA,GAAA1H,EAAA,CAAAhF,IAAA;EAC3D,IAAI,CAACyM,aAAe,EAAA;IACZ,MAAA,IAAIpI,MAAM,wCAAwC,CAAA;EAC1D;EAEM,MAAA2G,YAAA,GAAehL,sBAAK6E,IAAK,CAAA7E,aAAA,CAAAoB,OAAA,CAAKG,QAAQkL,aAAa,CAAA,EAAG,UAAU,UAAU,CAAA;EAChF,MAAME,uBAAgB9E,QAAA,WAAA;EAEtB,MAAM+E,UAA2B,GAAA;IAAA;IAAA;IAG/BC,QAAU,EAAA,2BAAA;IACVrD,IAAM,EAAAxI,GAAA;IACN8L,IAAM,EAAAjF,QAAA;IACNkF,KAAO,EAAA;MACLC,MAAQ,EAAAX,SAAA,IAAarM,aAAAA,CAAAA,OAAK,CAAAE,OAAA,CAAQc,KAAK,MAAM,CAAA;MAC7CiM,SAAW,EAAAX;IACb,CAAA;IACA/C,MAAQ,EAAA;MACNuD,IAAM,EAAAjF,QAAA;MACNqF,MAAM3D,MAAQ,IAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,MAAA,CAAA2D,IAAA;MACdC,IAAA,EAAA,CAAM5D,iCAAQ4D,IAAQ,KAAA,IAAA;MACtBC,UAAY,EAAA;IACd,CAAA;IACAC,UAAY,EAAA,KAAA;IACZjB,IAAA;IACAkB,OAAS,EAAA,CACPC,0BAAU,EAAA,EACVxC,oBAAqB,CAAA;MAACC,YAAc;MAAAC,aAAA,EAAe0B;KAAW,CAAA,EAC9DtD,yBAA0B,EAAA,EAC1BmB,0BAA2B,EAAA,EAC3B5C,kBAAmB,CAAA;MAACC,QAAU;MAAA7G,GAAA;MAAKjB;KAAS,CAAA,CAC9C;IACAyN,SAAW,EAAA,gBAAA;IACXC,QAAA,EAAUrB,IAAS,KAAA,YAAA,GAAe,QAAW,GAAA,MAAA;IAC7ClM,OAAS,EAAA;MACPwN,KAAO,EAAA7N,UAAA,CAAW;QAACE;OAAS;IAC9B,CAAA;IACA4N,MAAQ,EAAA;MACNC,kBAAA,EAAoB/L,OAAQ,CAAAC,GAAA,CAAI+L,mBAAwB,KAAA;IAC1D;EAAA,CACF;EAEA,IAAIzB,SAAS,YAAc,EAAA;IACzBQ,UAAA,CAAWG,KAAQ,GAAA;MACjB,GAAGH,UAAW,CAAAG,KAAA;MAEde,SAAW,EAAA,QAAA;MACXvB,MAAA,EAAQA,SAAS,SAAY,GAAA,KAAA;MAC7BwB,WAAa,EAAA,KAAA;MAAA;MAEbC,aAAe,EAAA;QACbC,KAAO,EAAA;UACLC,QAAQlO,aAAK,CAAAoB,OAAA,CAAAyD,IAAA,CAAK7D,GAAK,EAAA,SAAA,EAAW,WAAW,QAAQ;QACvD;MACF;IAAA,CACF;EACF;EAEO,OAAA4L,UAAA;AACT;AASO,SAASuB,mBAAmB1E,MAAoC,EAAA;EA3IvE,IAAAzE,EAAA,EAAAoJ,EAAA;EA4IE,IAAI,SAAOA,EAAO,GAAA,CAAApJ,EAAA,GAAAyE,MAAA,CAAAsD,KAAA,KAAP,mBAAciB,aAAd,KAAA,IAAA,GAAA,KAAA,CAAA,GAAAI,EAAA,CAA6BH,WAAU,QAAU,EAAA;IAC1D,MAAM,IAAI5J,KAAA,CACR,gFAAA,CACF;EACF;EAEI,IAAA,CAACoF,OAAOD,IAAM,EAAA;IAChB,MAAM,IAAInF,KAAA,CACR,uFAAA,CACF;EACF;EAEO,OAAA;IACL,GAAGoF,MAAA;IACHsD,KAAO,EAAA;MACL,GAAGtD,MAAO,CAAAsD,KAAA;MACViB,aAAe,EAAA;QACb,GAAGvE,OAAOsD,KAAM,CAAAiB,aAAA;QAChBC,KAAO,EAAA;UACL,GAAGxE,MAAO,CAAAsD,KAAA,CAAMiB,aAAc,CAAAC,KAAA;UAC9BC,QAAQlO,aAAK,CAAAoB,OAAA,CAAAyD,IAAA,CAAK4E,OAAOD,IAAM,EAAA,SAAA,EAAW,WAAW,QAAQ;QAC/D;MACF;IACF;EAAA,CACF;AACF;ACrKA,MAAM6E,WAAc,sTAAA;AAapB,MAAMC,mBAAsB,qTAAA;AAcrB,SAASC,eAAe/L,OAGpB,EAAA;EACH,MAAA;IAACgM,eAAiB;IAAAC;EAA0B,CAAA,GAAAjM,OAAA;EAC5C,MAAAkM,YAAA,GAAeD,yBAAyBJ,WAAc,GAAAC,mBAAA;EAE5D,OAAOI,YACJ,CAAA5N,OAAA,CAAQ,4BAA8B,EAAAyK,IAAA,CAAKC,UAAUmD,OAAQ,CAAAH,eAAe,CAAC,CAAC,EAC9E1N,OAAQ,CAAA,0BAAA,EAA4ByK,IAAK,CAAAC,SAAA,CAAUiD,sBAAsB,CAAC,CAAA;AAC/E;ACjCA,MAAMjN,OAAA,GAAQE,OAAY,CAAAC,MAAA,CAAO,QAAQ,CAAA;AAUzC,eAAsBiN,0BAA0BhM,cAAgD,EAAA;EAC9F,MAAMiM,WAAc,GAAA,CAClB7O,qBAAA,CAAK6E,IAAK,CAAAjC,cAAA,EAAgB,mBAAmB,CAAA,EAC7C5C,qBAAA,CAAK6E,IAAK,CAAAjC,cAAA,EAAgB,kBAAkB,CAAA,EAC5C5C,qBAAA,CAAK6E,IAAK,CAAAjC,cAAA,EAAgB,kBAAkB,CAAA,EAC5C5C,qBAAA,CAAK6E,IAAK,CAAAjC,cAAA,EAAgB,mBAAmB,CAAA,EAC7C5C,qBAAA,CAAK6E,IAAK,CAAAjC,cAAA,EAAgB,mBAAmB,CAAA,CAC/C;EAEMpB,OAAA,CAAA,yDAAA,EAA2DqN,YAAYtK,MAAM,CAAA;EAC7E,MAAAuK,OAAA,GAAU,MAAMrM,OAAQ,CAAAsM,GAAA,CAC5BF,WAAA,CAAYpO,GAAI,CAAA,MAAOuO,UAAgB,KAAA;IACrChP,IAAM,EAAAgP,UAAA;IACNC,MAAA,EAAQ,MAAMC,UAAA,CAAWF,UAAU;EAAA,CACnC,CAAA,CAAA,CACJ;EAEA,MAAMG,mBAAmBL,OAAQ,CAAAM,MAAA,CAAQ3F,MAAA,IAAWA,OAAOwF,MAAM,CAAA;EAC3DzN,OAAA,CAAA,wCAAA,EAA0C2N,iBAAiB5K,MAAM,CAAA;EAGnE,IAAA4K,gBAAA,CAAiB5K,WAAW,CAAG,EAAA;IACjCR,OAAA,CAAQC,KAAK,8EAA8E,CAAA;IACpF,OAAA,IAAA;EACT;EAEI,IAAAmL,gBAAA,CAAiB5K,SAAS,CAAG,EAAA;IAC/BR,OAAA,CAAQC,KAAK,0CAA0C,CAAA;IACtCmL,gBAAA,CAAAtL,OAAA,CAAS4F,MAAW,IAAA1F,OAAA,CAAQC,kBAAWyF,MAAA,CAAOzJ,MAAO,CAAA;IACtE+D,OAAA,CAAQC,IAAK,iBAASmL,gBAAiB,CAAA,CAAC,EAAEnP,IAAM,EAAA;EAClD;EAEO,OAAAmP,gBAAA,CAAiB,CAAC,CAAE,CAAAnP,IAAA;AAC7B;AAOA,SAASkP,WAAWG,QAAoC,EAAA;EAC/C,OAAA7H,qBAAA,CAAG8H,IAAK,CAAAD,QAAQ,CAAE,CAAAE,IAAA,CACvB,MAAM,IAAA,EACN,MAAM,KAAA,CACR;AACF;AC9CA,MAAM/N,KAAA,GAAQE,OAAY,CAAAC,MAAA,CAAO,SAAS,CAAA;AAe1C,eAAsB6N,kBAAmB,QAIP;EAAA,IAJO;IACvCxO,GAAA;IACAwN,eAAA;IACAiB;EACF,CAAkC;EAChCjO,KAAA,CAAM,uCAAuC,CAAA;EACvC,MAAAzB,QAAA,GAAW,MAAMgB,kBAAA,CAAmBC,GAAG,CAAA;EAC7C,MAAM0O,UAAa,GAAA1P,aAAAA,CAAAA,OAAA,CAAK6E,IAAK,CAAA7D,GAAA,EAAK,WAAW,SAAS,CAAA;EAEtDQ,KAAA,CAAM,0BAA0B,CAAA;EAChC,MAAMgG,aAAAA,CAAAA,QAAGmI,KAAM,CAAAD,UAAA,EAAY;IAACE,SAAA,EAAW;GAAK,CAAA;EAE5C,eAAeC,sBAAyB,GAAA;IACtCrO,KAAA,CAAM,6BAA6B,CAAA;IACnC,MAAMsO,SAAY,GAAApL,qCAAA,CAChB,MAAMnC,cAAe,CAAA;MACnBK,cAAgB,EAAA5B,GAAA;MAChBjB,QAAA;MACA8C,KAAO,EAAA;QAACV,SAAW,aAAInC,aAAK,CAAAoB,OAAA,CAAA4F,QAAA,CAAShG,GAAK,EAAAhB,aAAAA,CAAAA,OAAA,CAAK6E,IAAK,CAAA6K,UAAA,EAAY,QAAQ,CAAC,CAAG;MAAA;IAAA,CAC7E,CAAA,CACH;IAEAlO,KAAA,CAAM,yCAAyC,CAAA;IAC/C,MAAMgG,sBAAGuI,SAAU,CAAA/P,qBAAA,CAAK6E,KAAK6K,UAAY,EAAA,YAAY,GAAGI,SAAS,CAAA;EACnE;EAEA,IAAIL,KAAO,EAAA;IAENO,yBAAA,CAAAP,KAAA,CAAM7K,sCAAsC5D,GAAG,CAAC,EAChDqC,EAAG,CAAA,KAAA,EAAO,MAAMwM,sBAAA,EAAwB,CAAA;EAC7C;EAEA,MAAMA,sBAAuB,EAAA;EAE7BrO,KAAA,CAAM,qCAAqC,CAAA;EACrC,MAAAyO,gBAAA,GAAmB,MAAMrB,yBAAA,CAA0B5N,GAAG,CAAA;EAC5D,MAAMyN,yBAAyBwB,gBAC3B,GAAAjQ,aAAA,CAAAoB,OAAA,CAAK4F,QAAS,CAAA0I,UAAA,EAAYO,gBAAgB,CAC1C,GAAA,IAAA;EAEJ,MAAMzI,aAAG,CAAApG,OAAA,CAAA2O,SAAA,CACP/P,qBAAA,CAAK6E,IAAK,CAAA6K,UAAA,EAAY,QAAQ,CAAA,EAC9BnB,cAAe,CAAA;IAACC,eAAiB;IAAAC;GAAuB,CAAA,CAC1D;AACF;;;;;"}