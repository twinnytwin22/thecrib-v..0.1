{"version":3,"file":"buildAction-5e9b40e6.js","sources":["../../src/_internal/cli/actions/build/buildAction.ts"],"sourcesContent":["import path from 'path'\nimport {promisify} from 'util'\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore This may not yet be built.\nimport chalk from 'chalk'\nimport rimrafCallback from 'rimraf'\nimport type {CliCommandArguments, CliCommandContext} from '@sanity/cli'\nimport {buildStaticFiles, ChunkModule, ChunkStats} from '../../server'\nimport {checkStudioDependencyVersions} from '../../util/checkStudioDependencyVersions'\nimport {checkRequiredDependencies} from '../../util/checkRequiredDependencies'\nimport {getTimer} from '../../util/timing'\n\nconst rimraf = promisify(rimrafCallback)\n\nexport interface BuildSanityStudioCommandFlags {\n  yes?: boolean\n  y?: boolean\n  minify?: boolean\n  stats?: boolean\n  'source-maps'?: boolean\n}\n\nexport default async function buildSanityStudio(\n  args: CliCommandArguments<BuildSanityStudioCommandFlags>,\n  context: CliCommandContext,\n  overrides?: {basePath?: string}\n): Promise<{didCompile: boolean}> {\n  const timer = getTimer()\n  const {output, prompt, workDir, cliConfig} = context\n  const flags: BuildSanityStudioCommandFlags = {\n    minify: true,\n    stats: false,\n    'source-maps': false,\n    ...args.extOptions,\n  }\n\n  const unattendedMode = Boolean(flags.yes || flags.y)\n  const defaultOutputDir = path.resolve(path.join(workDir, 'dist'))\n  const outputDir = path.resolve(args.argsWithoutOptions[0] || defaultOutputDir)\n\n  await checkStudioDependencyVersions(workDir)\n\n  // If the check resulted in a dependency install, the CLI command will be re-run,\n  // thus we want to exit early\n  if ((await checkRequiredDependencies(context)).didInstall) {\n    return {didCompile: false}\n  }\n\n  const envVarKeys = getSanityEnvVars()\n  if (envVarKeys.length > 0) {\n    output.print(\n      '\\nIncluding the following environment variables as part of the JavaScript bundle:'\n    )\n    envVarKeys.forEach((key) => output.print(`- ${key}`))\n    output.print('')\n  }\n\n  let shouldClean = true\n  if (outputDir !== defaultOutputDir && !unattendedMode) {\n    shouldClean = await prompt.single({\n      type: 'confirm',\n      message: `Do you want to delete the existing directory (${outputDir}) first?`,\n      default: true,\n    })\n  }\n\n  let spin\n\n  if (shouldClean) {\n    timer.start('cleanOutputFolder')\n    spin = output.spinner('Clean output folder').start()\n    await rimraf(outputDir)\n    const cleanDuration = timer.end('cleanOutputFolder')\n    spin.text = `Clean output folder (${cleanDuration.toFixed()}ms)`\n    spin.succeed()\n  }\n\n  spin = output.spinner('Build Sanity Studio').start()\n\n  try {\n    timer.start('bundleStudio')\n    const bundle = await buildStaticFiles({\n      cwd: workDir,\n      outputDir,\n      basePath: overrides?.basePath || cliConfig?.project?.basePath || '/',\n      sourceMap: Boolean(flags['source-maps']),\n      minify: Boolean(flags.minify),\n      vite: cliConfig && 'vite' in cliConfig ? cliConfig.vite : undefined,\n    })\n    const buildDuration = timer.end('bundleStudio')\n\n    spin.text = `Build Sanity Studio (${buildDuration.toFixed()}ms)`\n    spin.succeed()\n\n    if (flags.stats) {\n      output.print('\\nLargest module files:')\n      output.print(formatModuleSizes(sortModulesBySize(bundle.chunks).slice(0, 15)))\n    }\n  } catch (err) {\n    spin.fail()\n    throw err\n  }\n\n  return {didCompile: true}\n}\n\n// eslint-disable-next-line no-process-env\nfunction getSanityEnvVars(env: Record<string, string | undefined> = process.env): string[] {\n  return Object.keys(env).filter((key) => key.toUpperCase().startsWith('SANITY_STUDIO_'))\n}\n\nfunction sortModulesBySize(chunks: ChunkStats[]): ChunkModule[] {\n  return chunks\n    .flatMap((chunk) => chunk.modules)\n    .sort((modA, modB) => modB.renderedLength - modA.renderedLength)\n}\n\nfunction formatModuleSizes(modules: ChunkModule[]): string {\n  const lines = []\n  for (const mod of modules) {\n    lines.push(` - ${formatModuleName(mod.name)} (${formatSize(mod.renderedLength)})`)\n  }\n\n  return lines.join('\\n')\n}\n\nfunction formatModuleName(modName: string): string {\n  const delimiter = '/node_modules/'\n  const nodeIndex = modName.lastIndexOf(delimiter)\n  return nodeIndex === -1 ? modName : modName.slice(nodeIndex + delimiter.length)\n}\n\nfunction formatSize(bytes: number): string {\n  return chalk.cyan(`${(bytes / 1024).toFixed()} kB`)\n}\n"],"names":["rimraf","promisify","rimrafCallback","buildSanityStudio","args","context","overrides","_a","timer","getTimer","output","prompt","workDir","cliConfig","flags","minify","stats","extOptions","unattendedMode","Boolean","yes","y","defaultOutputDir","path","resolve","join","outputDir","argsWithoutOptions","checkStudioDependencyVersions","checkRequiredDependencies","didInstall","didCompile","envVarKeys","getSanityEnvVars","length","print","forEach","key","shouldClean","single","type","message","default","spin","start","spinner","cleanDuration","end","text","toFixed","succeed","bundle","buildStaticFiles","cwd","basePath","project","sourceMap","vite","buildDuration","formatModuleSizes","sortModulesBySize","chunks","slice","err","fail","env","process","Object","keys","filter","toUpperCase","startsWith","flatMap","chunk","modules","sort","modA","modB","renderedLength","lines","mod","push","formatModuleName","name","formatSize","modName","delimiter","nodeIndex","lastIndexOf","bytes","chalk","cyan"],"mappings":"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"}