import { jsx, jsxs } from 'react/jsx-runtime';
import { WarningOutlineIcon, ChevronRightIcon, DocumentIcon, FolderIcon } from '@sanity/icons';
import { isSanityDocument } from '@sanity/types';
import { Text } from '@sanity/ui';
import { useState, useMemo, useCallback, useEffect } from 'react';
import { SanityDefaultPreview, useSchema, useDocumentPreviewStore, useDocumentPresence, PreviewCard } from 'sanity';
import { usePaneRouter, PaneItemPreview } from './desk-eb7b3548.js';
import 'lodash/omit.js';
import '@sanity/util/paths';
import 'sanity/router';
const getUnknownTypeFallback = (id, typeName) => ({
  title: /* @__PURE__ */jsxs("em", {
    children: ["No schema found for type ", /* @__PURE__ */jsx("code", {
      children: typeName
    })]
  }),
  subtitle: /* @__PURE__ */jsxs("em", {
    children: ["Document: ", /* @__PURE__ */jsx("code", {
      children: id
    })]
  }),
  media: () => /* @__PURE__ */jsx(WarningOutlineIcon, {})
});
function MissingSchemaType(props) {
  const {
    layout,
    value
  } = props;
  return /* @__PURE__ */jsx(SanityDefaultPreview, {
    ...getUnknownTypeFallback(value._id, value._type),
    layout
  });
}
function getIconWithFallback(icon, schemaType, defaultIcon) {
  if (icon === false) {
    return false;
  }
  return icon || schemaType && schemaType.icon || defaultIcon || false;
}
function PaneItem(props) {
  const {
    icon,
    id,
    layout = "default",
    pressed,
    schemaType,
    selected,
    title,
    value
  } = props;
  const schema = useSchema();
  const documentPreviewStore = useDocumentPreviewStore();
  const {
    ChildLink
  } = usePaneRouter();
  const documentPresence = useDocumentPresence(id);
  const hasSchemaType = Boolean(schemaType && schemaType.name && schema.get(schemaType.name));
  const [clicked, setClicked] = useState(false);
  const preview = useMemo(() => {
    if (value && isSanityDocument(value)) {
      if (!schemaType || !hasSchemaType) {
        return /* @__PURE__ */jsx(MissingSchemaType, {
          value
        });
      }
      return /* @__PURE__ */jsx(PaneItemPreview, {
        documentPreviewStore,
        icon: getIconWithFallback(icon, schemaType, DocumentIcon),
        layout,
        schemaType,
        value,
        presence: documentPresence
      });
    }
    return /* @__PURE__ */jsx(SanityDefaultPreview, {
      status: /* @__PURE__ */jsx(Text, {
        muted: true,
        children: /* @__PURE__ */jsx(ChevronRightIcon, {})
      }),
      icon: getIconWithFallback(icon, schemaType, FolderIcon),
      layout,
      title
    });
  }, [documentPreviewStore, hasSchemaType, icon, layout, schemaType, title, value, documentPresence]);
  const Link = useMemo(() => function LinkComponent(linkProps) {
    return /* @__PURE__ */jsx(ChildLink, {
      ...linkProps,
      childId: id
    });
  }, [ChildLink, id]);
  const handleClick = useCallback(() => setClicked(true), []);
  useEffect(() => setClicked(false), [selected]);
  return /* @__PURE__ */jsx(PreviewCard, {
    __unstable_focusRing: true,
    as: Link,
    "data-as": "a",
    "data-ui": "PaneItem",
    padding: 2,
    radius: 2,
    onClick: handleClick,
    pressed,
    selected: selected || clicked,
    tone: "inherit",
    children: preview
  });
}
export { PaneItem };
//# sourceMappingURL=PaneItem-59fdbcf0.js.map
