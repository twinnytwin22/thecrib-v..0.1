{"version":3,"file":"getGraphQLAPIs-0c5e1d64.js","sources":["../../src/_internal/cli/actions/graphql/getGraphQLAPIs.ts"],"sourcesContent":["import path from 'path'\nimport {Worker, isMainThread} from 'worker_threads'\nimport readPkgUp from 'read-pkg-up'\nimport type {CliCommandContext, CliV3CommandContext} from '@sanity/cli'\nimport type {\n  ResolvedGraphQLAPI,\n  ResolvedSourceProperties,\n  SchemaDefinitionish,\n  TypeResolvedGraphQLAPI,\n} from './types'\nimport {createSchema} from 'sanity'\n\nexport async function getGraphQLAPIs(cliContext: CliCommandContext): Promise<ResolvedGraphQLAPI[]> {\n  if (!isModernCliConfig(cliContext)) {\n    throw new Error('Expected Sanity studio of version 3 or above')\n  }\n\n  if (!isMainThread) {\n    throw new Error('getGraphQLAPIs() must be called from the main thread')\n  }\n\n  const defaultSchema = createSchema({name: 'default', types: []})\n  const defaultTypes = defaultSchema.getTypeNames()\n  const isCustomType = (type: SchemaDefinitionish) => !defaultTypes.includes(type.name)\n\n  const apis = await getApisWithSchemaTypes(cliContext)\n  const resolved = apis.map(\n    ({schemaTypes, ...api}): ResolvedSourceProperties => ({\n      schema: createSchema({name: 'default', types: schemaTypes.filter(isCustomType)}),\n      ...api,\n    })\n  )\n\n  return resolved\n}\n\nfunction getApisWithSchemaTypes(cliContext: CliCommandContext): Promise<TypeResolvedGraphQLAPI[]> {\n  return new Promise<TypeResolvedGraphQLAPI[]>((resolve, reject) => {\n    const {cliConfig, cliConfigPath, workDir} = cliContext\n    const rootPkgPath = readPkgUp.sync({cwd: __dirname})?.path\n    if (!rootPkgPath) {\n      throw new Error('Could not find root directory for `sanity` package')\n    }\n\n    const rootDir = path.dirname(rootPkgPath)\n    const workerPath = path.join(rootDir, 'lib', '_internal', 'cli', 'threads', 'getGraphQLAPIs.js')\n    const worker = new Worker(workerPath, {\n      workerData: {cliConfig: serialize(cliConfig || {}), cliConfigPath, workDir},\n    })\n    worker.on('message', resolve)\n    worker.on('error', reject)\n    worker.on('exit', (code) => {\n      if (code !== 0) reject(new Error(`Worker stopped with exit code ${code}`))\n    })\n  })\n}\n\nfunction isModernCliConfig(config: CliCommandContext): config is CliV3CommandContext {\n  return config.sanityMajorVersion >= 3\n}\n\nfunction serialize<T>(obj: T): T {\n  try {\n    return JSON.parse(JSON.stringify(obj))\n  } catch (cause) {\n    throw new Error(`Failed to serialize CLI configuration`, {cause})\n  }\n}\n"],"names":["getGraphQLAPIs","cliContext","isModernCliConfig","Error","isMainThread","defaultSchema","createSchema","name","types","defaultTypes","getTypeNames","isCustomType","type","includes","apis","getApisWithSchemaTypes","resolved","map","schemaTypes","api","schema","filter","Promise","resolve","reject","_a","cliConfig","cliConfigPath","workDir","rootPkgPath","sync","cwd","__dirname","path","rootDir","dirname","workerPath","join","worker","Worker","workerData","serialize","on","code","config","sanityMajorVersion","obj","JSON","parse","stringify","cause"],"mappings":";;;;;;;;;;;;;AAYA,eAAsBA,eAAeC,UAA8D,EAAA;EAC7F,IAAA,CAACC,iBAAkB,CAAAD,UAAU,CAAG,EAAA;IAC5B,MAAA,IAAIE,MAAM,8CAA8C,CAAA;EAChE;EAEA,IAAI,CAACC,cAAAA,CAAAA,YAAc,EAAA;IACX,MAAA,IAAID,MAAM,sDAAsD,CAAA;EACxE;EAEM,MAAAE,aAAA,GAAgBC,MAAAA,CAAAA,aAAa;IAACC,IAAA,EAAM;IAAWC,KAAO,EAAA;GAAG,CAAA;EACzD,MAAAC,YAAA,GAAeJ,cAAcK,YAAa,EAAA;EAChD,MAAMC,eAAgBC,IAAA,IAA8B,CAACH,YAAa,CAAAI,QAAA,CAASD,KAAKL,IAAI,CAAA;EAE9E,MAAAO,IAAA,GAAO,MAAMC,sBAAA,CAAuBd,UAAU,CAAA;EACpD,MAAMe,WAAWF,IAAK,CAAAG,GAAA,CACpB;IAAA,IAAC;MAACC,WAAa;MAAA,GAAGC;KAAoC;IAAA,OAAA;MACpDC,MAAA,EAAQd,MAAAA,CAAAA,YAAa,CAAA;QAACC,IAAM,EAAA,SAAA;QAAWC,OAAOU,WAAY,CAAAG,MAAA,CAAOV,YAAY;OAAE,CAAA;MAC/E,GAAGQ;IAAA,CACL;EAAA,CAAA,CACF;EAEO,OAAAH,QAAA;AACT;AAEA,SAASD,uBAAuBd,UAAkE,EAAA;EAChG,OAAO,IAAIqB,OAAA,CAAkC,CAACC,OAAA,EAASC,MAAW,KAAA;IArCpE,IAAAC,EAAA;IAsCI,MAAM;MAACC,SAAA;MAAWC,aAAe;MAAAC;IAAA,CAAW,GAAA3B,UAAA;IACtC,MAAA4B,WAAA,GAAA,CAAcJ,gCAAUK,IAAK,CAAA;MAACC,KAAKC;IAAS,CAAC,MAA/B,IAAkC,GAAA,KAAA,CAAA,GAAAP,EAAA,CAAAQ,IAAA;IACtD,IAAI,CAACJ,WAAa,EAAA;MACV,MAAA,IAAI1B,MAAM,oDAAoD,CAAA;IACtE;IAEM,MAAA+B,OAAA,GAAUD,aAAAA,CAAAA,OAAK,CAAAE,OAAA,CAAQN,WAAW,CAAA;IAClC,MAAAO,UAAA,GAAaH,sBAAKI,IAAK,CAAAH,OAAA,EAAS,OAAO,WAAa,EAAA,KAAA,EAAO,WAAW,mBAAmB,CAAA;IACzF,MAAAI,MAAA,GAAS,IAAIC,cAAA,CAAAA,MAAA,CAAOH,UAAY,EAAA;MACpCI,UAAA,EAAY;QAACd,SAAW,EAAAe,SAAA,CAAUf,aAAa,EAAE,CAAG;QAAAC,aAAA;QAAeC;MAAO;IAAA,CAC3E,CAAA;IACMU,MAAA,CAAAI,EAAA,CAAG,WAAWnB,OAAO,CAAA;IACrBe,MAAA,CAAAI,EAAA,CAAG,SAASlB,MAAM,CAAA;IAClBc,MAAA,CAAAI,EAAA,CAAG,MAAQ,EAACC,IAAS,IAAA;MAC1B,IAAIA,IAAS,KAAA,CAAA,EAAGnB,MAAA,CAAO,IAAIrB,KAAA,yCAAuCwC,IAAA,EAAO,CAAA;IAAA,CAC1E,CAAA;EAAA,CACF,CAAA;AACH;AAEA,SAASzC,kBAAkB0C,MAA0D,EAAA;EACnF,OAAOA,OAAOC,kBAAsB,IAAA,CAAA;AACtC;AAEA,SAASJ,UAAaK,GAAW,EAAA;EAC3B,IAAA;IACF,OAAOC,IAAK,CAAAC,KAAA,CAAMD,IAAK,CAAAE,SAAA,CAAUH,GAAG,CAAC,CAAA;WAC9BI,KAAP,EAAA;IACA,MAAM,IAAI/C,KAAA,0CAA+C;MAAC+C;IAAM,CAAA,CAAA;EAClE;AACF;"}